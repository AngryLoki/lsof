head	1.93;
access;
symbols;
locks; strict;
comment	@# @;


1.93
date	2018.02.14.14.01.23;	author abe;	state Exp;
branches;
next	1.92;

1.92
date	2014.10.13.22.30.20;	author abe;	state Exp;
branches;
next	1.91;

1.91
date	2012.04.10.16.33.03;	author abe;	state Exp;
branches;
next	1.90;

1.90
date	2011.09.27.17.33.43;	author abe;	state Exp;
branches;
next	1.89;

1.89
date	2010.01.18.18.58.23;	author abe;	state Exp;
branches;
next	1.88;

1.88
date	2009.03.25.19.17.10;	author abe;	state Exp;
branches;
next	1.87;

1.87
date	2007.04.24.16.12.51;	author abe;	state Exp;
branches;
next	1.86;

1.86
date	2006.04.10.12.42.30;	author abe;	state Exp;
branches;
next	1.85;

1.85
date	2006.03.27.22.59.31;	author abe;	state Exp;
branches;
next	1.84;

1.84
date	2005.08.29.10.13.20;	author abe;	state Exp;
branches;
next	1.83;

1.83
date	2005.05.17.01.05.27;	author abe;	state Exp;
branches;
next	1.82;

1.82
date	2005.05.11.12.58.27;	author abe;	state Exp;
branches;
next	1.81;

1.81
date	2005.01.17.13.21.26;	author abe;	state Exp;
branches;
next	1.80;

1.80
date	2004.12.30.18.36.53;	author abe;	state Exp;
branches;
next	1.79;

1.79
date	2004.10.17.21.40.41;	author abe;	state Exp;
branches;
next	1.78;

1.78
date	2004.07.06.19.10.56;	author abe;	state Exp;
branches;
next	1.77;

1.77
date	2004.03.10.23.39.04;	author abe;	state Exp;
branches;
next	1.76;

1.76
date	2004.01.14.22.36.21;	author abe;	state Exp;
branches;
next	1.75;

1.75
date	2004.01.14.11.20.38;	author abe;	state Exp;
branches;
next	1.74;

1.74
date	2003.10.15.20.28.19;	author abe;	state Exp;
branches;
next	1.73;

1.73
date	2003.06.11.11.31.53;	author abe;	state Exp;
branches;
next	1.72;

1.72
date	2003.03.22.12.00.44;	author abe;	state Exp;
branches;
next	1.71;

1.71
date	2003.03.21.17.34.24;	author abe;	state Exp;
branches;
next	1.70;

1.70
date	2002.12.13.14.43.47;	author abe;	state Exp;
branches;
next	1.69;

1.69
date	2002.12.05.12.10.26;	author abe;	state Exp;
branches;
next	1.68;

1.68
date	2002.10.08.20.11.46;	author abe;	state Exp;
branches;
next	1.67;

1.67
date	2002.06.17.01.36.04;	author abe;	state Exp;
branches;
next	1.66;

1.66
date	2002.01.18.20.50.14;	author abe;	state Exp;
branches;
next	1.65;

1.65
date	2002.01.14.15.48.05;	author abe;	state Exp;
branches;
next	1.64;

1.64
date	2001.11.01.20.24.18;	author abe;	state Exp;
branches;
next	1.63;

1.63
date	2001.10.15.18.47.27;	author abe;	state Exp;
branches;
next	1.62;

1.62
date	2001.09.04.17.57.04;	author abe;	state Exp;
branches;
next	1.61;

1.61
date	2001.07.18.12.55.14;	author abe;	state Exp;
branches;
next	1.60;

1.60
date	2001.06.19.13.18.34;	author abe;	state Exp;
branches;
next	1.59;

1.59
date	2001.05.03.12.26.30;	author abe;	state Exp;
branches;
next	1.58;

1.58
date	2001.05.01.20.23.54;	author abe;	state Exp;
branches;
next	1.57;

1.57
date	2001.05.01.19.47.33;	author abe;	state Exp;
branches;
next	1.56;

1.56
date	2001.03.19.12.26.11;	author abe;	state Exp;
branches;
next	1.55;

1.55
date	2001.02.14.19.37.49;	author abe;	state Exp;
branches;
next	1.54;

1.54
date	2001.01.02.12.42.24;	author abe;	state Exp;
branches;
next	1.53;

1.53
date	2000.12.06.15.22.26;	author abe;	state Exp;
branches;
next	1.52;

1.52
date	2000.11.05.13.36.17;	author abe;	state Exp;
branches;
next	1.51;

1.51
date	2000.11.05.13.29.40;	author abe;	state Exp;
branches;
next	1.50;

1.50
date	2000.08.08.15.16.05;	author abe;	state Exp;
branches;
next	1.49;

1.49
date	2000.06.29.12.49.27;	author abe;	state Exp;
branches;
next	1.48;

1.48
date	2000.06.28.18.35.13;	author abe;	state Exp;
branches;
next	1.47;

1.47
date	2000.06.27.18.02.58;	author abe;	state Exp;
branches;
next	1.46;

1.46
date	2000.06.25.17.39.35;	author abe;	state Exp;
branches;
next	1.45;

1.45
date	2000.05.31.13.26.17;	author abe;	state Exp;
branches;
next	1.44;

1.44
date	2000.04.04.01.26.51;	author abe;	state Exp;
branches;
next	1.43;

1.43
date	2000.03.23.14.23.42;	author abe;	state Exp;
branches;
next	1.42;

1.42
date	100.01.14.08.50.25;	author abe;	state Exp;
branches;
next	1.41;

1.41
date	99.11.28.06.48.46;	author abe;	state Exp;
branches;
next	1.40;

1.40
date	99.10.23.09.24.25;	author abe;	state Exp;
branches;
next	1.39;

1.39
date	99.07.28.09.26.01;	author abe;	state Exp;
branches;
next	1.38;

1.38
date	99.06.22.10.30.33;	author abe;	state Exp;
branches;
next	1.37;

1.37
date	99.05.10.21.18.37;	author abe;	state Exp;
branches;
next	1.36;

1.36
date	99.05.09.14.52.06;	author abe;	state Exp;
branches;
next	1.35;

1.35
date	99.04.15.07.26.43;	author abe;	state Exp;
branches;
next	1.34;

1.34
date	99.03.29.07.22.58;	author abe;	state Exp;
branches;
next	1.33;

1.33
date	99.02.25.20.03.15;	author abe;	state Exp;
branches;
next	1.32;

1.32
date	99.01.25.15.44.35;	author abe;	state Exp;
branches;
next	1.31;

1.31
date	98.12.28.10.06.31;	author abe;	state Exp;
branches;
next	1.30;

1.30
date	98.11.25.10.01.34;	author abe;	state Exp;
branches;
next	1.29;

1.29
date	98.11.23.07.43.11;	author abe;	state Exp;
branches;
next	1.28;

1.28
date	98.09.14.20.08.10;	author abe;	state Exp;
branches;
next	1.27;

1.27
date	98.09.14.13.49.49;	author abe;	state Exp;
branches;
next	1.26;

1.26
date	98.05.13.06.59.34;	author abe;	state Exp;
branches;
next	1.25;

1.25
date	98.04.03.13.14.25;	author abe;	state Exp;
branches;
next	1.24;

1.24
date	98.03.24.14.01.40;	author abe;	state Exp;
branches;
next	1.23;

1.23
date	98.03.18.16.49.00;	author abe;	state Exp;
branches;
next	1.22;

1.22
date	98.03.06.19.04.27;	author abe;	state Exp;
branches;
next	1.21;

1.21
date	98.01.23.08.41.08;	author abe;	state Exp;
branches;
next	1.20;

1.20
date	98.01.16.20.27.00;	author abe;	state Exp;
branches;
next	1.19;

1.19
date	98.01.16.14.32.44;	author abe;	state Exp;
branches;
next	1.18;

1.18
date	97.12.30.14.24.02;	author abe;	state Exp;
branches;
next	1.17;

1.17
date	97.12.15.07.46.17;	author abe;	state Exp;
branches;
next	1.16;

1.16
date	97.12.11.15.53.09;	author abe;	state Exp;
branches;
next	1.15;

1.15
date	97.12.01.14.49.27;	author abe;	state Exp;
branches;
next	1.14;

1.14
date	97.11.25.08.21.25;	author abe;	state Exp;
branches;
next	1.13;

1.13
date	97.11.03.10.35.23;	author abe;	state Exp;
branches;
next	1.12;

1.12
date	97.10.14.08.00.16;	author abe;	state Exp;
branches;
next	1.11;

1.11
date	97.07.09.08.37.12;	author abe;	state Exp;
branches;
next	1.10;

1.10
date	97.06.23.17.29.36;	author abe;	state Exp;
branches;
next	1.9;

1.9
date	97.06.12.18.49.07;	author abe;	state Exp;
branches;
next	1.8;

1.8
date	97.05.12.09.48.51;	author abe;	state Exp;
branches;
next	1.7;

1.7
date	97.04.29.13.01.31;	author abe;	state Exp;
branches;
next	1.6;

1.6
date	97.04.23.16.01.23;	author abe;	state Exp;
branches;
next	1.5;

1.5
date	97.04.17.13.15.28;	author abe;	state Exp;
branches;
next	1.4;

1.4
date	97.04.07.08.20.41;	author abe;	state Exp;
branches;
next	1.3;

1.3
date	97.03.19.13.11.34;	author abe;	state Exp;
branches;
next	1.2;

1.2
date	97.02.24.15.47.45;	author abe;	state Exp;
branches;
next	1.1;

1.1
date	97.02.24.07.21.53;	author abe;	state Exp;
branches;
next	;


desc
@Lsof version 4
@


1.93
log
@Revision 4.90
@
text
@
    	Configuring The Device Cache File Path

			    Contents

		A.  Introduction and History
		B.  Device Cache File Format
		    1.	Integrity Checks
		    2.	The Setgid and Setuid-root States
		C. Device Cache File Path Options
		    1.	Path Named by ``-D''
		    2.	Path Named in Environment Variable
		    3.	Default System-wide Path
			a.  Build Procedure
		    4.	Default Personal Path
		    5.	Modified Default Personal Path
		D. Displaying the Default Path
		Appendix A, Unix Dialects Without a Device Cache
		Appendix B, Lsof Dialects and Their Permissions
		    1.	Setuid-root Lsof Dialects 
		    2.	Setgid Lsof Dialects That Surrender Setgid
		   	Permission


A. Introduction and History
===========================

Lsof writes a file of information about the contents of the nodes
in /dev (or /devices) to reduce its startup overhead on later calls.
It does this for all Unix dialects, except those noted in Appendix A.

This file, called the device cache file, enables lsof to avoid
calling the kernel stat(2) function on every node in /dev (or
/devices) from which it builds a table of correspondence between
major/minor device numbers and device names.

A full scan of /dev (or /devices) on some systems may involve
calling the sometimes-slow stat(2) function 10,000 times or more.
Furthermore, each stat(2) call consumes space in the kernel's name
cache, forcing from it path name components that would be more
useful when lsof tries to associate them with open files.

While it's hard to question the usefulness of the device cache,
it's also hard to decide where it should be written.  When the
feature was first added, the device cache file was written to /tmp,
and its ownership was set to that of the real user ID (UID) under
which the creating lsof process was run.  However, to enable any
process to update it when /dev (or /devices) changed, lsof set its
modes to 0666, thus allowing anyone to read or write it.

The writing of a world-readable and world-writable device cache
file to any place has security weaknesses.  A clever intruder who
carefully preserves the integrity of the file might be able to
remove devices that would prevent lsof from observing the intruder's
files.  A clever intruder might also be able to put a symbolic link
in place and trick lsof into writing to the link's destination with
its effective permissions, thus bypassing the real user's (possibly
weaker) permissions.

Later the location of the device cache file was changed.  It was
converted to a personal file, located in the home directory of each
real UID that executed lsof, and owned by that UID.  Thus it was
no longer possible for one user to affect lsof's access to the
device cache file, nor was it possible for a user to mount a symbolic
link attack on a restricted file, but the result was that each lsof
user had a private copy of the device cache file.

The device cache file feature has undergone some further refinements
in path name formation to reach its present state.  This documentation
describes the path name formation options open to the lsof builder
and user after those refinements, and how lsof attempts to insure
that none of the options presents a security risk.


B. Device Cache File Format
===========================

The device cache file is a flat file of ASCII text.  It has an
initial statement of how many sections the file might contain --
the possible sections are character devices, block devices, clone
devices, pseudo devices, and checksum.  The character devices and
checksum sections are always present.

Each section has a header that numbers the entries in the section.

The last section is a checksum section that contains a 16 bit cyclic
redundancy (CRC) checksum of everything in the file but the checksum
section itself.

Lsof always sets the permission modes of the device cache file to
0600, and the owner to the real UID of the process that executes
lsof; the group, the real group ID (GID) of the lsof process.

Setting the permission modes to 0600 means that a system-wide device
cache file won't be usable unless the procedure that builds it
changes the modes after lsof has written it.  A suitable procedure
for building a system-wide device cache that shows how to adjust
these inadequate permission modes is given in the Default System-wide
Path section.


B.1. Integrity Checks
=====================

When lsof opens the device cache file it makes these integrity
checks:

    1.  Lsof must gain permission from access(2) to be able to
	open the file for reading.  If lsof is writing the file,
	it usually cedes permission control to the applicable
	directory and file modes and ownerships.  (Some additional
	checks apply and they're described in the sections on path
	options.)

	By explicit design lsof never writes to the system-wide
	device cache file, even when the real UID of its process
	is root.  The system-wide device cache file must be written
	with a root-owned procedure via the ``-D[b|u<path>'' options
	-- i.e., under the system administrator's control.  (See
	the Build Procedure sub-section of the Default System-wide
	Path section.)

    2.  The device cache file's modes must be 0600 (0644 if lsof
	is reading a system-wide device cache file) and its size
	must be non-zero.

    3.  There must be a correctly formatted section count line
	at the beginning of the file.

    4.  Each section must have a header line with a count that
	properly numbers the lines in the section.  The first words
	of legal section titles are "device", "block", "clone",
	"pseudo", and "CRC".

    5.  The lines of a section must have the proper format.

    6.  All lines are included in a 16 bit CRC, and it is recorded
	in a non-checksummed section line at the end of the file.

    7.  The checksum computed when the file is read must match the
	checksum recorded when the file was written.

    8.  The checksum section line must be followed by end-of-
	information.

    9.  Lsof must be able to get matching results from stat(2)
	on a randomly chosen entry of the device section.


B.2. The Setgid and Setuid-root States
======================================

There are two fundamental ways in which lsof is granted access to
restricted system resources.  Both access methods are related to the
effective permissions given the lsof binary or executable.

The first and preferable way to grant lsof access to system resources
through the permissions endowed on its executable is the giving of
set group ID (setgid) permission.  The group is the one that has
permission to read the kernel memory and swap devices -- e.g., /dev/kmem,
/dev/mem, /dev/swap, etc.

This method of granting access is called setgid mode because it
enables lsof to run with an effective group ID set to the one
granted by the permissions of its executable file and by the group
that owns the executable file.  See the getegid(2) man page for a
further discussion of effective group ID.

Usually lsof only needs setgid permission to open access to the
kernel memory files.  After they're open, lsof drops its setgid
permission.

The second and least preferable way to grant lsof access to system
resources through the permissions endowed on its executable is the
giving of set user ID to root (setuid-root) permission.  This is
much too strong a permission, but necessary: to use the -X option
fully for the version of lsof for AIX 5 and above; to use the
version of lsof for HP-UX 11.11 and above; and to use the version
of lsof for Linux 2.1.72 and above.  These lsof implementations
require setuid-root permission to be able to access restricted
resources -- e.g., the individual files of the /proc file system.
(But note that the setuid-root Linux lsof doesn't need and has no
device cache support.)

Lsof never drops setuid-root permission, because it needs that
power throughout its execution.  However, when the lsof process is
setuid-root, lsof disallows these device cache file path options:

    1.  It ignores the ``-D[b|r|u]<path>'' options.  It accepts
        only the ``-Di'' and ``-Dr'' options.

    2.	It refuses to recognize a path supplied via an environment
	variable.

    3.  It refuses to accept an additional path component from an
	environment variable to be inserted in the middle of a
	personal device cache file path.

Each restriction is imposed because setuid-root power might allow
a malicious user to form a device cache file path that would give
read access to a normally inaccessible place (That's bad enough.),
or write access to a critical system file (That's the worst case.)

There is one further state that lsof can enter that is slightly
different from the setuid-root and setgid states.  That state occurs
when lsof is being run from a root shell -- i.e., the lsof real
user ID is root.  To avoid accidental complications, when lsof is
in this state, it ignores all environment variable options.

In the rest of this document you will find more detailed discussion
of the special restrictions caused by the type of permission that
has been given the lsof executable.


C. Device Cache File Path Options
=================================

Lsof offers five options for constructing the path to the device
cache file.  Each has special conditions and safeguards that
surround its use.  The options are:

    1.	A device cache file that is named in the <path> component
	of the parameters of lsof's ``-D'' option.

	=========================================================
	* This is a default option of the lsof distribution.	*
	*							*
	* Paths specified with this option are read-only unless	*
	* the real UID of the lsof process is root (0), or the	*
	* lsof process is able to surrender setgid permission	*
	* (See Appendix B) and it is not setuid-root.		*
	=========================================================

    2.	A device cache file whose name is specified by an environment
	variable.

	=========================================================
	* This is a default option of the lsof distribution.	*
	*							*
	* This option is enabled when the lsof dialect is able	*
	* to surrender setgid permission (See Appendix B.), and	* 
	* the lsof process is not setuid-root.			*
	*							*
	* The environment variable path is read-only if the	*
	* lsof process does not surrender setgid permission	*
	* (See Appendix B.)					*
	=========================================================

    3.	A system-wide default device cache file, located at a path
	determined by the builder of lsof.  The lsof builder is also
	responsible for building the device cache file, using a
	different lsof path formation option at a suitable time --
	e.g., when the system is booted.

	=========================================================
	* This is option is disabled by default in the lsof	*
	* distribution.						*
	*							*
	* The path specified with this option is read-only.	*
	=========================================================

    4.	A default personal device cache file, located in the UID's
	home directory.

	=========================================================
	* This is a default option of the lsof distribution.	*
	=========================================================

    5.	A personal device cache file whose name is modified by an
	environment variable.

	=========================================================
	* This is a default option of the lsof distribution.	*
	*							*
	* The modified personal path is read-only if the lsof	*
	* process does not surrender setgid permission.		*
	*							*
	* This option is disabled when the lsof process is	*
	* setuid-root or its real UID is root (0).	   	*
	=========================================================

When there are multiple choices for the device cache file path,
lsof chooses from the above list in the order the list is given,
subject to restrictions based on the effective group and user IDs
that are in effect.

Each possible path name is discussed in a later section that
describes the restrictions that apply to it and the method for
building lsof to use it.

In one special case lsof will use two paths in order.  When a
system-wide device cache file is enabled, and lsof finds that it
doesn't exist, lsof will attempt to use a personal device cache
file.


C.1. Path Named by ``-D''
=========================

The ``-D[b|r|u]<path>'' option can name a path for the device cache
file where it is unconditionally built (`b'); read, but never
rebuilt (`r'); and read and rebuilt, if necessary (`u').

If the lsof process is setuid-root, no path may be specified with
the ``-D'' option -- i.e., only the `i' function is accepted.  The
`r' option may be used if it doesn't have a path argument.

If the lsof process is not setuid-root, nor is the real UID of the
lsof process root, a path may accompany the `b', `r', and `u'
functions if the lsof process surrenders setgid permission.  (See
Appendix B.)  If the process doesn't surrender setgid permission,
then a path may accompany only `r'.

Lsof's permission to access a device cache file at a path specified
with ``-D[b|r|u]<path>'' depends completely on the permission modes
and ownerships of the file and its directory components.

When the real UID of the lsof process is root (0), paths may be
specified with ``-D[b|r|u]''.

====================================================================
*								   *
* The ``-D[b|r|u]<path>'' option is enabled by default in the lsof *
* distribution by the following definition in the dialect's	   *
* machine.h header file:					   *
*								   *
*	#define HASDCACHE 1					   *
*								   *
* To disable all device cache file options, including all ``-D''   *
* forms, change the above line in the dialect's machine.h file to: *
*								   *
*	/* #define HASDCACHE 1 */				   *
*								   *
* or remove it.							   *
*								   *
* The ``-D[b|r|u]<path>'' options are disabled when the lsof	   *
* process is setuid-root.  If the lsof process isn't setuid-root,  *
* nor is its real UID root (0), and if the lsof process surrenders *
* setgid permission, ``-D[b|r|u]'' may be accompanied by a path.   *
*								   *
* A path may accompany ``-D[b|u]'' when the real UID of the lsof   *
* process is root.						   *
*								   *
* ``-Dr'' without a path name argument is always acceptable.	   *
*								   *
====================================================================


C.2. Path Named in Environment Variable
=======================================

A device cache file path may be declared in an environment variable.
This option is defined in the dialect's machine.h header file with
the HASENVDC definition.  The value of the HASENVDC definition is
the environment variable's name.

Lsof will use the value of the environment variable named by HASENVDC
for the device cache file path unless either of the following
conditions apply:

    1.	The lsof process is in the setuid-root state.
or
    2.	The effective and real UIDs of the lsof process are root
	(0).

Lsof uses the value of the HASENVDC environment variable as the
device cache file path after it senses there is no path declared by
a ``-D'' option.

A path from an environment variable is read-only unless the lsof
process surrenders setgid permission.  (See Appendix B.)

====================================================================
*								   *
* The path name environment variable option is enabled by default, *
* and the environment variable is named LSOFDEVCACHE in the lsof   *
* distribution by the following definition in the dialect's	   *
* machine.h header file:					   *
*								   *
*	#define HASENVDC "LSOFDEVCACHE"				   *
*								   *
* To disable the path name environment variable option, change	   *
* the above line in the dialect's machine.h header file to:	   *
*								   *
*	/* #define HASENVDC "LSOFDEVCACHE" */			   *
*								   *
* or remove it.  To change the name of the environment variable,   *
* change the quoted value of the HASENVDC definition -- e.g., this *
* form changes the environment variable name to "FOOBAR":	   *
*								   *
*	#define HASENVDC "FOOBAR"				   *
*								   *
* You can disable the path name environment option by disabling	   *
* all device cache file processing when you remove or by disabling *
* the HASDCACHE definition in the dialect's machine.h header file. *
*								   *
* The path name environment option is disabled when the lsof	   *
* process is setuid-root or when the real UID of the lsof process  *
* is root (0).							   *
*								   *
* The path named in an environment variable is read-only unless    *
* the lsof process surrenders setgid permission.  (See Appendix    *
* B.)								   *
*								   *
====================================================================


C.3. Default System-wide Path
=============================

When a default system-wide device cache file path is defined (It's
not enabled by default in the lsof distribution.), lsof will use
it after it discovers no path has been specified by a ``-D'' option
and no path has been specified in the environment variable named
in the string #define HASENVDC of the dialect's machine.h header
file.

Lsof must be able to open the system-wide device cache file --
i.e., it must have read access to the file and search access to
the directories that lead it.  As part of its integrity checks,
lsof requires that the system-wide device cache file's permission
modes be 0644.

When lsof discovers that the named system-wide device cache file
doesn't exist, it will attempt to open a personal device cache file
should that path formation option be enabled.  This is the *only*
case where lsof will attempt to use two device cache file paths.

The system-wide device cache file is read-only; lsof will never
attempt to write to it.  However, when the real UID of the lsof
process is root, that process may name the system-wide device
cache file with ``-D[b|u]<path>''.

====================================================================
*								   *
* The system-wide file path option is disabled by default in the   *
* lsof distribution.  This place-marking definition in a dialect's *
* machine.h header file may be altered to enable a system-wide	   *
* device cache file path:					   *
*								   *
*	/* #define HASSYSDC "/your/choice/of/path" */		   *
*								   *
* To enable the system-wide name option, declaring that its path   *
* is ``/foo/bar/lsof.dc'', change the above line in the dialect's   *
* machine.h header file to:					   *
*								   *
*	#define HASSYSDC "/foo/bar/lsof.dc"			   *
*								   *
* or change the quoted string of the definition to the path of	   *
* your choice.							   *
*								   *
* You can disable the path name environment option by disabling	   *
* all device cache file processing when you remove or disable the  *
* HASDCACHE definition in the dialect's machine.h header file.	   *
*								   *
* The system-wide device cache file is read-only.		   *
*								   *
====================================================================


C.3.a. Build Procedure
======================

The system administrator must build the system-wide device cache
file at an appropriate time -- e.g., each time the system is booted,
and each time a node is added, deleted or modified in /dev (or
/devices).  The procedure that builds the system-wide device cache
file must use lsof's ``-D[b|u]<path>'' options to build the file,
and must change the file's permission modes to 0644 after it has
been built.

Here's a simple shell script procedure to build a system-wide device
cache file.  It assumes:

    1.  The Unix dialect's kernel supports the interpreter script
	execution option -- i.e., a script whose first line has
	the form ``#!<path_to_interpreter>''.
    
    2.	The chmod, echo, rm, sh, and test programs are located
	in ``/bin''. 

    3.	The string value of the HASSYSDC definition in the dialect's
	machine.h header file is the path ``/your/choice/of/path''.

    4.	The lsof executable is located in ``/usr/local/etc''.

	#!/bin/sh
	#
	# Simple script to build a system-wide device cache file
	# for lsof.

	HASSYSDC=/your/choice/of/path
	/bin/rm -f $HASSYSDC
	/usr/local/etc/lsof -Du$HASSYSDC > /dev/null 2>&1
	if /bin/test $? -ne 0
	then
		/bin/echo "WARNING: failed to create $HASSYSDC"
		exit 1
	fi
	/bin/chmod 0644 $HASSYSDC
	exit 0

The invocation of lsof uses the ``-Du$HASSYSDC'' option to read
the device cache file and recreate it if necessary.  The invocation
can be made more efficient if a known process PID -- e.g., ``-p1''
-- can be specified.  However, if that PID is not always active
when lsof is called, lsof might set its exit code non-zero, causing
the subsequent test to believe that the lsof call failed.  When in
doubt, omit the PID specification and accept the extra lsof processing
time for reporting and discarding all open file information.


C.4. Default Personal Path
==========================

The default personal path option is defined by default in the lsof
distribution.  The path is formed of the home directory of the real
UID of the lsof process, followed optionally by the contents of
the HASPERSDCPATH environment variable, followed by ``.lsof_'',
followed by the first component (characters up to the first period)
of the name returned by gethostname(2).

If gethostname(2) returns nothing, then nothing will follow the
``.lsof_'' string.  If the first character of what gethostname(2)
returns is a `.', then all the gethostname(2) value will follow
the ``/lsof_'' string.  (See the ``%l'' conversion for a way to
make lsof include the entire host name in the path.)

====================================================================
*								   *
* The personal path option is enabled by default in the lsof	   *
* distribution.  The HASPERSDC #define in a dialect's machine.h	   *
* header is a format specification that tells lsof how to form the *
* personal device cache file path.  The conversions in the format  *
* specification begin with `%' , ala the printf(3) function of the *
* standard I/O library.  These conversions are supported:	   *
*								   *
*	``%%''	causes a single `%' to appear in the path.	   *
*								   *
*	``%0''	is a separator that marks the beginning of a path  *
*		for a setuid-root lsof process or one whose real   *
*		UID is 0.  When lsof reaches this conversion and   *
*		the process is setuid-root or has a real UID of    *
*		root, it erases any previously formed path and	   *
*		restarts with the next HASPERSDC format character. *
*		If lsof reaches this conversion and the process is *
*		not setuid-root and its real UID is not root, path *
*		formation is ended.				   *
*								   *
*	``%h''	causes the home directory of the real UID of the   *
*		lsof process to appear in the path.		   *
*								   *
*	``%l''	causes the full name returned by gethostname(2) to *
*		appear in the path.				   *
*								   * 
*	``%L''	causes the first component of the name returned by *
*		gethostname(2) to appear in the path.  The first   *
*		component is defined to be what appears to the	   *
*		left of the first `.'.  If nothing appears to the  *
*		left then everything will appear in the path.	   *
*								   *
*	``%p''	causes the value of (HASPERSDCPATH) from the	   *
*		process environment to appear in the path.  If the *
*		(HASPERSDCPATH) value doesn't end in a '/', one	   *
*		will be added.					   *
*								   *
*	``%u''	causes the login name associated with the real UID *
*		of the lsof process to appear in the path.	   *
*								   *
*	``%U''	causes the real UID of the lsof process, converted *
*		to a decimal string, to appear in the path.	   *
*								   *
*	All other characters are copied from the format to the	   *
*	path.  CAUTION: THINK VERY CAREFULLY ABOUT THE EFFECT OF   *
*	USING CHARACTERS THAT FORM AN ABSOLUTE COMPONENT LIKE	   *
*	``/tmp'' IN THE FORMAT.  Consider what power your dialect  *
*	might have (e.g., if it is setuid-root) when lsof must	   *
*	create a device cache file at the path.  Consider using a  *
*	``%0'' conversion to declare an alternate path for lsof    *
*	processes that are setuid-root or whose real uid is root.  *
*	See the "How do I put the personal device cache file in    *
*	/tmp?" question and answer in 00FAQ for an explanation of  *
*	this example:						   *
*								   *
*	    #define HASPERSDC "/tmp/.lsof_%u_%l_pers%0%h/.lsof_%L" *
*								   *
* This is the format specification that appears in the machine.h   *
* header files of the lsof distribution:			   *
*								   *
*	#define HASPERSDC "%h/%p.lsof_%L"			   *
*								   *
* It causes the path to be formed from the home directory of the   *
* real UID of the lsof process (``%h''), followed by `/', followed *
* by the contents of the environment variable named by		   *
* HASPERSDCPATH and a trailing `/', as needed (``%p''), followed   *
* by the string ``.lsof_'', and terminated with the first	   *
* component of the host's name (``%L'').			   *
*								   *
* To change the personal path option, change the HASPERSDC string  *
* and recompile lsof.  To disable the personal path option, remove *
* or disable HASPERSDC.  The personal path option is disabled when *
* HASDCACHE is not defined.					   *
*								   *
====================================================================


C.5. Modified Default Personal Path
===================================

The modified default personal path form is a special case of the
default personal path.  In this form the value of the environment
variable named by the HASPERSDCPATH #define is inserted in the
personal path when the ``%p'' conversion appears in the HASPERSDC
format specification.

This allows, for example, the lsof user to move personal device
cache files to another branch of the home directory, perhaps to a
sub-directory where multiple device cache files may appear from
different machines that use the same NFS- mounted home directory.

The HASPERSDCPATH definition of the dialect's machine.h header file
names the environment variable.  By default in the lsof distribution
it is LSOFPERSDCPATH.

The modified personal path component is ignored when lsof process
is setuid-root is root, lest it be maliciously or accidentally used in
some convoluted form to access paths the real UID cannot.  The
modified personal path component is also ignored when the real UID
of the lsof process is root (0), so that lsof will not accidentally
use a personal environment value.

If the lsof process surrenders setgid permission (See Appendix B.),
lsof can read from and write to the modified personal path.  If,
however, the lsof process doesn't surrender setgid permission, the
modified personal path is read-only.

If your dialect runs setuid-root or doesn't surrender its setgid
permission, and you want to use the LSOFPERSDCPATH environment
variable to address a collection of device cache files in a
subdirectory, you will have to gather the collection in the
subdirectory yourself with shell copy or move commands.

====================================================================
*								   *
* The modified personal path option is enabled by default in the   *
* lsof distribution with these definitions in the dialect's	   *
* machine.h header file:					   *
*								   *
*	#define HASPERSDCPATH "LSOFPERSDCPATH"			   *
* and								   *
*	#define HASPERSDC "%h/%p.lsof_%L"			   *
*								   *
* The value of the definition is the name of the environment	   *
* variable that contains the modified personal path name	   *
* component that is inserted in the personal path when ``%p''      *
* appears in HASPERSDC.  See the Default Personal Path section	   *
* for a complete description of the ``%p'' conversion.		   *
*								   *
* To disable the modified personal path name component, disable	   *
* the HASPERSDCPATH definition in the dialect's machine.h header   *
* file -- e.g., change it to:					   *
*								   *
*	/* #define HASPERSDCPATH "LSOFPERSDCPATH" */		   *
*								   *
* or remove the definition altogether.  If you do this, don't	   *
* forget to remove any ``%p'' conversion from HASPERSDC.	   *
*								   *
* The modified personal path option is disabled when HASDCACHE is  *
* not defined.							   *
*								   *
* The modified personal path environment variable value is ignored *
* when the lsof process is setuid-root or when the real UID of	   *
* the lsof process is root (0).					   *
*								   *
* The modified personal path is read-only when the lsof process	   *
* doesn't surrender its setgid permission.			   *
*								   *
====================================================================


D. Displaying the Default Path
==============================

Whatever device cache file path formation options you decide to
use, remember that the lsof help output, displayed in response to
its ``-h'' or ``-?'' help options, will display the read-mode
default (the highest numbered) path that lsof has been enabled to
form from which it will read.

Since some paths are read-only, the path displayed in help option
output may not be the one to which lsof will write, should that
become necessary.  To see the read-only and write device cache file
paths, environment variable names, and the personal device cache
file format specification (HASPERSDC), use the -D? option.


Appendix A, Unix Dialects Without a Device Cache
================================================

Linux lsof implementations that obtain their information from files
in the /proc file system do not have device cache support.  Generally
lsof for Linux versions 2.1.72 and greater are /proc based.


Appendix B, Lsof Dialects and Their Permissions
===============================================

These are the permissions recommended in the lsof distribution.


Appendix B.1 Setuid-root Lsof Dialects 
======================================

These dialect versions of lsof need root permission.  For general
use they may have to be installed setuid-root.

    Apple Darwin 9 and Mac OS X 10.[567]
    HP-UX 11.11 and 11.23
    Linux (no device cache support needed)


Appendix B.2 Setgid Lsof Dialects That Surrender Setgid Permission
==================================================================

Lsof versions for these dialects have WILLDROPGID defined in their
machine.h header files.

    AIX 5.[12] and 5.3-ML1
    FreeBSD 4.x, 4.1x, 5.x and [6789].x for x86-based systems
    FreeBSD 5.x, [6789].x and 1[012].x for Alpha, AMD64 and Sparc64
	based systems
    HP-UX 11.00
    NetBSD 1.[456], 2.x and 3.x for Alpha, x86, and SPARC-based
	systems
    NEXTSTEP 3.[13]
    OpenBSD 2.[89] and 3.[0-9] for x86-based systems
    OPENSTEP 4.x
    SCO OpenServer Release 5.0.4 for x86-based systems
    SCO|Caldera UnixWare 7.1.4 for x86-based systems
    Solaris 2.6, 8, 9 and 10
    Tru64 UNIX 5.1


Vic Abell <abe@@purdue.edu>
February 14, 2018
@


1.92
log
@Revision 4.88
@
text
@d730 1
a730 1
    FreeBSD 5.x, [6789].x and 10 for Alpha, AMD64 and Sparc64-a
d745 1
a745 1
October 13, 2014
@


1.91
log
@Revision 4.86
@
text
@d730 1
a730 1
    FreeBSD 5.x, [6789].x fnd 10.xor Alpha, AMD64 and Sparc64-a
d745 1
a745 1
April 10, 2012
@


1.90
log
@Revision 4.85 (final)
@
text
@d717 1
a717 1
    Apple Darwin 9 and Mac OS X 10.[56]
d730 2
a731 2
    FreeBSD 5.x and [6789].x for Alpha, AMD64 and Sparc64-based
	systems
d745 1
a745 1
September 27, 2011
@


1.89
log
@Revision 4.83
@
text
@d717 1
a717 1
    Apple Darwin 9 (Mac OS X 10.5)
d745 1
a745 1
January 18, 2010
@


1.88
log
@Revision 4.82
@
text
@d729 2
a730 2
    FreeBSD 4.x, 4.1x, 5.x and [67].x for x86-based systems
    FreeBSD 5.x and [67].x for Alpha, AMD64 and Sparc64-based
d745 1
a745 1
March 25, 2009
@


1.87
log
@Revision 4.78
@
text
@d717 1
a717 1
    Apple Darwin 8.x for Power Macintosh systems
a728 1
    Apple Darwin 7.x for Power Macintosh systems
d745 1
a745 1
April 24, 2007
@


1.86
log
@Revision 4.77
@
text
@d728 1
a728 1
    AIX 5.[123]
d746 1
a746 1
April 10, 2006
@


1.85
log
@Revision 4.77
@
text
@d737 1
a737 1
    OpenBSD 2.[89] and 3.[01234567] for x86-based systems
d746 1
a746 1
March 27, 2006
@


1.84
log
@Revision 4.76
@
text
@a729 1
    BSDI BSD/OS 4.3.1 for x86-based systems
d746 1
a746 1
August 29, 2005
@


1.83
log
@Revision 4.75
@
text
@d717 1
d729 1
a729 1
    Apple Darwin 7.7.0 for Power Macintosh systems
d731 3
a733 2
    FreeBSD 4.[2-9], 4.1[01], 5.[012] and 6.0 for x86-based systems
    FreeBSD 5.[01234] and 6.0 for Alpha, AMD64 and Sparc64 based systems
d735 2
a736 1
    NetBSD 1.[456] and 2.x for Alpha, x86, and SPARC-based systems
d747 1
a747 1
May 11, 2005
@


1.82
log
@Revision 4.75
@
text
@d717 1
a717 1
    HP-UX 11.11 and 11iv2
d728 1
a728 1
    Apple Darwin 6.x and 7.x for Power Macintosh systems
d735 1
a735 1
    OpenBSD 2.[89] and 3.[0123456] for x86-based systems
a736 1
    Caldera OpenUNIX 8
@


1.81
log
@Revision 4.74
@
text
@d717 1
a717 1
    HP-UX 11.11
a729 1
    DEC OSF/1, Digital UNIX, Tru64 UNIX 4.0, and 5.1
d731 1
a731 1
    FreeBSD 5.[012] and 6.0 for Alpha, AMD64 and Sparc64 based systems
d741 1
d745 1
a745 1
January 17, 2005
@


1.80
log
@Revision 4.74
@
text
@d731 1
a731 1
    FreeBSD 4.[2-9], 4.10, 5.[012] and 6.0 for x86-based systems
d745 1
a745 1
December 30, 2004
@


1.79
log
@Revision 4.73
@
text
@d734 1
a734 1
    NetBSD 1.[456] and 2.0 for Alpha, x86, and SPARC-based systems
d745 1
a745 1
October 17, 2004
@


1.78
log
@Revision 4.72
@
text
@d727 1
a727 1
    AIX 4.3.2, 5L, and 5.[12]
d730 3
a732 3
    DEC OSF/1, Digital UNIX, Tru64 UNIX 4.0, and 5.[01]
    FreeBSD 4.[2-9], 4.10 and 5.[012] for x86-based systems
    FreeBSD 5.[012] for Alpha, AMD64 and Sparc64 based systems
d736 1
a736 1
    OpenBSD 2.[89] and 3.[012345] for x86-based systems
d739 2
a740 2
    SCO OpenServer Release 5.0.[46] for x86-based systems
    SCO|Caldera UnixWare 7.1.[134] for x86-based systems
d745 1
a745 1
July 6, 2004
@


1.77
log
@Revision 4.71
@
text
@d731 1
a731 1
    FreeBSD 4.[23456789] and 5.[012] for x86-based systems
d734 1
a734 1
    NetBSD 1.[456] for Alpha, x86, and SPARC-based systems
d736 1
a736 1
    OpenBSD 2.[89] and 3.[01234] for x86-based systems
d745 1
a745 1
March 10, 2004
@


1.76
log
@Revision 4.70
@
text
@d717 2
a718 3
    AIX 5L and 5.[12] for full use of the -X option on ia64 systems
    pstat-based HP-UX
    /proc-based Linux (no device cache file support needed or used)
d727 1
a727 1
    AIX 4.3.2
d733 1
a733 1
    HP-UX 11.00 and 11.11
d740 1
a740 1
    SCO|Caldera UnixWare 7.1.[13] for x86-based systems
d745 1
a745 1
January 14, 2004
@


1.75
log
@Revision 4.70
@
text
@d733 1
a733 1
    FreeBSD 5.[012] for Alpha and Sparc64 based systems
@


1.74
log
@Revision 4.69
@
text
@d732 2
a733 2
    FreeBSD 4.[23456789] and 5.[01] for x86-based systems
    FreeBSD 5.[01] for Alpha and Sparc64 based systems
d737 1
a737 1
    OpenBSD 2.[89] and 3.[0123] for x86-based systems
d746 1
a746 1
October 15, 2003
@


1.73
log
@Revision 4.68
@
text
@d728 2
a729 2
    AIX 4.3.[23]
    Apple Darwin 1.[2-5], 5.x and 6.x for Power Macintosh systems
d732 1
a732 1
    FreeBSD 4.[2345678] and 5.[01] for x86-based systems
d742 1
a742 1
    Solaris 2.6, 7, 8, and 9
d746 1
a746 1
June 11, 2003
@


1.72
log
@Revision 4.67
Document BSDI BSD/OS 4.3.1.
@
text
@d732 2
a733 2
    FreeBSD 4.[2345678] and 5.0 for x86-based systems
    FreeBSD 5.0 for Alpha and Sparc64 based systems
d737 1
a737 1
    OpenBSD 2.[89] and 3.[012] for x86-based systems
d746 1
a746 1
March 22, 2003
@


1.71
log
@Revision 4.67
Add AIX 5.2 and FreeBSD 4.8.
@
text
@d730 1
a730 1
    BSDI BSD/OS 4.[13] for x86-based systems
d746 1
a746 1
March 5, 2003
@


1.70
log
@Revision 4.66
@
text
@d717 1
a717 1
    AIX 5L and 5.1 for full use of the -X option on ia64 systems
d732 1
a732 1
    FreeBSD 4.[234567] and 5.0 for x86-based systems
d746 1
a746 1
December 5, 2002
@


1.69
log
@Revision 4.66
@
text
@d52 1
a52 1
file to any place has a security weakness.  A clever intruder who
d55 4
a58 1
files.
d64 3
a66 2
device cache file, but the result was that each lsof user had a
private copy of the device cache file.
@


1.68
log
@Revision 4.65
@
text
@d726 1
a726 1
    BSDI BSD/OS 4.[13] for Intel-based systems
d728 2
a729 1
    FreeBSD 4.[234567] and 5.0 for Intel-based systems
d731 1
a731 1
    NetBSD 1.[456] for Alpha, Intel, and SPARC-based systems
d733 1
a733 1
    OpenBSD 2.[89] and 3.[01] for Intel-based systems
d736 2
a737 2
    SCO OpenServer Release 5.0.[46] for Intel-based systems
    SCO|Caldera UnixWare 7.1.[13] for Intel-based systems
d742 1
a742 1
October 8, 2002
@


1.67
log
@Revision 4.64
@
text
@d725 2
a726 2
    Apple Darwin 1.[23] and 1.4 for Power Macintosh systems
    BSDI BSD/OS 4.1 for Intel-based systems
d728 1
a728 1
    FreeBSD 4.[23456] and 5.0 for Intel-based systems
d734 1
a734 1
    Caldera OpenUNIX 8 and 8.0.1
d736 1
a736 1
    SCO UnixWare 7.1.1 for Intel-based systems
d741 1
a741 1
June 16, 2002
@


1.66
log
@Revision 4.61
@
text
@d728 1
a728 1
    FreeBSD 4.[2345] and 5.0 for Intel-based systems
d730 1
a730 1
    NetBSD 1.5 for Alpha, Intel, and SPARC-based systems
d732 1
a732 1
    OpenBSD 2.[89] and 3.0 for Intel-based systems
d734 1
a734 1
    Caldera OpenUNIX 8
d737 1
a737 1
    Solaris 2.6, 7, 8, and 9 BETA-Refresh
d741 1
a741 1
January 18, 2001
@


1.65
log
@Revision 4.61
@
text
@d737 1
a737 1
    Solaris 2.6, 7, 8, and 9 BETA
d741 1
a741 1
January 14, 2001
@


1.64
log
@Revision 4.60
@
text
@d728 1
a728 1
    FreeBSD 4.[234] and 5.0 for Intel-based systems
d741 1
a741 1
November 1, 2001
@


1.63
log
@Revision 4.59
@
text
@d577 3
a579 2
*	See section 19.2.3 of 00FAQ for an explanation of this	   *
*	example:						   *
d581 1
a581 1
*		#define HASPERSDC "/tmp/.lsof_%U%0%h/.lsof_%U"	   *
d732 1
a732 1
    OpenBSD 2.[89] for Intel-based systems
d741 1
a741 2
Purdue University Computing Center
October 15, 2001
@


1.62
log
@Revision 4.58
@
text
@d724 1
a724 1
    Apple Darwin 1.[23] for Power Macintosh systems
d733 1
a735 1
    Sequent PTX 4.4.[46], 4.5[.1], and 4.6[.1]
d741 1
a741 1
September 4, 2001
@


1.61
log
@Revision 4.57
@
text
@d727 1
a727 1
    FreeBSD 4.[23] and 5.0 for Intel-based systems
d732 2
a733 2
    OpenStep 4.x
    SCO OpenServer Release 5.0.[45] for Intel-based systems
d741 1
a741 1
July 18, 2001
@


1.60
log
@Revision 4.57
@
text
@d172 8
a179 8
much too strong a permission, but necessary to use the -X option
fully for the version of lsof for AIX 5L, to use the version of
lsof for HP-UX 11.11 and above, and to use the version of lsof for
Linux 2.1.72 and above.  These lsof implementations require
setuid-root permission to be able to access restricted resources
-- e.g., the individual files of the /proc file system.  (But note
that the setuid-root Linux lsof doesn't need and has no device
cache support.)
d712 1
a712 1
    AIX 5L and above for full use of the -X option
d741 1
a741 1
June 19, 2001
@


1.59
log
@Revision 4.56
@
text
@d731 1
a731 1
    OpenBSD 2.8 for Intel-based systems
d735 1
a735 1
    Sequent PTX 4.4.[46] and 4.5[.1]
d741 1
a741 1
May 3, 2001
@


1.58
log
@Revision 4.56
Deprecate HP-UX 10.20
@
text
@d723 1
a723 1
    AIX 4.1.[45], 4.2[.1], and 4.3[.123]
d725 5
a729 7
    BSDI BSD/OS 2.1, 3.[01], and 4.[01] for Intel-based systems
    DEC OSF/1, Digital UNIX, Tru64 UNIX 2.0, 3.2, 4.0, and 5.[01]
    FreeBSD 2.1.6, 2.2[.x], 3.[012345], 4.[0123], and 5.0 for
	Intel-based systems
    HP-UX 11.00, and 11.11
    /dev/kmem-based Linux
    NetBSD 1.[2345] for Alpha, Intel, and SPARC-based systems
d731 1
a731 1
    OpenBSD 2.[012345678] for Intel-based systems
d733 4
a736 5
    SCO OpenServer Release 5.0.5 for Intel-based systems
    SCO UnixWare 7.0 and 7.1.[01] for Intel-based systems
    Sequent PTX 2.1.9, 4.2.[13], 4.[34], 4.4.[1246], and 4.5[.1]
    Solaris 2.6, 7, 8 BETA, and 8 BETA-Refresh
    Ultrix 4.2
d741 1
a741 1
May 1, 2001
@


1.57
log
@Revision 4.56
@
text
@d729 1
a729 1
    HP-UX 10.20, 11.00, and 11.11
@


1.56
log
@Revision 4.56
@
text
@d727 1
a727 1
    FreeBSD 2.1.6, 2.2[.x], 3.[012345], 4.[012], and 5.0 for
d744 1
a744 1
March 19, 2001
@


1.55
log
@Revision 4.55
@
text
@d724 1
a724 1
    Apple Darwin 1.2 for Power Macintosh systems
d736 1
a736 1
    SCO UnixWare 7.0 and 7.1.0 for Intel-based systems
d744 1
a744 1
February 14, 2001
@


1.54
log
@Revision 4.54
@
text
@d729 1
a729 1
    HP-UX 9.01, 10.20, 11.00, and 11.11
d736 1
a736 1
    SCO UnixWare 7.1.0 for Intel-based systems
d744 1
a744 1
January 2, 2001
@


1.53
log
@Revision 4.53
@
text
@d738 1
a738 1
    Solaris 2.5.1, 2.6, 7, 8 BETA, and 8 BETA-Refresh
d744 1
a744 1
December 6, 2000
@


1.52
log
@Revision 4.52
@
text
@d724 1
d735 2
a736 2
    SCO OpenServer Release 3.0 and 5.0.[02456] for Intel-based systems
    SCO UnixWare 2.1.[123] and 7[[.0].1] for Intel-based systems
a738 1
    SunOS 4.1.x
d744 1
a744 1
November 5, 2000
@


1.51
log
@Revision 4.52
@
text
@d726 1
a726 1
    FreeBSD 2.1.6, 2.2[.x], 3.[012345], 4.[01], and 5.0 for
@


1.50
log
@Revision 4.51
@
text
@d172 8
a179 6
much too strong a permission, but necessary for the version of lsof
for Pyramid DC/OSx, generally Linux 2.1.72 and above, and Pyramid
Reliant UNIX.  These lsof implementations require setuid-root
permission to be able to access the individual files of the /proc
file system.  (But note that the setuid-root Linux lsof doesn't
need and has no device cache support.)
d712 1
a712 1
    DC/OSx 1.1 for Pyramid systems
a714 1
    Reliant UNIX 5.4[34] for Pyramid systems
d728 1
a728 1
    HP-UX 9.01, 10.20, and 11.00
d732 1
a732 1
    OpenBSD 2.[01234567] for Intel-based systems
d744 1
a744 1
August 8, 2000
@


1.49
log
@Revision 4.50
@
text
@d724 3
a726 3
    DEC OSF/1, Digital UNIX, Tru64 UNIX 2.0, 3.2, 4.0, and 5.0
    FreeBSD 2.1.6, 2.2[.x], 3.[012345], 4.0, and 5.0 for Intel-based
	systems
d733 1
a733 1
    SCO OpenServer Release 3.0 and 5.0.[0245] for Intel-based systems
d743 1
a743 1
June 29, 2000
@


1.48
log
@Revision 4.50
@
text
@d725 2
a726 1
    FreeBSD 2.1.6, 2.2[.x], 3.[01234], 4.0, and 5.0 for Intel-based systems
d743 1
a743 1
June 28, 2000
@


1.47
log
@Revision 4.50
@
text
@d734 1
a734 1
    Sequent PTX 2.1.9, 4.2.[13], 4.[34], 4.4.[124], and 4.5[.1]
d742 1
a742 1
June 27, 2000
@


1.46
log
@Revision 4.50
@
text
@d728 1
a728 1
    NetBSD 1.[234] for Alpha, Intel, and SPARC-based systems
d742 1
a742 1
June 25, 2000
@


1.45
log
@Revision 4.50
@
text
@d734 1
a734 1
    Sequent PTX 2.1.9, 4.2.[13], 4.[34], and 4.4.[124]
d742 1
a742 1
May 31, 2000
@


1.44
log
@Post revision 4.49
@
text
@d707 1
a707 1
This dialect versions of lsof need root permission.  For general
d711 1
d730 1
a730 1
    OpenBSD 2.[0123456] for Intel-based systems
d742 1
a742 1
April 3, 2000
@


1.43
log
@Revision 4.49
@
text
@d727 1
a727 1
    NetBSD 1.[234] for Intel and SPARC-based systems
d741 1
a741 1
March 23, 2000
@


1.42
log
@Revision 4.48
@
text
@d724 1
a724 1
    FreeBSD 2.1.6, 2.2[.x], 3.[01234], and 4.0 for Intel-based systems
d741 1
a741 1
January 14, 2000
@


1.41
log
@Revision 4.47
@
text
@d724 1
a724 1
    FreeBSD 2.1.6, 2.2[.x], 3.[012], and 4.0 for Intel-based systems
d741 1
a741 1
November 28, 1999
@


1.40
log
@Revision 4.46
@
text
@d734 1
a734 1
    Solaris 2.5.1, 2.6, 7, and 8 BETA
d741 1
a741 1
October 23, 1999
@


1.39
log
@Revision 4.45
@
text
@d721 2
a722 2
    AIX 4.1.[45], 4.2[.1], and 4.3[.12]
    BSDI BSD/OS 2.1 and 3.[01] for Intel-based systems
d729 1
a729 1
    OpenBSD 2.[012345] for Intel-based systems
d734 1
a734 1
    Solaris 2.5.1, 2.6, and 7
d741 1
a741 1
July 28, 1999
@


1.38
log
@Revision 4.44
@
text
@d435 1
a435 1
*	/* #define HASSYSDC "/var/adm/lsof.dc" */		   *
d438 1
a438 1
* is ``var/adm/lsof.dc'', change the above line in the dialect's   *
d441 1
a441 1
*	#define HASSYSDC "/var/adm/lsof.dc"			   *
d477 1
a477 1
	machine.h header file is the path ``/var/adm/lsof.dc''.
d486 1
a486 1
	HASSYSDC=/var/adm/lsof.dc
d490 1
a490 1
	else
d741 1
a741 1
June 22, 1999
@


1.37
log
@Revision 4.43
@
text
@d732 1
a732 1
    SCO UnixWare 2.1.[123] and 7[.0.1] for Intel-based systems
d741 1
a741 1
May 10, 1999
@


1.36
log
@Revision 4.43
@
text
@d724 1
a724 1
    FreeBSD 2.1.6, 2.2[.x], 3.[01], and 4.0 for Intel-based systems
d741 1
a741 1
May 9, 1999
@


1.35
log
@Revision 4.43
@
text
@d727 1
a727 1
    NetBSD 1.[23] for Intel and SPARC-based systems
d741 1
a741 1
April 15, 1999
@


1.34
log
@Revision 4.42
@
text
@d711 1
a711 1
    /proc-based Linux (generally Linux 2.1.72 and above)
d723 1
a723 1
    Digital UNIX (DEC OSF/1) 2.0, 3.2, 4.0, and 5.0-Beta
d726 1
a726 1
    Linux 2.0.3[2346] for Intel-based systems
d741 1
a741 1
March 29, 1999
@


1.33
log
@Revision 4.41
@
text
@d729 1
a729 1
    OpenBSD 2.[01234] for Intel-based systems
d741 1
a741 1
February 25, 1999
@


1.32
log
@Revision 4.40
@
text
@d724 1
a724 1
    FreeBSD 2.1.6, 2.2 and 3.0 for Intel-based systems
d741 1
a741 1
Junuary 25, 1999
@


1.31
log
@Revision 4.39
@
text
@d733 1
a733 1
    Sequent PTX 2.1.9, 4.2.[13], 4.[34], and 4.4.[12]
d741 1
a741 1
December 28, 1998
@


1.30
log
@Revision 4.38
@
text
@d721 1
a721 1
    AIX 4.1.[45], 4.2[.1], and 4.3[.1]
d741 1
a741 1
November 25, 1998
@


1.29
log
@Revision 4.38
@
text
@d726 1
a726 1
    Linux 2.0.3[234] for Intel-based systems
d731 1
a731 1
    SCO OpenServer Release 3.0 and 5.0.x for Intel-based systems
d741 1
a741 1
November 23, 1998
@


1.28
log
@Revision 4.37
Document UW 7.0.1 support.
@
text
@d723 1
a723 1
    Digital UNIX (DEC OSF/1) 2.0, 3.2, and 4.0
d728 3
a730 2
    NEXTSTEP 3.1
    OpenBSD 2.[0123] for Intel-based systems
d732 1
a732 1
    SCO UnixWare 2.1.[12] and 7[.0.1] for Intel-based systems
d734 1
a734 1
    Solaris 2.5.1 and 2.6
d741 1
a741 1
September 14, 1998
@


1.27
log
@Revision 4.37
@
text
@d731 1
a731 1
    SCO UnixWare 2.1.[12] and 7 for Intel-based systems
@


1.26
log
@Revision 4.32
@
text
@d712 1
a712 1
    Reliant UNIX 5.43 for Pyramid systems
a725 1
    IRIX 5.3, 6.2, 6.3, and 6.4
d733 1
a733 1
    Solaris 2.5, 2.5.1, and 2.6
d740 1
a740 1
May 13, 1998
@


1.25
log
@Revision 4.30
@
text
@d721 1
a721 1
    AIX 4.1.[45] and 4.2[.1]
d727 1
a727 1
    Linux 2.0.3[23] for Intel-based systems
d734 1
a734 1
    Solaris 2.3, 2.5.1, and 2.6
d741 1
a741 1
April 3, 1998
@


1.24
log
@Revision 4.29
Update OpenBSD version.
@
text
@d727 1
a727 1
    Linux 2.0.3[012] for Intel-based systems
d732 1
a732 1
    SCO UnixWare 2.1.[12] for Intel-based systems
d741 1
a741 1
March 24, 1998
@


1.23
log
@Revision 4.29
@
text
@d730 1
a730 1
    OpenBSD 2.[012] for Intel-based systems
d741 1
a741 1
March 18, 1998
@


1.22
log
@Revision 4.27
@
text
@a730 1
    RISC/os 4.52 for MIPS R2000-based systems
d741 1
a741 1
March 6, 1998
@


1.21
log
@Revision 4.24
@
text
@d725 1
a725 1
    HP-UX 9.x and 10.20
d742 1
a742 1
January 23, 1998
@


1.20
log
@Revision 4.23
Update PTX version.
@
text
@d488 1
a488 1
	/usr/local/etc/lsof -Du$HASSYSDC -p99999 > /dev/null 2>&1
d497 8
a504 4
The execution of lsof uses the ``-Du$HASSYSDC'' option to read the
device cache file and recreate it if necessary.  It uses the
(meaningless) ``-p99999'' option to lsof to limit the amount of
work done while searching for open files.
d742 1
a742 1
January 16, 1998
@


1.19
log
@Revision 4.23
@
text
@d730 1
a730 1
    Sequent PTX 2.1.9, 4.2.1, and 4.[34]
@


1.18
log
@Revision 4.23
@
text
@d723 1
a723 1
    Linux 2.0.3[012] and 2.1.7[02] for Intel-based systems
d731 1
a731 1
    Solaris 2.[345], 2.5.1, and 2.6
d738 1
a738 1
December 30, 1997
@


1.17
log
@Revision 4.22
@
text
@d173 2
a174 1
for Pyramid DC/OSx and Reliant UNIX.  Its lsof requires setuid-root
d176 2
a177 1
file system.
d689 3
a691 2
There are no dialects in the current lsof distribution that do not
have device cache file support.
d707 1
d738 1
a738 1
December 15, 1997
@


1.16
log
@Revision 4.21
Linux 2.1.70
@
text
@d719 1
a719 1
    Linux 2.0.3[012], 2.1.64, and 2.1.70 for Intel-based systems
d722 1
a722 1
    OpenBSD 2.0 and 2.1 for Intel-based systems
d727 1
a727 1
    Solaris 2.[345], 2.5.1, and 2.6-Beta_UpdateII
d734 1
a734 1
December 11, 1997
@


1.15
log
@Revision 4.21
Add NetBSD 1.3.
@
text
@d719 1
a719 1
    Linux 2.0.3[012] and 2.1.64 for Intel-based systems
d734 1
a734 1
December 1, 1997
@


1.14
log
@Revision 4.21
@
text
@d720 1
a720 1
    NetBSD 1.2 for Intel and SPARC-based systems
d734 1
a734 1
November 24, 1997
@


1.13
log
@Revision 4.20
@
text
@d719 1
a719 1
    Linux 2.0.3[01] and 2.1.57 for Intel-based systems
d734 1
a734 1
November 3, 1997
@


1.12
log
@Revision 4.17
@
text
@d714 1
a714 1
    BSDI BSD/OS 2.1 and 3.0 for Intel-based systems
d734 1
a734 1
October 14, 1997
@


1.11
log
@Revision 4.13
@
text
@d719 1
a719 2
    Linux 2.0.30, 2.1.2[89], 2.1.3[45], and 2.1.42 for Intel-based
	systems
d734 1
a734 1
July 9, 1997
@


1.10
log
@Revision 4.12
@
text
@d123 1
a123 5
    3.  The device cache file's mtime (modification time) must be
	greater than the mtime and ctime (creation time) of the
	/dev (or /devices) directory.

    4.  There must be a correctly formatted section count line
d126 1
a126 1
    5.  Each section must have a header line with a count that
d131 1
a131 1
    6.  The lines of a section must have the proper format.
d133 1
a133 1
    7.  All lines are included in a 16 bit CRC, and it is recorded
d136 1
a136 1
    8.  The checksum computed when the file is read must match the
d139 1
a139 1
    9.  The checksum section line must be followed by end-of-
d142 1
a142 1
   10.  Lsof must be able to get matching results from stat(2)
d713 1
a713 1
    AIX 4.1.[45] and 4.2[.1] for the IBM RISC/System 6000
d715 1
d717 4
a720 3
    HP-UX 9.x and 10.20 for HP systems
    IRIX 5.3, 6.2 and 6.4 for SGI systems
    Linux 2.0.27, 2.1.2[89], and 2.1.3[45] for Intel-based systems
d722 4
a725 5
    NEXTSTEP 3.1 for NeXT 68040 systems
    OpenBSD 2.0 and 2.1
    OSF/1 2.0 and 3.2 for the DEC Alpha
    RISC/os 4.5 for MIPS R2000-based systems
    SCO OpenServer 3.0 and 5.0.x for Intel-based systems
d727 4
a730 4
    Sequent PTX 2.1.9, 4.2.1, and 4.[34] for Sequent systems
    Solaris 2.[345], 2.5.1, and 2.6-Beta_Update for Sun 4 systems
    SunOS 4.1.3 for Sun 4 systems
    Ultrix 4.2 for DEC RISC
d735 1
a735 1
June 23, 1997
@


1.9
log
@Revision 4.11
@
text
@d729 1
a729 1
    SCO UnixWare 2.1.1 for Intel-based systems
d738 1
a738 1
June 12, 1997
@


1.8
log
@Revision 4.07
@
text
@d717 1
a717 1
    AIX 4.1.4 and 4.2 for the IBM RISC/System 6000
d738 1
a738 1
May 12, 1997
@


1.7
log
@Revision 4.06
@
text
@d725 1
a725 1
    OpenBSD 2.0 for Intel-based systems
d738 1
a738 1
April 30, 1997
@


1.6
log
@Revision 4.05
@
text
@d573 1
a573 1
*	See section 15.2.3 of 00FAQ for an explanation of this	   *
d738 1
a738 1
April 23, 1997
@


1.5
log
@Revision 4.04
@
text
@d30 1
a30 2
It does this for all but two of the Unix dialects it supports.
The exceptions are listed in Appendix A.
a718 1
    EP/IX 2.1.1 for the CDC 4680
d731 1
a731 1
    Solaris 2.[345], 2.5.1, and 2.6-Beta for Sun 4 systems
d738 1
a738 1
April 17, 1997
@


1.4
log
@Revision 4.03
@
text
@d724 1
a724 1
    Linux 2.0.27 and 2.1.28 for Intel-based systems
d740 1
a740 1
April 7, 1997
@


1.3
log
@Revision 4.02
@
text
@d732 1
a732 1
    Sequent PTX 2.1.9, 4.2.1, and 4.3 for Sequent systems
d740 1
a740 1
March 19, 1997
@


1.2
log
@Deprecate IRIX 5.2.
@
text
@d719 1
a719 1
    BSDI BSD/OS 2.1 for Intel-based systems
d724 1
a724 1
    Linux 2.0.27 for Intel-based systems
d740 1
a740 1
Fenruary 24, 1997
@


1.1
log
@Initial revision
@
text
@d723 1
a723 1
    IRIX 5.2, 5.3, 6.2 and 6.4 for SGI systems
@
