head	1.166;
access;
symbols;
locks; strict;
comment	@# @;


1.166
date	2018.07.14.12.13.52;	author abe;	state Exp;
branches;
next	1.165;

1.165
date	2018.02.14.14.18.48;	author abe;	state Exp;
branches;
next	1.164;

1.164
date	2015.07.07.20.16.58;	author abe;	state Exp;
branches;
next	1.163;

1.163
date	2014.10.13.22.31.08;	author abe;	state Exp;
branches;
next	1.162;

1.162
date	2013.01.02.17.13.48;	author abe;	state Exp;
branches;
next	1.161;

1.161
date	2012.04.10.16.35.46;	author abe;	state Exp;
branches;
next	1.160;

1.160
date	2011.09.27.17.27.20;	author abe;	state Exp;
branches;
next	1.159;

1.159
date	2010.07.29.15.59.28;	author abe;	state Exp;
branches;
next	1.158;

1.158
date	2010.01.18.19.01.11;	author abe;	state Exp;
branches;
next	1.157;

1.157
date	2009.03.25.19.23.55;	author abe;	state Exp;
branches;
next	1.156;

1.156
date	2008.10.21.16.21.41;	author abe;	state Exp;
branches;
next	1.155;

1.155
date	2008.05.12.12.39.12;	author abe;	state Exp;
branches;
next	1.154;

1.154
date	2008.05.12.12.28.50;	author abe;	state Exp;
branches;
next	1.153;

1.153
date	2008.05.09.12.55.54;	author abe;	state Exp;
branches;
next	1.152;

1.152
date	2008.04.15.13.24.19;	author abe;	state Exp;
branches;
next	1.151;

1.151
date	2007.04.24.16.16.30;	author abe;	state Exp;
branches;
next	1.150;

1.150
date	2006.04.10.12.44.20;	author abe;	state Exp;
branches;
next	1.149;

1.149
date	2006.03.27.23.04.05;	author abe;	state Exp;
branches;
next	1.148;

1.148
date	2005.08.29.10.17.36;	author abe;	state Exp;
branches;
next	1.147;

1.147
date	2005.08.08.19.45.19;	author abe;	state Exp;
branches;
next	1.146;

1.146
date	2005.05.17.01.06.02;	author abe;	state Exp;
branches;
next	1.145;

1.145
date	2005.05.11.23.29.38;	author abe;	state Exp;
branches;
next	1.144;

1.144
date	2005.05.11.13.01.57;	author abe;	state Exp;
branches;
next	1.143;

1.143
date	2005.01.17.13.24.30;	author abe;	state Exp;
branches;
next	1.142;

1.142
date	2004.12.30.18.38.58;	author abe;	state Exp;
branches;
next	1.141;

1.141
date	2004.10.19.19.36.15;	author abe;	state Exp;
branches;
next	1.140;

1.140
date	2004.07.13.09.28.39;	author abe;	state Exp;
branches;
next	1.139;

1.139
date	2004.07.12.13.57.43;	author abe;	state Exp;
branches;
next	1.138;

1.138
date	2004.07.06.19.14.51;	author abe;	state Exp;
branches;
next	1.137;

1.137
date	2004.03.10.23.41.02;	author abe;	state Exp;
branches;
next	1.136;

1.136
date	2004.01.14.11.23.55;	author abe;	state Exp;
branches;
next	1.135;

1.135
date	2003.10.15.20.30.22;	author abe;	state Exp;
branches;
next	1.134;

1.134
date	2003.10.14.13.55.56;	author abe;	state Exp;
branches;
next	1.133;

1.133
date	2003.10.13.14.07.07;	author abe;	state Exp;
branches;
next	1.132;

1.132
date	2003.06.12.00.55.20;	author abe;	state Exp;
branches;
next	1.131;

1.131
date	2003.06.11.11.35.57;	author abe;	state Exp;
branches;
next	1.130;

1.130
date	2003.03.23.19.27.46;	author abe;	state Exp;
branches;
next	1.129;

1.129
date	2003.03.23.14.00.14;	author abe;	state Exp;
branches;
next	1.128;

1.128
date	2003.03.21.17.38.32;	author abe;	state Exp;
branches;
next	1.127;

1.127
date	2002.12.20.14.28.34;	author abe;	state Exp;
branches;
next	1.126;

1.126
date	2002.12.05.12.19.44;	author abe;	state Exp;
branches;
next	1.125;

1.125
date	2002.10.10.11.20.52;	author abe;	state Exp;
branches;
next	1.124;

1.124
date	2002.06.17.20.03.21;	author abe;	state Exp;
branches;
next	1.123;

1.123
date	2002.06.17.01.37.30;	author abe;	state Exp;
branches;
next	1.122;

1.122
date	2002.04.29.17.09.16;	author abe;	state Exp;
branches;
next	1.121;

1.121
date	2002.04.19.20.52.30;	author abe;	state Exp;
branches;
next	1.120;

1.120
date	2002.04.19.12.05.53;	author abe;	state Exp;
branches;
next	1.119;

1.119
date	2002.03.20.21.01.52;	author abe;	state Exp;
branches;
next	1.118;

1.118
date	2002.03.06.18.47.48;	author abe;	state Exp;
branches;
next	1.117;

1.117
date	2002.03.05.13.28.55;	author abe;	state Exp;
branches;
next	1.116;

1.116
date	2002.02.26.15.12.53;	author abe;	state Exp;
branches;
next	1.115;

1.115
date	2002.01.22.12.41.28;	author abe;	state Exp;
branches;
next	1.114;

1.114
date	2002.01.18.20.55.45;	author abe;	state Exp;
branches;
next	1.113;

1.113
date	2002.01.14.15.53.06;	author abe;	state Exp;
branches;
next	1.112;

1.112
date	2001.11.07.15.43.04;	author abe;	state Exp;
branches;
next	1.111;

1.111
date	2001.10.19.17.17.17;	author abe;	state Exp;
branches;
next	1.110;

1.110
date	2001.10.15.12.13.42;	author abe;	state Exp;
branches;
next	1.109;

1.109
date	2001.09.28.01.13.05;	author abe;	state Exp;
branches;
next	1.108;

1.108
date	2001.09.11.18.22.15;	author abe;	state Exp;
branches;
next	1.107;

1.107
date	2001.08.09.11.39.23;	author abe;	state Exp;
branches;
next	1.106;

1.106
date	2001.07.18.18.46.44;	author abe;	state Exp;
branches;
next	1.105;

1.105
date	2001.07.05.12.30.28;	author abe;	state Exp;
branches;
next	1.104;

1.104
date	2001.06.19.13.25.15;	author abe;	state Exp;
branches;
next	1.103;

1.103
date	2001.06.05.11.19.10;	author abe;	state Exp;
branches;
next	1.102;

1.102
date	2001.05.14.18.24.22;	author abe;	state Exp;
branches;
next	1.101;

1.101
date	2001.05.03.12.26.30;	author abe;	state Exp;
branches;
next	1.100;

1.100
date	2001.05.01.19.50.26;	author abe;	state Exp;
branches;
next	1.99;

1.99
date	2001.04.19.12.17.08;	author abe;	state Exp;
branches;
next	1.98;

1.98
date	2001.03.19.12.27.45;	author abe;	state Exp;
branches;
next	1.97;

1.97
date	2001.01.14.19.21.57;	author abe;	state Exp;
branches;
next	1.96;

1.96
date	2001.01.12.15.16.04;	author abe;	state Exp;
branches;
next	1.95;

1.95
date	2001.01.02.12.44.53;	author abe;	state Exp;
branches;
next	1.94;

1.94
date	2000.12.06.15.45.25;	author abe;	state Exp;
branches;
next	1.93;

1.93
date	2000.11.05.13.45.16;	author abe;	state Exp;
branches;
next	1.92;

1.92
date	2000.08.08.15.20.57;	author abe;	state Exp;
branches;
next	1.91;

1.91
date	2000.08.01.17.19.35;	author abe;	state Exp;
branches;
next	1.90;

1.90
date	2000.06.29.12.29.54;	author abe;	state Exp;
branches;
next	1.89;

1.89
date	2000.06.27.18.18.19;	author abe;	state Exp;
branches;
next	1.88;

1.88
date	2000.06.09.15.06.46;	author abe;	state Exp;
branches;
next	1.87;

1.87
date	2000.06.01.18.35.03;	author abe;	state Exp;
branches;
next	1.86;

1.86
date	2000.05.31.13.31.00;	author abe;	state Exp;
branches;
next	1.85;

1.85
date	2000.03.23.14.26.36;	author abe;	state Exp;
branches;
next	1.84;

1.84
date	2000.03.16.15.26.25;	author abe;	state Exp;
branches;
next	1.83;

1.83
date	100.01.14.08.56.23;	author abe;	state Exp;
branches;
next	1.82;

1.82
date	99.11.28.06.52.24;	author abe;	state Exp;
branches;
next	1.81;

1.81
date	99.10.23.09.27.38;	author abe;	state Exp;
branches;
next	1.80;

1.80
date	99.07.28.09.31.44;	author abe;	state Exp;
branches;
next	1.79;

1.79
date	99.07.19.14.00.41;	author abe;	state Exp;
branches;
next	1.78;

1.78
date	99.06.22.16.04.20;	author abe;	state Exp;
branches;
next	1.77;

1.77
date	99.06.22.10.37.42;	author abe;	state Exp;
branches;
next	1.76;

1.76
date	99.05.19.06.45.47;	author abe;	state Exp;
branches;
next	1.75;

1.75
date	99.05.11.06.40.08;	author abe;	state Exp;
branches;
next	1.74;

1.74
date	99.05.09.14.49.59;	author abe;	state Exp;
branches;
next	1.73;

1.73
date	99.05.04.08.46.05;	author abe;	state Exp;
branches;
next	1.72;

1.72
date	99.04.15.08.14.38;	author abe;	state Exp;
branches;
next	1.71;

1.71
date	99.03.29.15.06.40;	author abe;	state Exp;
branches;
next	1.70;

1.70
date	99.02.27.10.40.27;	author abe;	state Exp;
branches;
next	1.69;

1.69
date	99.02.25.20.05.58;	author abe;	state Exp;
branches;
next	1.68;

1.68
date	99.01.25.15.50.51;	author abe;	state Exp;
branches;
next	1.67;

1.67
date	98.12.28.10.10.37;	author abe;	state Exp;
branches;
next	1.66;

1.66
date	98.11.23.07.34.57;	author abe;	state Exp;
branches;
next	1.65;

1.65
date	98.09.14.19.56.17;	author abe;	state Exp;
branches;
next	1.64;

1.64
date	98.09.14.13.56.18;	author abe;	state Exp;
branches;
next	1.63;

1.63
date	98.08.03.08.02.24;	author abe;	state Exp;
branches;
next	1.62;

1.62
date	98.07.17.08.25.44;	author abe;	state Exp;
branches;
next	1.61;

1.61
date	98.06.26.08.08.17;	author abe;	state Exp;
branches;
next	1.60;

1.60
date	98.06.19.08.31.03;	author abe;	state Exp;
branches;
next	1.59;

1.59
date	98.05.22.13.58.02;	author abe;	state Exp;
branches;
next	1.58;

1.58
date	98.05.13.06.57.22;	author abe;	state Exp;
branches;
next	1.57;

1.57
date	98.05.11.14.21.26;	author abe;	state Exp;
branches;
next	1.56;

1.56
date	98.05.07.09.04.41;	author abe;	state Exp;
branches;
next	1.55;

1.55
date	98.04.21.10.25.23;	author abe;	state Exp;
branches;
next	1.54;

1.54
date	98.04.08.21.46.46;	author abe;	state Exp;
branches;
next	1.53;

1.53
date	98.04.03.16.59.23;	author abe;	state Exp;
branches;
next	1.52;

1.52
date	98.04.03.13.30.39;	author abe;	state Exp;
branches;
next	1.51;

1.51
date	98.03.26.09.39.50;	author abe;	state Exp;
branches;
next	1.50;

1.50
date	98.03.24.13.55.42;	author abe;	state Exp;
branches;
next	1.49;

1.49
date	98.03.24.07.24.37;	author abe;	state Exp;
branches;
next	1.48;

1.48
date	98.03.18.14.36.34;	author abe;	state Exp;
branches;
next	1.47;

1.47
date	98.03.10.07.00.19;	author abe;	state Exp;
branches;
next	1.46;

1.46
date	98.03.06.19.02.17;	author abe;	state Exp;
branches;
next	1.45;

1.45
date	98.02.16.15.56.26;	author abe;	state Exp;
branches;
next	1.44;

1.44
date	98.02.06.22.00.06;	author abe;	state Exp;
branches;
next	1.43;

1.43
date	98.02.06.14.28.06;	author abe;	state Exp;
branches;
next	1.42;

1.42
date	98.02.06.07.18.44;	author abe;	state Exp;
branches;
next	1.41;

1.41
date	98.02.05.23.47.02;	author abe;	state Exp;
branches;
next	1.40;

1.40
date	98.01.20.08.25.06;	author abe;	state Exp;
branches;
next	1.39;

1.39
date	98.01.16.14.46.15;	author abe;	state Exp;
branches;
next	1.38;

1.38
date	97.12.30.14.29.56;	author abe;	state Exp;
branches;
next	1.37;

1.37
date	97.12.15.07.44.43;	author abe;	state Exp;
branches;
next	1.36;

1.36
date	97.12.11.15.40.33;	author abe;	state Exp;
branches;
next	1.35;

1.35
date	97.12.01.13.04.19;	author abe;	state Exp;
branches;
next	1.34;

1.34
date	97.11.24.15.37.15;	author abe;	state Exp;
branches;
next	1.33;

1.33
date	97.11.17.15.29.07;	author abe;	state Exp;
branches;
next	1.32;

1.32
date	97.11.10.08.20.32;	author abe;	state Exp;
branches;
next	1.31;

1.31
date	97.11.06.09.45.30;	author abe;	state Exp;
branches;
next	1.30;

1.30
date	97.11.03.10.37.27;	author abe;	state Exp;
branches;
next	1.29;

1.29
date	97.10.24.19.01.03;	author abe;	state Exp;
branches;
next	1.28;

1.28
date	97.10.14.08.10.56;	author abe;	state Exp;
branches;
next	1.27;

1.27
date	97.09.23.09.21.49;	author abe;	state Exp;
branches;
next	1.26;

1.26
date	97.08.15.08.13.45;	author abe;	state Exp;
branches;
next	1.25;

1.25
date	97.07.28.08.15.26;	author abe;	state Exp;
branches;
next	1.24;

1.24
date	97.07.22.10.53.03;	author abe;	state Exp;
branches;
next	1.23;

1.23
date	97.07.09.19.54.52;	author abe;	state Exp;
branches;
next	1.22;

1.22
date	97.07.09.17.12.33;	author abe;	state Exp;
branches;
next	1.21;

1.21
date	97.06.27.07.59.56;	author abe;	state Exp;
branches;
next	1.20;

1.20
date	97.06.23.17.28.53;	author abe;	state Exp;
branches;
next	1.19;

1.19
date	97.06.23.09.42.05;	author abe;	state Exp;
branches;
next	1.18;

1.18
date	97.06.12.18.50.55;	author abe;	state Exp;
branches;
next	1.17;

1.17
date	97.06.08.08.20.23;	author abe;	state Exp;
branches;
next	1.16;

1.16
date	97.06.01.12.49.27;	author abe;	state Exp;
branches;
next	1.15;

1.15
date	97.05.23.13.31.04;	author abe;	state Exp;
branches;
next	1.14;

1.14
date	97.05.23.10.15.35;	author abe;	state Exp;
branches;
next	1.13;

1.13
date	97.05.23.07.42.48;	author abe;	state Exp;
branches;
next	1.12;

1.12
date	97.05.12.09.56.00;	author abe;	state Exp;
branches;
next	1.11;

1.11
date	97.04.29.12.54.12;	author abe;	state Exp;
branches;
next	1.10;

1.10
date	97.04.23.15.58.33;	author abe;	state Exp;
branches;
next	1.9;

1.9
date	97.04.17.13.24.32;	author abe;	state Exp;
branches;
next	1.8;

1.8
date	97.04.16.15.21.31;	author abe;	state Exp;
branches;
next	1.7;

1.7
date	97.04.07.08.20.00;	author abe;	state Exp;
branches;
next	1.6;

1.6
date	97.03.21.12.49.21;	author abe;	state Exp;
branches;
next	1.5;

1.5
date	97.03.19.13.20.52;	author abe;	state Exp;
branches;
next	1.4;

1.4
date	97.03.03.07.07.15;	author abe;	state Exp;
branches;
next	1.3;

1.3
date	97.02.24.15.48.00;	author abe;	state Exp;
branches;
next	1.2;

1.2
date	97.02.24.14.12.57;	author abe;	state Exp;
branches;
next	1.1;

1.1
date	97.02.24.07.22.43;	author abe;	state Exp;
branches;
next	;


desc
@Lsof version 4
@


1.166
log
@Final release to GitHub
@
text
@#!/bin/sh 
#
# Configure -- configure lsof
#
# See the LSOF_HLP here document for usage.
#
# See the lsof distribution file 00XCONFIG for information on setting
# environment variables for cross-configuring lsof -- e.g., for configuring
# for Linux 2.3 on a machine running 2.4.  Marty Leisner suggested this
# support and provided the Linux Configure stanza modifications.
#
# When configuring for a particular dialect, <target-dialect>, this script
# requires that the subdirectory ./dialects/<target-dialect> contain a
# shell script, named $LSOF_MK, that places its source modules in this
# directory.
#
# $Id: Configure,v 1.165 2018/02/14 14:18:48 abe Exp abe $

# LSOF_CFLAGS_OVERRIDE=1 may be introduced through the environment to cause
#	the library Makefile's CFLAGS definition to override any in the
#	environment.

# LSOF_DISTRIBKVM may be introduced through the environment to specify the
#	Sun4 kernel virtual memory type of distrib.cf

LSOF_F="ddev.c dfile.c dlsof.h dmnt.c dnode*.c dproc.c dproto.h dsock.c dstore.c dzfs.h kernelbase.h machine.h machine.h.old new_machine.h __lseek.s"
LSOF_HLP_BASE=./cfghlp.
LSOF_HLP=${LSOF_HLP_BASE}$$

# LSOF_LOCALSUFFIX may be introduced through the environment to select a local
#	version of a Makefile.  It is used as a suffix to $LSOF_MKF.

# LSOF_MAKE may be introduced through the environment to specify a path to the
#	make command.   It defaults to `which make`, if that is non-NULL;
#	otherwise to the string "make".

if test "X$LSOF_MAKE" = "X"	# {
then
  LSOF_MAKE=`which make`
  if test "X$LSOF_MAKE" = "X"	# {
  then
    LSOF_MAKE=make
  fi	# }
fi	# }

LSOF_MK=Mksrc

# LSOF_MKC is the dialect's Mksrc create command -- default "ln -s".

# LSOF_MKFC may be introduced though the environment to change the name
# used for the created make file.

if test "X$LSOF_MKFC" = "X"	# {
then
  LSOF_MKFC=Makefile
fi	# }

LSOF_LIB=lib
LSOF_MKF=Makefile
LSOF_LIBMKF=Makefile
LSOF_LIBMKFSKEL=Makefile.skel

LSOF_VF=version

# Make sure no other variable important to Makefile construction is
# already set in the environment.
#
#	$AFS_VICE	    locatiion of AFS VICE directory
#				(default = /usr/vice)
#	$LSOF_AFS	    AFS temporary
#	$LSOF_AFS_NQ	    AFS-not-qualified flag
#	$LSOF_AFSV	    AFS version
#	$LSOF_AR	    archive command and its arguments for making the
#			    lsof library
#	$LSOF_ARCH	    Unix dialect architecture as a string (may be
#			    supplied externally)
#	$LSOF_CC	    C compiler name (may be supplied externally)
#	$LSOF_CCV	    C compiler version (may be supplied externally)
#	$LSOF_CDIR	    configuration directory
#	$LSOF_CFGD	    depend options
#	$LSOF_CFGDN	    depend file name
#	$LSOF_CFGF	    C flags -- e.g., -D's
#	$LSOF_CFGL	    last lsof library loader flags -- e.g., -l's
#	$LSOF_CINFO	    Configure information for LSOF_CINFO in version.h
#	$LSOF_CTFH	    Solaris 10 and above libctf.h status
#	$LSOF_CTFL	    Solaris 10 and above -lctf status
#	$LSOF_DEBUG	    Makefile's DEBUG string
#	$LSOF_DINC	    include flags -- -I's
#	$LSOF_DINC_ADD	    include flags status
#	$LSOF_DOC	    special document (man page) directory path
#	$LSOF_ERR	    internal error flag
#	$LSOF_FCFGL	    first lsof library loader flags -- e.g., -l's
#			    that must precede $LSOF_LIB
#	$LSOF_FBSD_ZFS      FreeBSD $LSOF_FBSD_ZFS_MKF status
#	$LSOF_FBSD_ZFS_CFGF FreeBSD ZFS configure flags
#	$LSOF_FBSD_ZFS_MKF  FreeBSD ZFS Makefile name
#	$LSOF_FBSD_ZFS_SYS  FreeBSD ZFS system sources location
#	$LSOF_HOST	    host name (e.g., from uname -n)
#	$LSOF_INCLUDE	    directory where header files are found
#			    (default = /usr/include)
#	$LSOF_LD	    loader name if not $LSOF_CC
#	$LSOF_LIB_NO	    if "N" don't configure the lsof library
#	$LSOF_LOCALSUFFIX   local suffix for Makefile
#	$LSOF_NBSD_BUFQH    NetBSD <sys/bufq.h> copy status
#	$LSOF_NBSD_PTYFS    NetBSD ${NETBSD_SYS}/sys/fs/ptyfs/ copy status
#	$LSOF_N_UNIXV	    *BSD system's kernel file
#	$LSOF_OPINC	    supplies additional -I/path arguments for the
#			    Makefile's CFLAGS.
#	$LSOF_PL	    patch level
#	$LSOF_RANLIB	    randomizing command for the lsof library
#	$LSOF_RANLIB_SUP    if non-NULL $LSOF_RANLIB was supplied
#	$LSOF_SCRIPT_CALL   Customize and Inventory scripts call status
#	$LSOF_SPMKF	    Special Makefile name
#	$LSOF_TGT	    canonical target abbreviation (shortest)
#	$LSOF_TMP	    internal temporary
#	$LSOF_TMP1	    internal temporary
#	$LSOF_TMP2	    internal temporary
#	$LSOF_TMP3	    internal temporary
#	$LSOF_TMP4	    internal temporary
#	$LSOF_TMP5	    internal temporary
#	$LSOF_TMP6	    internal temporary
#	$LSOF_TMPC_BASE	    base name for $LSOF_TMPC
#	$LSOF_TMPC	    temporary C source file base name
#	$LSOF_TSTBIGF	    big file capability (for $LSOF_TSTCFLG)
#	$LSOF_TSTCC	    tests CC file
#	$LSOF_TSTCFLG	    tests CFLAGS file
#	$LSOF_TSTDFLG	    dialect-specific values for $LSOF_TSTCFLG
#	$LSOF_TSTK64	    status of 64 bit kernel (for $LSOF_TSTCFLG)
#	$LSOF_TSTKMEM	    /dev/kmem usage status (for $LSOF_TSTCFLG)
#	$LSOF_TSTLFF	    tests LDFLAGS file
#	$LSOF_TSTLFLG	    tests LDFLAGS values
#	$LSOF_TSTSUBD	    test subdirectory
#	$LSOF_TSTVPATH	    test v_path state (for $LSOF_TSTCFLG)
#	$LSOF_TSTXO	    test extra objects (for $LSOF_TSTXOC)
#	$LSOF_TSTXOC	    test extra objects file
#	$LSOF_UNSUP	    Lsof is unsupported on this dialect
#	$LSOF_UNSUP2	    Second message about lack of support
#	$LSOF_VERS	    Unix dialect version as a decimal number (may
#			    be supplied externally)
#	$LSOF_VSTR	    Unix dialect version as a string -- may be supplied
#			    externally

if test "X$AFS_VICE" = "X"	# {
then
  AFS_VICE="/usr/vice"
fi	# }
LSOF_AFS=""
LSOF_AFS_NQ=""
LSOF_AFSV=""
if test "X$LSOF_ARCH" = "X"	# {
then
  LSOF_ARCH=""
fi	# }
LSOF_CDIR=""
LSOF_CFGD=""
LSOF_CFGDN=""
LSOF_CINFO=""
LSOF_CTFH=0
LSOF_CTFL=0
LSOF_DEBUG=""
LSOF_DOC=""
LSOF_ERR=""
LSOF_FCFGL=""
LSOF_FBSD_ZFS=0
LSOF_FBSD_ZFS_CFGF=""
LSOF_FBSD_ZFS_MKF="Makefile.zfs"
LSOF_FBSD_ZFS_SYS=""
LSOF_HOST=""
if test "X$LSOF_INCLUDE" = "X"	# {
then
  LSOF_DINC=""
  LSOF_INCLUDE="/usr/include"
else
  LSOF_DINC="-I$LSOF_INCLUDE"
fi	# }
LSOF_LD=""
LSOF_LIB_NO=""
LSOF_PL=""
if test "X$LSOF_RANLIB" = "X"	# {
then
  LSOF_RANLIB="ranlib"
  LSOF_RANLIB_SUP=""
else
  LSOF_RANLIB_SUP="Y"
fi	# }
LSOF_SCRIPT_CALL="yes"
LSOF_SPMKF=""
LSOF_TMP1=""
LSOF_TMP2=""
LSOF_TMPC_BASE=./lsof_Configure_tmp_
LSOF_TMPC=${LSOF_TMPC_BASE}$$
LSOF_TSTBIGF=""
LSOF_TSTSUBD="./tests"
LSOF_TSTCC="${LSOF_TSTSUBD}/config.cc"
LSOF_TSTCFLG="${LSOF_TSTSUBD}/config.cflags"
LSOF_TSTDFLG=""
LSOF_TSTK64=0
LSOF_TSTKMEM=1
LSOF_TSTLFF="${LSOF_TSTSUBD}/config.ldflags"
LSOF_TSTLFLG=""
LSOF_TSTVPATH=0
LSOF_TSTXO=""
LSOF_TSTXOC="${LSOF_TSTSUBD}/config.xobj"
LSOF_UNSUP="WARNING: unsupported dialect or version"
LSOF_UNSUP2=""
if test "X$LSOF_VERS" = "X"	# {
then
  LSOF_VERS=""
fi	# }
if test "X$LSOF_VSTR" = "X"	# {
then
  LSOF_VSTR=""
fi	# }

# Establish echo type -- Berkeley or SYSV.

j=`echo -n ""`
if test "X$j" = "X-n "
then
  EC="\c"
  EO=""
else
  EC=""
  EO="-n"
fi

# Make sure temporary files are removed before an abnormal exit.

trap 'rm -f ${LSOF_HLP_BASE}* ${LSOF_TMPC_BASE}*; exit 1' 1 2 3 15

rm -f $LSOF_HLP
cat > $LSOF_HLP << LSOF_HLP
Usage: Configure <options> <target-dialect>
  <options>:  -clean        : clean up previous configuration
              -d|-dialects  : display a list of supported dialect versions
              -h|-help      : display help information
              -n            : avoid AFS, customization, and inventory checks
  <target-dialect> (****USE -d TO GET TESTED DIALECT VERSION NUMBERS****):
    aix|aixgcc              : IBM AIX xlc (aix) or gcc (aixgcc)
    darwin                  : Apple Darwin
    decosf                  : DEC OSF/1
    digital_unix|du         : Digital UNIX
    freebsd                 : FreeBSD
    hpux|hpuxgcc            : HP-UX cc (hpux) or gcc (hpuxgcc)
    linux                   : Linux
    netbsd                  : NetBSD
    nextstep|next|ns|nxt    : NEXTSTEP
    openbsd                 : OpenBSD
    openstep|os             : OPENSTEP
    osr|sco                 : SCO OpenServer < 6.0.0, SCO devloper's compiler
    osrgcc|scogcc           : SCO OpenServer < 6.0.0, gcc compiler
    osr6                    : SCO OpenServer 6.0.0, SCO compiler
    solaris|solariscc       : Solaris gcc (solaris) or cc (solariscc)
    tru64		    : Tru64 UNIX
    unixware|uw             : SCO|Caldera UnixWare
LSOF_HLP

LSOF_TGT="no-target"

args=$#
while test $args -gt 0	# {
do
  case $1 in	# {
    -clean)
      if test -r $LSOF_MKFC	# {
      then
	echo "$LSOF_MAKE -f $LSOF_MKFC clean"
	$LSOF_MAKE -f $LSOF_MKFC clean
      else
	if test -r ${LSOF_LIB}/${LSOF_LIBMKF}	# {
	then
	  echo "(cd ${LSOF_LIB}; $LSOF_MAKE -f ${LSOF_LIBMKF} clean)"
	  (cd ${LSOF_LIB}; $LSOF_MAKE -f ${LSOF_LIBMKF} clean)
	else
	  if test -r ${LSOF_LIB}/${LSOF_LIBMKF}.skel	# {
	  then
	    echo "(cd ${LSOF_LIB}; $LSOF_MAKE -f ${LSOF_LIBMKF}.skel clean)"
	    (cd ${LSOF_LIB}; $LSOF_MAKE -f ${LSOF_LIBMKF}.skel clean)
	  fi	# }
	fi	# }
      fi	# }
      if test -r ${LSOF_TSTSUBD}/Makefile	# {
      then
	echo "(cd ${LSOF_TSTSUBD}; $LSOF_MAKE spotless)"
	(cd ${LSOF_TSTSUBD}; $LSOF_MAKE spotless)
      else
	echo '(cd ${LSOF_TSTSUBD}; rm *.o config.*)'
	(cd ${LSOF_TSTSUBD}; rm *.o config.*)
      fi	# }
      rm -f $LSOF_F $LSOF_MKFC $LSOF_FBSD_ZFS_MKF ${LSOF_TMPC_BASE}*
      echo rm -f $LSOF_F $LSOF_MKFC $LSOF_FBSD_ZFS_MKF ${LSOF_TMPC_BASE}*
      rm -rf AFSHeaders AFSVersion solaris11 version.h vnode_if.h
      echo "rm -rf AFSHeaders AFSVersion solaris11 version.h vnode_if.h"
      rm -f ${LSOF_HLP_BASE}* cd9660_node.h lockf_owner.h fbsd_minor.h
      echo "rm -f ${LSOF_HLP_BASE}* cd9660_node.h lockf_owner.h fbsd_minor.h"
      rm -f opt_kdtrace.h opt_random.h
      echo "rm -f opt_kdtrace.h opt_random.h"
      rm -f dialects/aix/aix5/j2/j2_snapshot.h
      echo "rm -f dialects/aix/aix5/j2/j2_snapshot.h"
      rm -f dialects/sun/solaris10	# DEBUG -- for s10_44
      echo "rm -f dialects/sun/solaris10"	# DEBUG -- for s10_44
      rm -f dialects/du/du5_sys_malloc.h
      echo "rm -f dialects/du/du5_sys_malloc.h"
      rm -f dialects/hpux/kmem/hpux_mount.h
      echo "rm -f dialects/hpux/kmem/hpux_mount.h"
      rm -rf dialects/n+obsd/include
      echo "rm -rf dialects/n+obsd/include"
      rm -f dialects/uw/uw7/vm/swap.h
      echo "rm -f dialects/uw/uw7/vm/swap.h"
      rm -f ${LSOF_LIB}/${LSOF_LIBMKF}
      echo "rm -f ${LSOF_LIB}/${LSOF_LIBMKF}"
      exit 0
      ;;
 
    -d|-dialects)
      if test -r ./00DIALECTS -a -r ./version	# {
      then
	V=`sed '/VN/s/.ds VN \(.*\)/\1/' version`
	echo "lsof $V has been *tested* on these UNIX dialect versions:"
	cat 00DIALECTS
	echo Although "$V hasn't been tested on other versions of these dialects,"
	echo "it may work.  Try \`Configure <dialect>\` and \`make\` to see."
	rm -f $LSOF_HLP
	exit 0
      else
	echo "Can't display UNIX dialect version information:"
	if test ! -r ./00DIALECTS	# {
	then
	  echo "	./00DIALECTS is inaccessible."
	fi	# }
	if test ! -r ./version	# {
	then
	  echo "	./version is inaccessible."
	fi	# }
	rm -f $LSOF_HLP
	exit 1
      fi	# }
      ;;

    -h|-help) cat $LSOF_HLP
      rm -f $LSOF_HLP
      exit 0
      ;;

    -n*)
      LSOF_SCRIPT_CALL="no"
      ;;

    *)
      if test "X$LSOF_TGT" != "Xno-target"	# {
      then
	echo "Only one dialect may be configured at a time."
	echo 'Both "$LSOF_TGT" and "$1" were specified.'
	cat $LSOF_HLP
	rm -f $LSOF_HLP
	exit 1
      else
	LSOF_TGT=$1
      fi	# }
      ;;
  esac	# }
  shift
  args=`expr $args - 1`
done	# }

case $LSOF_TGT in	# {
 no-target)
   echo "No target dialect was specified."
   cat $LSOF_HLP
   rm -f $LSOF_HLP
   exit 1
   ;;

# Configure for AIX xlc and AIX gcc.

  aix|aixgcc)

  # AIXA stands for AIX architecture.  It is assigned these values in this
  # stanza:
  #
  #    0	The AIX version is < 5.0, or the AIX 5.0 architecture is
  #		Power and the kernel bit size is 32.
  #
  #    1	The AIX version is >= 5.0, the AIX architecture is Power,
  #		and the kernel bit size is 64.
  #
  #    2	The AIX version is >= 5.0 and the architecture is IA64.

    if test "X$LSOF_RANLIB_SUP" = "X"	# {
    then
      LSOF_RANLIB="@@echo \\\\\\\\c"    # AIX make doesn't like a null ${RANLIB}.
    fi	# }
    if test "X$LSOF_VSTR" = "X"	# {
    then

      # If the AIX version isn't pre-defined, determine it.

      LSOF_TMP1=`uname -v`
      if test "X$LSOF_TMP1" = "X5"	# {
      then

	# If the AIX version is 5, build the version string with `uname -rv`
	# output.

	  LSOF_VSTR=`uname -r | awk '{printf "5.%d.0.0\n",\$1}'`
	  echo "Uname reports the version is $LSOF_VSTR."
      else

	# See if oslevel can determine the version.

	LSOF_TMP1=/usr/bin/oslevel
	if test -x $LSOF_TMP1	# {
	then
	  echo "Determining AIX version with $LSOF_TMP1."
	  echo "This may take a while, depending on your maintenance level."
	  LSOF_VSTR=`$LSOF_TMP1 | sed 's/[^0-9]*\([0-9\.]*\).*/\1/'`
	  echo "$LSOF_TMP1 reports the version is $LSOF_VSTR."
	else

	  # If oslevel can't be used, build the version string with
	  # `uname -rv` and issue a warning.

	  LSOF_VSTR=`uname -rv | awk '{printf "%d.%d.0.0\n",\$2,\$1}'`
	  echo "WARNING: can't execute $LSOF_TMP1; uname -rv reports"
	  echo "         the version is $LSOF_VSTR; edit CFGF in Makefile and"
	  echo "         lib/Makefile to refine AIXV and LSOF_VSTR."
	fi	# }
      fi	# }
    fi	# }
    if test "X$LSOF_VERS" = "X"	# {
    then
      LSOF_VERS=`echo $LSOF_VSTR | sed 's/\.//g'`
    fi	# }
    if test $LSOF_VERS -ge 4320	# {
    then
      LSOF_TSTBIGF=" "
    fi	# }
    if test "X$LSOF_CC" = "X"	# {
    then
      if test "X$LSOF_TGT" = "Xaixgcc"	# {
      then
	LSOF_CC=gcc
	LSOF_CCV=`$LSOF_CC -v 2>&1 | sed -n 's/.*version \(.*\)/\1/p'`
      else
	LSOF_CC=cc
      fi	# }
    fi	# }
    LSOF_TGT="aix"
    echo $LSOF_CC | grep gcc > /dev/null
    if test $? -eq 0	# {
    then

    # Prevent use of gcc for AIX below 4.1.

      if test $LSOF_VERS -lt 4100	# {
      then
	echo "********************************************************"
	echo "* Sorry, but gcc can't be used to compile lsof for AIX *"
	echo "* versions less than 4.1, because of possible kernel   *"
	echo "* structure alignment differences between it and xlc.  *"
	echo "********************************************************"
	rm -f $LSOF_HLP
	exit 1
      fi	# }
    fi	# }

    # Test for AFS.

    if test "X$AIX_HAS_AFS" != "X"	# {
    then
      LSOF_AFS=$AIX_HAS_AFS
    fi	# }
    if test "X$LSOF_AFS" != "Xno"	# {
    then
      if test "X$LSOF_AFS" = "Xyes" -o -r ${AFS_VICE}/etc/ThisCell	# {
      then
	if test "X$LSOF_AFS" != "Xyes"	# {
	then
	  if test "X$LSOF_SCRIPT_CALL" = "Xno"	# {
	  then
	    if test -r ./AFSHeaders -a -r ./AFSVersion	# {
	    then
	      LSOF_AFS="yes"
	    fi	# }
	  else
	    if test ! -x ./AFSConfig	# {
	    then
	      echo "Can't find or execute the AFSConfig script"
	      rm -f $LSOF_HLP
	      exit 1
	    fi	# }
	    ./AFSConfig
	    if test $? -eq 0 -a -r ./AFSHeaders -a -r ./AFSVersion	# {
	    then
	      LSOF_AFS="yes"
	    fi	# }
	  fi	# }
	fi	# }
	if test "X$LSOF_AFS" = "Xyes"	# {
	then
	  if test "X$LSOF_AFSV" = "X"	# {
	  then
	    if test -r ./AFSVersion	# {
	    then
	      LSOF_AFSV=`cat ./AFSVersion | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1 \2/' | awk '{printf "%d%02d\n",\$1,\$2}'`
	    else
	      echo "!!!FATAL: no ./AFSVersion file.  It should have been"
	      echo "          created by a previous AFS configuration run."
	      rm -f $LSOF_HLP
	      exit 1
	    fi	# }
	  fi	# }
	  if test $LSOF_VERS -gt 4330 -o LSOF_AFSV -gt 305	# {
	  then
	    echo "!!!FATAL: Lsof does not support AFS on this combination of"
	    echo "          AIX ($LSOF_VERS) and AFS ($LSOF_AFSV) versions."
	    echo "          To disable AFS, set the value of the AIX_HAS_AFS"
	    echo "          environment variable to \"no\"."
	    rm -f $LSOF_HLP
	    exit 1
	  else
	    LSOF_CFGF="$LSOF_CFGF -DHAS_AFS=$LSOF_AFSV"
	    LSOF_DINC="$LSOF_DINC -I`cat ./AFSHeaders`"
	    if test -r ${LSOF_INCLUDE}/sys/inttypes.h  # {
	    then
	      grep "^typedef.*int16;" ${LSOF_INCLUDE}/sys/inttypes.h > /dev/null
	      if test $? -eq 0      # {
	      then
		LSOF_CFGF="$LSOF_CFGF -DHASINT16TYPE"
	      fi    # }
	      grep "^typedef.*u_int32;" ${LSOF_INCLUDE}/sys/inttypes.h > /dev/null
	      if test $? -eq 0      # {
	      then
		LSOF_CFGF="$LSOF_CFGF -DHASUINT16TYPE"
	      fi    # }
	      grep "^typedef.*int32;" ${LSOF_INCLUDE}/sys/inttypes.h > /dev/null
	      if test $? -eq 0      # {
	      then
		LSOF_CFGF="$LSOF_CFGF -DHASINT32TYPE"
	      fi    # }
	    fi	# }
	  fi      # }
	fi	# }
      fi	# }
    fi	# }

    # Miscellaneous AIX tests

    if test -d ${LSOF_INCLUDE}/nfs	# {
    then
      LSOF_CFGF="$LSOF_CFGF -DHAS_NFS"
    fi	# }
    echo $LSOF_CC | grep cc | grep -v gcc > /dev/null
    if test $? -eq 0 -a $LSOF_VERS -ge 4140 -a $LSOF_VERS -lt 5000	# {
    then
      LSOF_CFGL="$LSOF_CFGL -bnolibpath"
    fi	# }
    if test -r ${LSOF_INCLUDE}/sys/socket.h	# {
    then
      grep AF_INET6 ${LSOF_INCLUDE}/sys/socket.h > /dev/null
      if test $? -eq 0	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASIPv6"
      fi	# }
    fi	# }
    if test -r ${LSOF_INCLUDE}/sys/stat.h	# {
    then
      grep stat64 ${LSOF_INCLUDE}/sys/stat.h > /dev/null
      if test $? -eq 0 # {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASSTAT64"
      fi	# }
    fi	# }
#DEBUG SANFS    if test -r ${LSOF_INCLUDE}/sys/sanfs/sanfsnode.h???	# {
#DEBUG SANFS    then
#DEBUG SANFS      LSOF_CFGF="$LSOF_CFGF -DHAS_SANFS"
#DEBUG SANFS    fi	# }
    if test $LSOF_VERS -ge 5000	# {
    then

    # This is AIX 5 or greater.

      if test -d ${LSOF_INCLUDE}/j2	# {
      then

      # The AIX > 5.0 system has jfs2 support.  Make the necesssary definitions
      # and adjustments.

	rm -f dialects/aix/aix5/j2/j2_snapshot.h
	(cd dialects/aix/aix5/j2; ln -s private_j2_snapshot.h j2_snapshot.h)
	LSOF_CFGF="$LSOF_CFGF -DHAS_JFS2"
	LSOF_CFGF="$LSOF_CFGF -I`pwd`/dialects/aix/aix5"
	if test $LSOF_VERS -ge 5200	# {
	then
	  if test -r ${LSOF_INCLUDE}/j2/j2_snapshot.h	# {
	  then

	  # The system has its own j2_snapshot.h, so make sure the
	  # private lsof copy is discarded.

	    rm -f dialects/aix/aix5/j2/j2_snapshot.h
	  fi	# }
	  echo $LSOF_CC | grep gcc > /dev/null
	  if test $? -eq 0	# {
	  then

	  # Test gcc version for AIX 5.2.

	    LSOF_TMP1=`echo $LSOF_CCV | awk -F . '{printf "%d%02d",$1,$2}'`
	    if test $LSOF_TMP1 -ge 303	# {
	    then

	    # Add gcc >= 3.3 option to handle use of i_dev from the wInode
	    # anonymous structure reference in the JFS2 inode structure of
	    # <j2/j2_inode.h>.

	      LSOF_CFGF="$LSOF_CFGF -fms-extensions"
	    fi	# }
	  fi	#}
	fi	# }
      fi	# }

      # Determine the AIX architecture type and set AIXA accordingly.

      if test "X$AIX_ARCH" = "X"	# {
      then
	uname -a | grep -i ia64 > /dev/null
	if test $? -eq 0	# {
	then
	  AIX_ARCH="ia64"
	else
	  AIX_ARCH=""
	fi	# }
      fi	# }
      if test "X$AIX_ARCH" = "Xia64"	# {
      then

      # This is AIX >= 5 on ia64.

	LSOF_TSTK64=1
	echo $LSOF_CC | grep gcc > /dev/null
	if test $? -eq 0	# {
	then

	# Quit if gcc was specified as the compiler, since the gcc options to
	# do an ia64 lsof compilation are unknown.

	  echo "*************************************************************"
	  echo "*                                                           *"
	  echo "* !!!!!!!!!!!!!!!!!!!!! FATAL ERROR !!!!!!!!!!!!!!!!!!!!!!! *"
	  echo "*                                                           *"
	  echo "* Gcc can't be used to compile lsof for AIX 5 and above on  *"
	  echo "* the ia64 architecture.  Consult lsof's FAQ (in the file   *"
	  echo "* 00FAQ) for more information.                              *"
	  echo "*                                                           *"
	  echo "*************************************************************"
	  rm -f $LSOF_HLP
	  exit 1
	fi	# }
	LSOF_TMP1=2
	if test "X$LSOF_AR" = "X"	# {
	then
	  LSOF_AR="/usr/bin/ar cr"
	fi	# }
	LSOF_CFGF="$LSOF_CFGF -q64"
	LSOF_CFGL="$LSOF_CFGL -lelf"
      else

      # This is AIX >= 5 on Power architecture.

	echo $LSOF_CC | grep cc | grep -v gcc > /dev/null
	if test $? -eq 0	# {
	then
	  LSOF_CFGL="$LSOF_CFGL -bnolibpath"
	fi	# }
	if test "X$AIX_KERNBITS" = "X"	# {
	then

	# The kernel bit size wasn't predefined.  Determine it by compiling
	# and executing a test program.

	  rm -f ${LSOF_TMPC}.*
	  echo "#include <sys/systemcfg.h>" > ${LSOF_TMPC}.c
	  echo 'main(){ if (__KERNEL_32()) printf("32\\n");' >> ${LSOF_TMPC}.c
	  echo 'else if (__KERNEL_64()) printf("64\\n");' >> ${LSOF_TMPC}.c
	  echo 'else printf("0\\n");' >> ${LSOF_TMPC}.c
	  echo "return(0); }" >> ${LSOF_TMPC}.c
	  echo "Testing kernel bit size with $LSOF_CC"
	  $LSOF_CC ${LSOF_TMPC}.c -o ${LSOF_TMPC}.x
	  if test ! -x ${LSOF_TMPC}.x	# {
	  then
	    echo "!!!FATAL: can't compile test program, ${LSOF_TMPC}.c."
	    rm -f $LSOF_HLP rm -f ${LSOF_TMPC}.*
	    exit 1
	  fi	# }
	  AIX_KERNBITS=`./${LSOF_TMPC}.x`
	  rm -f ${LSOF_TMPC}.*
	fi	# }

      # Use the kernel bit size specification to select archiver and compiler
      # options, and to update AIXA.

	case $AIX_KERNBITS in	# {
	32)
	  if test "X$LSOF_AR" = "X"	# {
	  then
	    LSOF_AR="/usr/bin/ar cr"
	  fi	# }
	  LSOF_TMP1=0
	  ;;
	64)
	  if test "X$LSOF_AR" = "X"	# {
	  then
	    LSOF_AR="/usr/bin/ar -X 64 -v -q"
	  fi	# }
	  LSOF_TSTK64=1
	  LSOF_TMP1=1
	  echo $LSOF_CC | grep gcc > /dev/null
	  if test $? -eq 0	# {
	  then
	    LSOF_CFGF="$LSOF_CFGF -maix64"
	  else
	    LSOF_CFGF="$LSOF_CFGF -q64"
	  fi	# }
	  ;;
	*)
	  echo "!!!FATAL: unrecognized kernel bit size: $AIX_KERNBITS"
	  rm -f $LSOF_HLP
	  exit 1
	esac	# }

      # Put kernel bit size information in $LSOF_CINFO and $LSOF_CFGF.

	echo "Kernel bit size: $AIX_KERNBITS"
	LSOF_TMP2="${AIX_KERNBITS} bit kernel"
	if test "X$LSOF_CINFO" != "X"	# {
	then
	  LSOF_CINFO="${LSOF_CINFO}  ${LSOF_TMP2}"
	else
	  LSOF_CINFO="${LSOF_TMP2}"
	fi	# }
	LSOF_CFGF="$LSOF_CFGF -DAIX_KERNBITS=${AIX_KERNBITS}"
      fi	# }
      LSOF_CFGF="$LSOF_CFGF -DAIXA=$LSOF_TMP1"
      if test "X$LSOF_TSTDFLG" = "X"	# {
      then
	LSOF_TSTDFLG="-DLT_AIXA=$LSOF_TMP1"
      else
	LSOF_TSTDFLG="$LSOF_TSTDFLG -DLT_AIXA=$LSOF_TMP1"
      fi	# }
    else

    # AIX is < 5, so set AIXA accordingly.

      LSOF_CFGF="$LSOF_CFGF -DAIXA=0"
      if test "X$LSOF_TSTDFLG" = "X"	# {
      then
	LSOF_TSTDFLG="-DLT_AIXA=0"
      else
	LSOF_TSTDFLG="$LSOF_TSTDFLG -DLT_AIXA=0"
      fi	# }
    fi	#}
    LSOF_CFGF="$LSOF_CFGF -DAIXV=$LSOF_VERS"
    LSOF_DIALECT_DIR=aix
    echo $LSOF_CC | grep gcc > /dev/null
    if test $? -eq 0 	# {
    then

    # Do gcc tests.

      if test $LSOF_VERS -ge 4100 -a $LSOF_VERS -lt 4200	# {
      then
	if test "X$AIX_USHACK" = "X"	# {
	then

	  # Compile and run a gcc test program to evaluate the user structure.

	  rm -f ${LSOF_TMPC}.*
	  echo "#include <stddef.h>" > ${LSOF_TMPC}.c
	  echo "#include <sys/user.h>" >> ${LSOF_TMPC}.c
	  echo "main(){exit((offsetof(struct user, U_irss) & 0x7) ? 1 : 0);}" >>${LSOF_TMPC}.c
	  echo "Testing user.h with $LSOF_CC"
	  $LSOF_CC ${LSOF_TMPC}.c -o ${LSOF_TMPC}.x
	  if ! ${LSOF_TMPC}.x	# {
	  then
	    LSOF_TMP1=1
	  else
	    LSOF_TMP1=0
	  fi	# }
	  rm -f ${LSOF_TMPC}.*
	else
	  if test "$AIX_USHACK" = "Y" -o "$AIX_USHACK" = "y"	# {
	  then
	    LSOF_TMP1=1
	  else
	    LSOF_TMP1=0
	  fi	# }
	fi	# }
	if test ${LSOF_TMP1} -eq 1	# {
	then
	  echo "Applying gcc AIX 4.1+ user struct alignment hack"
	  rm -rf ./dialects/aix/aix$LSOF_VERS
	  mkdir ./dialects/aix/aix$LSOF_VERS
	  mkdir ./dialects/aix/aix${LSOF_VERS}/sys
	    sed 's/U_irss\[/dummy_for_alignment, U_irss\[/' < ${LSOF_INCLUDE}/sys/user.h > ./dialects/aix/aix${LSOF_VERS}/sys/user.h
	    LSOF_CFGF="$LSOF_CFGF -U_LONG_LONG -I`pwd`/dialects/aix/aix$LSOF_VERS"
	fi	# }
      fi	# }
    else

      # Get xlc version number

      rm -f ${LSOF_TMPC}.*
      echo "main(){}" > ${LSOF_TMPC}.c
      echo "Getting version number of ${LSOF_CC}."
      $LSOF_CC -c ${LSOF_TMPC}.c -I${LSOF_INCLUDE} -o ${LSOF_TMPC}.o -qlist > /dev/null 2>&1
      LSOF_CCV=`head -1 ${LSOF_TMPC}.lst | sed 's/\(.*\) ---.*/\1/'`
      rm ${LSOF_TMPC}.*
      echo "The version is \"${LSOF_CCV}\"."
      echo $LSOF_CCV | grep "Version [0-9]" > /dev/null
      if test $? -eq 0	# {
      then
	LSOF_TMP=`echo $LSOF_CCV | sed 's/.*Version \([0-9]*\).*/\1/'`
	if test "X$LSOF_TMP" != "X" -a $LSOF_TMP -ge 4    # {
	then
	  if test $LSOF_TMP -ge 6	# {
	  then
	    LSOF_CFGF="$LSOF_CFGF -qmaxmem=-1"
	  else
	    LSOF_CFGF="$LSOF_CFGF -qmaxmem=16384"
	  fi	# }
	fi	# }
      fi	# }
    fi	# }
    if test $LSOF_VERS -ge 5300	# {
    then
      LSOF_UNSUP=""
    fi	# }
    ;;

# Configure for Apple Darwin.

  darwin)
    if test "X$LSOF_CC" = "X"	# {
    then
      LSOF_CC=cc
      LSOF_CCV=`$LSOF_CC -v 2>&1 | sed -n 's/.*version \(.*\)/\1/p'`
    fi	# }
    if test "X$LSOF_VSTR" = "X"	# {
    then
      LSOF_VSTR=`uname -r`
    fi	# }
    if test "X$LSOF_VERS" = "X"	# {
    then

    # If the Darwin / Mac OS X version isn't pre-defined, determine it.

      case $LSOF_VSTR in	# {
      1.2*)
	LSOF_VERS=120
	;;
      1.3*)
	LSOF_VERS=130
	;;
      1.4*)
	LSOF_VERS=140
	;;
      5.[012]*)
	LSOF_VERS=500
	;;
      5.[3-9]*)
	LSOF_VERS=530
	;;
      6.*)
	LSOF_VERS=600
	;;
      7.*)			# Mac OS X 10.3 (Panther)
	LSOF_VERS=700
	;;
      8.*)			# Mac OS X 10.4 (Tiger)
	LSOF_VERS=800
	;;
      9.*)			# Mac OS X 10.5 (Leopard)
	LSOF_VERS=900
 	;;
      10.*)			# Mac OS X 10.6 (SnowLeopard)
 	LSOF_VERS=1000
 	;;
      11.*)			# Mac OS X 10.7 (Lion)
 	LSOF_VERS=1100
 	;;
      12.*)			# Mac OS X 10.8 (Mountain Lion)
 	LSOF_VERS=1200
 	;;
      13.*)			# Next Mac OS X
	LSOF_VERS=1300
	;;
      *)
	echo Unknown Darwin release: `uname -r`
	echo Assuming Darwin 12.0
	LSOF_VERS=1200
	;;
      esac	# }
    fi	# }

    # Do Darwin version-specific stuff.

    case $LSOF_VERS in	# {
    120|130)
      LSOF_TMP1="hfs/hfs.h hfs/hfs_macos_defs.h miscfs/devfs/devfsdefs.h miscfs/devfs/devfs_proto.h miscfs/fdesc/fdesc.h"
      ;;
    140|500)
      LSOF_TMP1="hfs/hfs.h hfs/hfs_macos_defs.h hfs/rangelist.h miscfs/devfs/devfsdefs.h miscfs/devfs/devfs_proto.h miscfs/fdesc/fdesc.h"
      ;;
    530)
      LSOF_TMP1="hfs/hfs.h hfs/hfs_macos_defs.h hfs/rangelist.h miscfs/devfs/devfsdefs.h miscfs/devfs/devfs_proto.h miscfs/fdesc/fdesc.h net/ndrv.h net/ndrv_var.h"
      ;;
    600)
      LSOF_CFGF="$LSOF_CFGF -DHASIPv6"
      LSOF_TMP1="hfs/hfs.h hfs/hfs_catalog.h hfs/hfs_cnode.h hfs/hfs_macos_defs.h hfs/rangelist.h miscfs/devfs/devfsdefs.h miscfs/devfs/devfs_proto.h miscfs/fdesc/fdesc.h net/ndrv_var.h net/raw_cb.h netinet/ip_var.h netinet/tcp_var.h"
      ;;
    700)
      LSOF_CFGF="$LSOF_CFGF -DHASIPv6"
      LSOF_TMP1="hfs/hfs.h hfs/hfs_catalog.h hfs/hfs_cnode.h hfs/hfs_macos_defs.h hfs/rangelist.h miscfs/devfs/devfsdefs.h miscfs/devfs/devfs_proto.h miscfs/fdesc/fdesc.h net/ndrv_var.h net/raw_cb.h netinet/ip_var.h netinet/tcp_var.h sys/eventvar.h"
      ;;
    800)
      LSOF_CFGF="$LSOF_CFGF -DHASIPv6"
      LSOF_TMP1="net/ndrv_var.h net/raw_cb.h netinet/ip_var.h netinet/tcp_var.h sys/eventvar.h sys/file_internal.h sys/mount_internal.h sys/proc_internal.h sys/vnode_internal.h"
      ;;
    900|1000|1100|1200)
      LSOF_CFGF="$LSOF_CFGF -DHASIPv6"
      LSOF_TMP1=""
      LSOF_UNSUP=""
      LSOF_TSTBIGF=" "			# enable LTbigf test
      if test $LSOF_VERS -eq 900	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DNEEDS_MACH_PORT_T"
      fi	# }
      ;;
    1300)
      LSOF_CFGF="$LSOF_CFGF -DHASIPv6"
      LSOF_TMP1=""
      ;;
    *)
      echo "Unsupported Darwin version: $LSOF_VERS"
      rm -f $LSOF_HLP
      exit 1
      ;;
    esac	# }
    LSOF_TMP2=""
    LSOF_TMP3=""
    LSOF_TMP4=""
    LSOF_CFGF="$LSOF_CFGF -mdynamic-no-pic"
    LSOF_CFGL="$LSOF_CFGL -lcurses"

    if test "X$DARWIN_XNUDIR" != "X"	# {
    then
      LSOF_TMP2="${DARWIN_XNUDIR}/bsd"
      LSOF_TMP3="${DARWIN_XNUDIR}/osfmk"
      LSOF_TMP4=""
    else
      LSOF_TMP2="${DARWIN_XNU_HEADERS}/System/Library/Frameworks/Kernel.framework/Versions/A/PrivateHeaders"
      LSOF_TMP3="${DARWIN_XNU_HEADERS}/System/Library/Frameworks/System.framework/Versions/B/PrivateHeaders"
      LSOF_TMP4=""
      if test "X$DARWIN_XNU_HEADERS" != "X"	# {
      then
	LSOF_TMP4="${DARWIN_XNU_HEADERS}/usr/include"
      fi	# }
    fi	# }

    # Test Darwin base.

    if test "X$DARWIN_BASE" = "X" -o "X$DARWIN_BASE" = "Xlibproc"	# {
    then
      LSOF_TMP5=""
      if test $LSOF_VERS -ge 800 -o "X$DARWIN_BASE" = "Xlibproc"	# {
      then
	if test -r ${LSOF_INCLUDE}/libproc.h	# {
	then
	    DARWIN_BASE="libproc"
	else
	  if test -r ${LSOF_INCLUDE}/../local/include/libproc.h	# {
	  then
	    DARWIN_BASE="libproc"
	    LSOF_TMP5="-I${LSOF_INCLUDE}/../local/include"
	  else
	    echo "FATAL: can't find libproc.h"
	    rm -f $LSOF_HLP
	    exit 1
	  fi	# }
	fi	# }
      else

      # The default Darwin base is /dev/kmem.

	DARWIN_BASE="/dev/kmem"
      fi	# }
    fi	# }
    if test "X$DARWIN_BASE" = "Xlibproc"	# {
    then

    # Configure for libproc-based Darwin lsof.

      echo "Configuring libproc-based Darwin lsof"
      LSOF_CINFO="libproc-based"
      LSOF_DIALECT_DIR=darwin/libproc
      if test $LSOF_VERS -lt 1000 	# {
      then
	LSOF_CFGL="$LSOF_CFGL -lproc"
      fi	# }
      LSOF_TSTKMEM=0
      LSOF_DINC="$LSOF_DINC $LSOF_TMP5"
      if test ! -r ${LSOF_INCLUDE}/sys/proc_info.h	# {
      then
	if test "X$LSOF_TMP5" = "X" -o ! -r ${LSOF_TMP5}/sys/proc_info.h # {
	then
	  echo "FATAL: can't find sys/proc_info.h"
	  rm -f $LSOF_HLP
	  exit 1
	fi	# }
      fi	# }

    # Add header file paths for libproc-based Darwin lsof.

      for i in $LSOF_TMP3 $LSOF_TMP4 $LSOF_INCLUDE	# {
      do
	if test -d $i -a "X$i" != "X/usr/include"	# {
	then
	  LSOF_DINC="$LSOF_DINC -I${i}"
	fi	# }
      done	# }

    # Do other libproc-based Darwin lsof setups.
      
      if test -r ${LSOF_INCLUDE}/utmpx.h	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASUTMPX"
      fi	# }
    else
      if test "X$DARWIN_BASE" != "X/dev/kmem"	# {
      then
	echo "Darwin base unrecognized: $DARWIN_BASE"
	rm -f $LSOF_HLP
	exit 1
      fi	# }
    
    # Configure for /dev/kmem-based Darwin lsof.

      echo "Configuring /dev/kmem-based Darwin lsof"
      LSOF_CINFO="/dev/kmem-based"
      LSOF_DIALECT_DIR=darwin/kmem

    # Make sure needed /dev/kmem-base XNU Darwin kernel header files are
    # present.

      LSOF_TMP5=""
      for i in $LSOF_TMP1	# {
      do
	LSOF_TMP6=0
	for j in $LSOF_TMP2 $LSOF_TMP3 $LSOF_TMP4 $LSOF_INCLUDE	# {
	do
	  if test "X${j}" != "X" -a -r ${j}/${i}  # {
	  then
	    LSOF_TMP6=1
	    break
	  fi	# }
	done	# }
	if test $LSOF_TMP6 -ne 1	# {
	then
	  if test "X$LSOF_TMP5" = "X"	# {
	  then
	    LSOF_TMP5=$i
	  else
	    LSOF_TMP5="$LSOF_TMP5 $i"
	  fi	# }
	fi			# }
      done	# }
      if test "X$LSOF_TMP5" != "X"	# {
      then

      # If any Darwin XNU kernel header files are missing, call the
      # get-hdr-loc.sh script to find the path.

	LSOF_TMP6=`pwd`/dialects/darwin/get-hdr-loc.sh
	if test ! -x $LSOF_TMP6	# {
	then
	  echo "FATAL: can't execute: $LSOF_TMP6"
	  rm -f $LSOF_HLP
	  exit 1
	fi	# }
	DARWIN_XNUDIR=`$LSOF_TMP6 $LSOF_TMP5`
	if test $? -ne 0	# {
	then
	  echo "FATAL: $LSOF_TMP6 returns: $DARWIN_XNUDIR"
	  rm -f $LSOF_HLP
	  exit 1
	fi	# }
	LSOF_TMP2="${DARWIN_XNUDIR}/bsd"
	LSOF_TMP3="${DARWIN_XNUDIR}/osfmk"
	LSOF_TMP4=""
      fi	# }

    # Add header file paths for /dev/kmem-based Darwin lsof.

      for i in $LSOF_TMP2 $LSOF_TMP3 $LSOF_TMP4 $LSOF_INCLUDE	# {
      do
	if test -d $i -a "X$i" != "X/usr/include"	# {
	then
	  LSOF_DINC="$LSOF_DINC -I${i}"
	fi	# }
      done	# }

    # Make conditional feature definitions for /dev/kmem-based Darwin lsof.

      for i in $LSOF_TMP2 $LSOF_TMP3 $LSOF_TMP4 $LSOF_INCLUDE      # {
      do
	if test "X${i}" != "X" -a -r ${i}/sys/namei.h	# {
	then
	  grep -q nc_vpid ${i}/sys/namei.h
	  if test $? -eq 0	# {
	  then
	    LSOF_CFGF="$LSOF_CFGF -DHASNCVPID"
	  fi	# }
	  break
	fi	# }
      done	# }
      for i in $LSOF_TMP2 $LSOF_TMP3 $LSOF_TMP4 $LSOF_INCLUDE	# {
      do
	if test "X${i}" != "X"	# {
	then
	  if test $LSOF_VERS -ge 800	# {
	  then
	    if test -r ${i}/sys/file_internal.h	# {
	    then
	      grep -q DTYPE_KQUEUE ${i}/sys/file_internal.h
	      if test $? -eq 0	# {
	      then
	        LSOF_CFGF="$LSOF_CFGF -DHASKQUEUE"
	      fi	# }
	      break
	    fi	# }
	  else
	    if test $LSOF_VERS -ge 700	# {
	    then
	      if test -r ${i}/sys/file.h	# {
	      then
	        grep -q DTYPE_KQUEUE ${i}/sys/file.h
	        if test $? -eq 0	# {
	        then
	          LSOF_CFGF="$LSOF_CFGF -DHASKQUEUE"
	        fi	# }
	      fi	# }
	      break
	    fi	# }
	  fi	# }
	fi	# }
      done	# }
      LSOF_CFGF="$LSOF_CFGF -DHAS9660FS"
    fi	# }
    LSOF_CFGF="$LSOF_CFGF -DDARWINV=$LSOF_VERS"
    LSOF_CFLAGS_OVERRIDE=1
    ;;

# Configure for DEC OSF/1, Digital UNIX, or Tru64 UNIX.

  digital_unix|du|decosf|tru64)
    LSOF_TGT="du"
    LSOF_TSTBIGF=" "
    LSOF_TSTK64=1
    if test "X$LSOF_DINC" = "X"	# {
    then
      LSOF_DINC="-I/usr/include"
    fi	# }
    if test "X$LSOF_VSTR" = "X"	# {
    then
      LSOF_VSTR=`uname -r`
    fi	# }
    if test "X$LSOF_VERS" = "X"	# {
    then

      # If the DEC OSF/1, Digital UNIX, or Tru64 UNIX version isn't
      # predefined, determine it.

      case $LSOF_VSTR in	# {
      V2.0)
	LSOF_VERS=20000
	;;
      V3.0)
	LSOF_VERS=30000
	;;
      V3.2)
	LSOF_VERS=30200
	;;
      ?4.0)
	LSOF_TSTXO="../lib/snpf.o"
	LSOF_VERS=40000
	;;
      ?5.0)
	LSOF_VERS=50000
	;;
      ?5.1)
	LSOF_VERS=50100
	;;
      *)
	echo "WARNING: unknown version; assuming version is 2.0"
	LSOF_VERS=20000
	;;
      esac	# }
    fi	# }

    # Do DEC OSF/1, Digital UNIX, or Tru64 UNIX version specific stuff.

    case $LSOF_VERS in	# {
      20000)
	LSOF_CFGF="$LSOF_CFGF -Olimit 1024"
	LSOF_TMP1="/sys"
	;;
      30000)
	LSOF_CFGF="$LSOF_CFGF -Olimit 1024"
	LSOF_TMP1="/sys"
	LSOF_TMP2=-DUSELOCALREADDIR
	;;
      30200)
	LSOF_CFGF="$LSOF_CFGF -Olimit 1024"
	LSOF_TMP1="/sys"
	LSOF_TMP2=-DUSELOCALREADDIR
	;;
      40000)
	LSOF_TMP1="/usr/sys"
	;;
      50000|50100)
	LSOF_CFGF="$LSOF_CFGF -DUSE_STAT"
	LSOF_TMP1="/usr/sys"
	;;
      *)
	echo "WARNING: unknown version: $LSOF_VERS"
	rm -f $LSOF_HLP
	exit 1
	;;
    esac	# }
    if test "X$DU_SYSDIR" = "X"	# {
    then
      DU_SYSDIR=$LSOF_TMP1
    fi	# }
    LSOF_HOST=`uname -n`
    if test "X$DU_CDIR" = "X"	# {
    then
      LSOF_CDIR=`expr $LSOF_HOST : '\([^\.]*\)\..*$'`
      if test "X$LSOF_CDIR" = "X"	# {
      then
	LSOF_CDIR=$LSOF_HOST
      fi	# }
      LSOF_CDIR=`echo $LSOF_CDIR | tr a-z A-Z`
    else
      LSOF_CDIR=$DU_CDIR
    fi	# }
    LSOF_LOOP=1
    while test $LSOF_LOOP = 1	# {
    do
      if test -d ${DU_SYSDIR}/$LSOF_CDIR	# {
      then
	echo "Using header files in ${DU_SYSDIR}/$LSOF_CDIR"
	LSOF_LOOP=0
      else
	cat << .CAT_MARK

Please enter the name of the subdirectory in $DU_SYSDIR that contains the
configuration files for this host.  Usually its name would be $LSOF_CDIR, but
that subdirectory doesn't seem to exist.  The lsof compilation needs header
files specific to this machine's configuration found in that directory.

If you can't specify the appropriate configuration subdirectory, quit this
Configure step now and generate a proper configuration subdirectory with the
kernel generation process.

.CAT_MARK

	echo "$DU_SYSDIR contains:"
	echo ""
	ls -CF $DU_SYSDIR
	echo ""
	echo -n "Configuration subdirectory name? "
	read LSOF_CDIR LSOF_EXCESS
	if test "X$LSOF_CDIR" = "X" -o ! -d ${DU_SYSDIR}/$LSOF_CDIR	# {
	then
	  echo ""
	  echo Cannot access directory ${DU_SYSDIR}/$LSOF_CDIR.
	fi	# }
      fi	# }
    done	# }

    # Determine the ADVFS file system version.

    if test "X$DU_ADVFSV" = "X"	# {
    then
      echo "Determining the ADVFS version -- this will take a while."
      LSOF_ADVFSV=`/usr/sbin/setld -i | grep "^OSFADVFSBIN[0-9]" | sed 's/\([^ ]*\).*/\1/' | sort -u | tail -1 | sed 's/OSFADVFSBIN//'`
    else
      LSOF_ADVFSV=$DU_ADVFSV
    fi	# }
    case $LSOF_ADVFSV in	# {
    1*)
      LSOF_ADVFSV=100
      echo "The ADVFS version is 1."
      ;;
    2*)
      LSOF_ADVFSV=200
      echo "The ADVFS version is 2."
      ;;
    3*)
      LSOF_ADVFSV=300
      echo "The ADVFS version is 3."
      ;;
    4*)
      LSOF_ADVFSV=400
      echo "The ADVFS version is 4."
      ;;
    5*)
      LSOF_ADVFSV=500
      echo "The ADVFS version is 5."
      ;;
    *)
      echo "The ADVFS version is unknown; it will be assumed to be 1."
      LSOF_ADVFSV=100
      ;;
    esac	# }
    LSOF_CFGF="$LSOF_CFGF -DDUV=$LSOF_VERS -DADVFSV=$LSOF_ADVFSV $LSOF_TMP2"
    if test "X$DU_SYSINC" = "X"	# {
    then
      DU_SYSINC="/usr/sys/include"
    fi	# }
    LSOF_DINC="$LSOF_DINC -I${DU_SYSDIR}/$LSOF_CDIR -I$DU_SYSINC"
    LSOF_CFGL="$LSOF_CFGL -lmld"
    if test "X${DU_SHLIB}" = "X"	# {
    then
      DU_SHLIB=/usr/shlib
    fi	# }
    if test -r ${DU_SHLIB}/libmsfs.so	# {
    then
      nm ${DU_SHLIB}/libmsfs.so | grep tag_to_path > /dev/null 2>&1
      if test $? -eq 0	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASTAGTOPATH"
	LSOF_CFGL="$LSOF_CFGL -lmsfs"
      fi	# }
    fi	# }
    grep "^struct spec_node {" ${DU_SYSDIR}/include/sys/specdev.h > /dev/null 2>&1
    if test $? -eq 0	# {
    then
      LSOF_CFGF="$LSOF_CFGF -DHASSPECNODE"
    fi	# }
    if test $LSOF_VERS -ge 50000	# {
    then

    # Make du5_sys_malloc.h for DU 5.0 and above.  Enable strict ANSI checking
    # on 5.0 and 5.1A, but not 5.1B.  Enable IPv6 handling.

      LSOF_TMP1="-std1"
      if test $LSOF_VERS -ge 50100	# {
      then
	LSOF_TMP1="-std"
	if test -x /usr/sbin/sizer	# {
	then
	  /usr/sbin/sizer -v | grep -q 5.1A
	  if test $? -eq 0	# {
	  then
	    LSOF_TMP1="-std1"
	  fi	# }
	fi	# }
      fi	# }
      LSOF_CFGF="$LSOF_CFGF $LSOF_TMP1"
      LSOF_TMP1=${LSOF_INCLUDE}/sys/malloc.h
      if test -r $LSOF_TMP1	# {
      then
	LSOF_TMP2=dialects/du/du5_sys_malloc.h
	rm -f $LSOF_TMP2
	echo "#if !defined(MANUFACTURED_DU5_SYS_MALLOC_H)" > $LSOF_TMP2
	echo "/* By lsof Configure:" `date` " */" >> $LSOF_TMP2
	echo "#define MANUFACTURED_DU5_SYS_MALLOC_H" >> $LSOF_TMP2
	grep "^#define[ 	]MALLOC_NUM_BUCKETS" $LSOF_TMP1 >> $LSOF_TMP2
	echo "struct percpukmembuckets {" >> $LSOF_TMP2
	sed '1,/^struct percpukmembuckets/d' $LSOF_TMP1 | sed -n '1,/^};/p' >> $LSOF_TMP2
	echo "#endif" >> $LSOF_TMP2
	LSOF_CFGF="$LSOF_CFGF -I`pwd`/dialects/du"
      fi	# }

    # Enable IPv6 for Tru64 UNIX 5.0 and above.

      LSOF_CFGF="$LSOF_CFGF -DHASIPv6"
    fi	# }
    if test -r ${LSOF_INCLUDE}/sys/namei.h
    then
      grep -q nc_vpid ${LSOF_INCLUDE}/sys/namei.h
      if test $? -eq 0	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASNCVPID"
      fi	# }
    fi	# }
    LSOF_DIALECT_DIR=du
    ;;

# Configure for FreeBSD.

  freebsd)
    LSOF_FBSD_ZFS=0
    if test "X$LSOF_CC" = "X"	# {
    then
      LSOF_CC=cc
      LSOF_CCV=`$LSOF_CC -v 2>&1 | sed -n 's/.*version \(.*\)/\1/p'`
    fi	# }
    if test "X$LSOF_VSTR" = "X"	# {
    then
      LSOF_VSTR=`uname -r`
    fi	# }
    if test "X$LSOF_VERS" = "X"	# {
    then

    # If the FreeBSD version isn't pre-defined, determine it.

      case $LSOF_VSTR in	# {
      1.*)
	LSOF_VERS=1000
	;;
      2.0-*)
	LSOF_VERS=2000
	;;
      2.0.5-*)
	LSOF_VERS=2005
	;;
      2.1*)
	LSOF_VERS=2010
	;;
      2.2*)
	LSOF_VERS=2020
	;;
      3.0*)
	LSOF_VERS=3000
	;;
      3.1*)
	LSOF_VERS=3010
	;;
      3.2*)
	LSOF_VERS=3020
	;;
      3.3*)
	LSOF_VERS=3030
	;;
      3.4*)
	LSOF_VERS=3040
	;;
      3.5*)
	LSOF_VERS=3050
	;;
      3*)
	LSOF_VERS=3050
	echo "!!!WARNING!!!  Unsupported FreeBSD version: $LSOF_VSTR"
	echo "!!!WARNING!!!  Configuring for FreeBSD 3.5"
	;;
      4.0*)
	LSOF_TSTBIGF=" "
	LSOF_VERS=4000
	;;
      4.1-*)
	LSOF_TSTBIGF=" "
	LSOF_VERS=4010
	;;
      4.2*)
	LSOF_TSTBIGF=" "
	LSOF_VERS=4020
	;;
      4.3*)
	LSOF_TSTBIGF=" "
	LSOF_VERS=4030
	;;
      4.4*)
	LSOF_TSTBIGF=" "
	LSOF_VERS=4040
	;;
      4.5*)
	LSOF_TSTBIGF=" "
	LSOF_VERS=4050
	;;
      4.6*)
	LSOF_TSTBIGF=" "
	LSOF_VERS=4060
	;;
      4.7*)
	LSOF_TSTBIGF=" "
	LSOF_VERS=4070
	;;
      4.8*)
	LSOF_TSTBIGF=" "
	LSOF_VERS=4080
	;;
      4.9*)
	LSOF_TSTBIGF=" "
	LSOF_VERS=4090
	;;
      4.10*)
	LSOF_TSTBIGF=" "
	LSOF_VERS=4100
	;;
      4.11*)
	LSOF_TSTBIGF=" "
	LSOF_VERS=4110
	;;
      4*)
	LSOF_VERS=4100
	echo "!!!WARNING!!!  Unsupported FreeBSD version: $LSOF_VSTR"
	echo "!!!WARNING!!!  Configuring for FreeBSD 4.10"
	;;
      5.0*)
	LSOF_TSTBIGF=" "
	LSOF_VERS=5000
	;;
      5.1*)
	LSOF_TSTBIGF=" "
	LSOF_VERS=5010
	;;
      5.2*)
	LSOF_TSTBIGF=" "
	LSOF_VERS=5020
	;;
      5.3*)
	LSOF_TSTBIGF=" "
	LSOF_VERS=5030
	;;
      5.4*)
	LSOF_TSTBIGF=" "
	LSOF_VERS=5040
	;;
      5.5*)
	LSOF_TSTBIGF=" "
	LSOF_VERS=5050
	;;
      5*)
	LSOF_VERS=5050
	echo "!!!WARNING!!!  Unsupported FreeBSD version: $LSOF_VSTR"
	echo "!!!WARNING!!!  Configuring for FreeBSD 5.5"
	;;
      6.0*)
	LSOF_TSTBIGF=" "
	LSOF_VERS=6000
	;;
      6.1*)
	LSOF_TSTBIGF=" "
	LSOF_VERS=6010
	;;
      6.2*)
	LSOF_TSTBIGF=" "
	LSOF_VERS=6020
	;;
      6.3*)
	LSOF_TSTBIGF=" "
	LSOF_VERS=6030
	;;
      6.4*)
	LSOF_TSTBIGF=" "
	LSOF_VERS=6040
	;;
      6*)
	LSOF_VERS=6000
	echo "!!!WARNING!!!  Unsupported FreeBSD version: $LSOF_VSTR"
	echo "!!!WARNING!!!  Configuring for FreeBSD 6.0"
	;;
      7.0*)
	LSOF_TSTBIGF=" "
	LSOF_VERS=7000
	;;
      7.1*)
	LSOF_TSTBIGF=" "
	LSOF_VERS=7010
	;;
      7.2*)
	LSOF_TSTBIGF=" "
	LSOF_VERS=7020
	;;
      7.3*)
	LSOF_TSTBIGF=" "
	LSOF_VERS=7030
	;;
      7.4*)
	LSOF_TSTBIGF=" "
	LSOF_VERS=7040
	;;
      7*)
	LSOF_VERS=7000
	echo "!!!WARNING!!!  Unsupported FreeBSD version: $LSOF_VSTR"
	echo "!!!WARNING!!!  Configuring for FreeBSD 7.0"
	;;
      8.0*)
	LSOF_TSTBIGF=" "
	LSOF_VERS=8000
	;;
      8.1*)
	LSOF_TSTBIGF=" "
	LSOF_VERS=8010
	;;
      8.2*)
	LSOF_TSTBIGF=" "
	LSOF_VERS=8020
	;;
      8.3*)
	LSOF_TSTBIGF=" "
	LSOF_VERS=8030
	;;
      8.4*)
	LSOF_TSTBIGF=" "
	LSOF_VERS=8040
	;;
      9*)
	LSOF_TSTBIGF=" "
	LSOF_VERS=9000
	;;
      10*)
	LSOF_TSTBIGF=" "
	LSOF_VERS=10000
	;;
      11*)
	LSOF_TSTBIGF=" "
	LSOF_VERS=11000
	;;
      12*)
	LSOF_TSTBIGF=" "
	LSOF_VERS=12000
	;;
      *)
	echo Unknown FreeBSD release: `uname -r`
	rm -f $LSOF_HLP
	exit 1
	;;
      esac	# }
    fi	# }

    # Clear LSOF_UNSUP message for supported versions of FreeBSD.
    
    case $LSOF_VERS in  # {
    4090|8020|8030|8040|9000|10000|11000|12000)
      LSOF_UNSUP=""
      ;;
    esac	# }

    # Get system CFLAGS, if possible.

    LSOF_TMP1=`echo "all:\n.include <bsd.prog.mk>" | $LSOF_MAKE -f- -VCFLAGS`
    LSOF_TMP=1
    while test $LSOF_TMP -eq 1	# {
    do
      echo $LSOF_TMP1 | grep -q -e '-O'
      if test $? -eq 0	# {
      then
	if test "X$LSOF_DEBUG" = "X"
	  then	# {
	    LSOF_DEBUG=`echo $LSOF_TMP1 | sed 's/.*\(-O[^ $]*\).*/\1/'`
	 fi	# }
	LSOF_TMP1=`echo $LSOF_TMP1 | sed 's/\(.*\)-O[^ $]*\(.*\)/\1 \2/' | sed 's/^  *//g' | sed 's/  */ /g' | sed 's/  *$//'`
      else
	LSOF_TMP=0
      fi	# }
      LSOF_FBSD_ZFS_CFGF="$LSOF_CFGF $LSOF_TMP1"
    done	# }
    LSOF_CFGF="$LSOF_CFGF $LSOF_TMP1"
    echo $LSOF_CFGF | grep -q NEEDS_BOOL_TYPEDEF
    if test $? -ne 0
    then	# {
      LSOF_CFGF="$LSOF_CFGF -DNEEDS_BOOL_TYPEDEF"
      LSOF_FBSD_ZFS_CFGF="$LSOF_FBSD_ZFS_CFGF -DNEEDS_BOOL_TYPEDEF"
    fi	# }

    # Determine path to FreeBSD sources.

    LSOF_DINC_ADD=0
    if test "X$FREEBSD_SYS" = "X"	# {
    then
      if test -d /usr/src/sys	# {
      then
	FREEBSD_SYS=/usr/src/sys
      else
	if test -d /sys	# {
	then
	  FREEBSD_SYS="/sys"
	else
	  echo "!!!WARNING!!!  No kernel sources in /usr/src/sys or /sys"
	fi	# }
      fi	# }
    fi	# }

    # Test for thread (task) support.

    if test -r ${LSOF_INCLUDE}/sys/user.h	# {
    then
      grep -q ki_numthreads ${LSOF_INCLUDE}/sys/user.h
      if test $? -eq 0	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASTASKS"
      fi	# }
    else
      echo "FATAL: can't find sys/user.h"
      rm -f $LSOF_HLP
      exit 1
    fi	# }

    # Test pause() status in system.h.

    if test -r ${FREEBSD_SYS}/sys/systm.h	# {
    then
      grep -q pause_sbt ${FREEBSD_SYS}/sys/systm.h
      if test $? -eq 0	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHAS_PAUSE_SBT"
      fi	# }
    fi	# }

    # Check the C library for closefrom and dup2.

      if test -r /usr/lib/libc.a	# {
      then
	nm /usr/lib/libc.a | grep -q "W dup2"
	if test $? -eq 0	# {
	then
	  LSOF_CFGF="$LSOF_CFGF -DHAS_DUP2"
	fi	# }
	nm /usr/lib/libc.a | grep -q "W closefrom"
	if test $? -eq 0	# {
	then
	  LSOF_CFGF="$LSOF_CFGF -DHAS_CLOSEFROM"
	fi	# }
      fi	# }

    # Do FreeBSD version-specific stuff.

    case $LSOF_VERS in	# {
    1000)
      LSOF_CFGF="$LSOF_CFGF -DHASPROCFS"
      LSOF_CFGL="$LSOF_CFGL -lutil"
      LSOF_DINC="$LSOF_DINC -I`pwd`/dialects/freebsd/include"
      if test "X$FREEBSD_KERNEL" = "X"	# {
      then
	LSOF_N_UNIXV="/386bsd"
      else
	LSOF_N_UNIXV=$FREEBSD_KERNEL
      fi	# }
      ;;
    2000|2005|2010)
      LSOF_CFGL="$LSOF_CFGL -lkvm"
      ;;
    2020)
      LSOF_CFGL="$LSOF_CFGL -lkvm"
      if test -r ${LSOF_INCLUDE}/vm/lock.h	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASVMLOCKH"
      fi	# }
      ;;
    3000|3010|3020|3030|3040|3050)
      LSOF_CFGL="$LSOF_CFGL -lkvm"
      if test -r ${LSOF_INCLUDE}/nfs/rpcv2.h	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASRPCV2H"
      fi	# }
      if test -r ${LSOF_INCLUDE}/vm/lock.h	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASVMLOCKH"
      fi	# }
      ;;
    *)
      if test -r ${LSOF_INCLUDE}/nfs/rpcv2.h	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASRPCV2H"
      fi	# }
      if test -r ${LSOF_INCLUDE}/sys/namei.h	# {
      then
	grep -q "^struct[ 	]*namecache[ 	]*{" ${LSOF_INCLUDE}/sys/namei.h
	if test $? -eq 0	# {
	then
	  LSOF_CFGF="$LSOF_CFGF -DHASNAMECACHE"
	fi	# }
      fi	# }
      if test -r ${LSOF_INCLUDE}/ufs/ufs/inode.h	# {
      then
	grep -q i_effnlink ${LSOF_INCLUDE}/ufs/ufs/inode.h
	if test $? -eq 0	# {
	then
	  LSOF_CFGF="$LSOF_CFGF -DHASEFFNLINK=i_effnlink"
	fi	# }
      fi	# }
      if test -r ${LSOF_INCLUDE}/sys/file.h	# {
      then
	grep -q f_vnode ${LSOF_INCLUDE}/sys/file.h
	if test $? -eq 0	# {
	then
	  LSOF_CFGF="$LSOF_CFGF -DHASF_VNODE"
	fi	# }
      fi	# }
      LSOF_CFGL="$LSOF_CFGL -lkvm"
      if test $LSOF_VERS -ge 5000	# {
      then

      # Do FreeBSD 5 and higher version-specific stuff.

	if test -r ${LSOF_INCLUDE}/sys/vnode.h	# {
	then
	  grep VT_FDESC ${LSOF_INCLUDE}/sys/vnode.h > /dev/null 2>&1
	  if test $? -eq 0	# {
	  then
	    if test ! -r ${LSOF_INCLUDE}/fs/devfs/devfs.h	# {
	    then
	      if test -r ${FREEBSD_SYS}/fs/devfs/devfs.h	# {
	      then
		LSOF_DINC_ADD=1
	      else
		echo "!!!FATAL: lsof cannot locate the devfs.h header file"
		echo "          in ${LSOF_INCLUDE}/fs/devfs/devfs.h or"
		echo "          ${FREEBSD_SYS}/fs/devfs/devfs.h.  Consult"
		echo "          00FAQ for an explanation."
		rm -f $LSOF_HLP
		exit 1
	      fi	# }
	    fi	# }
	  fi	# }
	fi	# }
	if test -r ${FREEBSD_SYS}/sys/filedesc.h	# {
	then
	  grep -q filedescent ${FREEBSD_SYS}/sys/filedesc.h
	  if test $? -eq 0	# {
	  then
	    LSOF_CFGF="$LSOF_CFGF -DHAS_FILEDESCENT"
	  fi	# }
	fi	# }
	if test -r ${FREEBSD_SYS}/fs/tmpfs/tmpfs.h	# {
	then
	    LSOF_CFGF="$LSOF_CFGF -DHAS_TMPFS"
	fi	#}

      # Do FreeBSD 5.2 and higher version-specific stuff.

	if test -r ${LSOF_INCLUDE}/wctype.h	# {
	then
	  LSOF_CFGF="$LSOF_CFGF -DHASWCTYPE_H"
	fi	# }
	if test $LSOF_VERS -ge 5020	# {
	then

	# Determine the status of the cpumask_t typedef.

	  rm -f ${LSOF_TMPC}.*
	  cat > ${LSOF_TMPC}.c << .LSOF_END_HERE_DOC3
#undef _KERNEL
#include <sys/types.h>
main() {
cpumask_t c;
}
.LSOF_END_HERE_DOC3
	  $LSOF_CC ${LSOF_TMPC}.c -o ${LSOF_TMPC}.x > /dev/null 2>&1
	  LSOF_TMP1=$?
	  rm -f ${LSOF_TMPC}.*
	  if test $LSOF_TMP1 -ne 0	# {
	  then

	  # The cpumask_t typedef is unknown when _KERNEL is not defined.

	    if test -r ${LSOF_INCLUDE}/sys/types.h \
		    -a -r ${LSOF_INCLUDE}/machine/_types.h	# {
	    then
	      grep -q cpumask_t ${LSOF_INCLUDE}/sys/types.h
	      if test $? -eq 0	# {
	      then
	        grep -q __cpumask_t ${LSOF_INCLUDE}/machine/_types.h
	        if test $? -eq 0	# {
	        then
		  LSOF_CFGF="$LSOF_CFGF -DHASCPUMASK_T"
	        else
		  $LSOF_CC -E ${LSOF_INCLUDE}/machine/_types.h 2>/dev/null | grep -q __cpumask_t
		  if test $? -eq 0  # {
		  then
		    LSOF_CFGF="$LSOF_CFGF -DHASCPUMASK_T"
		  fi	# }
	        fi	# }
	      fi	# }
	    fi	# }
	  fi	# }
	  if test -r ${LSOF_INCLUDE}/sys/socketvar.h	# {
	  then
	    grep -q SBS_CANT ${LSOF_INCLUDE}/sys/socketvar.h
	    if test $? -eq 0	# {
	    then
		LSOF_CFGF="$LSOF_CFGF -DHASSBSTATE"
	    fi	# }
	  fi	# }
	fi	# }
	if test $LSOF_VERS -ge 5030	# {
	then

	# Do FreeBSD 5.3 and higher version-specific stuff.

	  if test -r ${LSOF_INCLUDE}/sys/vnode.h	# {
	  then
	    grep -q "defined(_KVM_VNODE)" ${LSOF_INCLUDE}/sys/vnode.h
	    if test $? -eq 0	# {
	    then
		LSOF_CFGF="$LSOF_CFGF -DHAS_KVM_VNODE"
	    fi	#}
	  fi	# }
	fi	# }
	if test $LSOF_VERS -ge 6000	# {
	then

	# Do FreeBSD 6.0 and higher version-specific stuff.

	  if test -r ${LSOF_INCLUDE}/sys/_types.h	# {
	  then
	    grep __dev_t ${LSOF_INCLUDE}/sys/_types.h | grep -q 64
	    if test $? -eq 0	# {
	    then
	      if test "X$LSOF_TSTDFLG" = "X"	# {
	      then
		LSOF_TSTDFLG="-DLT_DEV64"
	      else
		LSOF_TSTDFLG="$LSOF_TSTDFLG -DLT_DEV64"
	      fi	# }
	    fi	# }
	  fi	# }
	  if test -r ${LSOF_INCLUDE}/ufs/ufs/inode.h	# {
	  then
	    grep -q i_din2 ${LSOF_INCLUDE}/ufs/ufs/inode.h
	    if test $? -eq 0	# {
	    then
	      LSOF_CFGF="$LSOF_CFGF -DHAS_UFS1_2"
	    fi	# }
	    grep -q i_dev ${LSOF_INCLUDE}/ufs/ufs/inode.h
	    if test $? -ne 0	# {
	    then
	      LSOF_CFGF="$LSOF_CFGF -DHAS_NO_IDEV"
	    fi	# }
	  fi	# }
	  if test -r ${LSOF_INCLUDE}/sys/conf.h	# {
	  then
	    grep -q vm_memattr_t ${LSOF_INCLUDE}/sys/conf.h
	    if test $? -eq 0	#{
	    then
	      LSOF_CFGF="$LSOF_CFGF -DHAS_VM_MEMATTR_T"
	    fi	# }
	    grep -q device_t ${LSOF_INCLUDE}/sys/eventhandler.h
	    if test $? -eq 0	# {
	    then
	      LSOF_CFGF="$LSOF_CFGF -DNEEDS_DEVICE_T"
	    fi	# }
	    grep -q "^#define	minor(" ${LSOF_INCLUDE}/sys/conf.h
	    if test $? -eq 0	# {
	    then
	      LSOF_CFGF="$LSOF_CFGF -DHAS_CONF_MINOR"
	      rm -f fbsd_minor.h
	      if test -r ${LSOF_INCLUDE}/sys/types.h	# {
	      then
		LSOF_TMP1=`grep "^#define[ 	]minor(" ${LSOF_INCLUDE}/sys/types.h`
		if test "X$LSOF_TMP1" != "X"	# {
		then
		  echo "Creating fbsd_minor.h"
		  cat > fbsd_minor.h << FBSD_MINOR1
/*
 * fbsd_minor.h -- created by lsof Configure script on
FBSD_MINOR1
		  echo $EO " * $EC" >> ./fbsd_minor.h
		  date >> ./fbsd_minor.h
		  cat >> ./fbsd_minor.h << FBSD_MINOR2
 */

#if	!defined(FBSD_MINOR_H)
#define	FBSD_MINOR_H

FBSD_MINOR2
		  echo $EO "${LSOF_TMP1}${EC}" >> fbsd_minor.h
		  cat >> ./fbsd_minor.h << FBSD_MINOR3

#endif	/* defined(FBSD_MINOR_H) */
FBSD_MINOR3
		fi	# }
	      fi	# }
	    else
	      if test -r ${FREEBSD_SYS}/fs/devfs/devfs_int.h	# {
	      then
		grep -q cdev2priv ${FREEBSD_SYS}/fs/devfs/devfs_int.h
		if test $? -eq 0	# {
		then
		  LSOF_CFGF="$LSOF_CFGF -DHAS_CDEV2PRIV"
		fi	# }
	      fi	# }
	    fi	# }
	    grep -q "si_udev;" ${LSOF_INCLUDE}/sys/conf.h
	    if test $? -ne 0	# {
	    then
	      LSOF_CFGF="$LSOF_CFGF -DHAS_NO_SI_UDEV"
	    fi	# }
	    grep -q si_priv ${LSOF_INCLUDE}/sys/conf.h
	    if test $? -eq 0	# {
	    then
	      LSOF_CFGF="$LSOF_CFGF -DHAS_SI_PRIV"
	    fi	# }
	  fi	# }
	  if test -r ${LSOF_INCLUDE}/sys/sx.h	# {
	  then
	    LSOF_CFGF="$LSOF_CFGF -DHAS_SYS_SX_H"
	  fi	# }

	# Do FUSE file system test,

	  if test -r ${FREEBSD_SYS}/fs/fuse/fuse_node.h	# {
	  then
	    LSOF_CFGF="$LSOF_CFGF -DHASFUSEFS"
	  fi	# }
	# Do ZFS test.  Try for the newer OpenSolaris files first -- i.e.,
	# the ones in ${FREEBSD_SYS}/cddl/contrib/opensolaris.  If that fails,
	# try for the older ones in ${FREEBSD}/contrib/opensolaris.

	  LSOF_FBSD_ZFS_SYS=${FREEBSD_SYS}/cddl
	  if test ! -r ${LSOF_FBSD_ZFS_SYS}/contrib/opensolaris/uts/common/fs/zfs/sys/zfs_znode.h	# {
	  then
	    LSOF_FBSD_ZFS_SYS=${FREEBSD_SYS}
	    if test ! -r ${LSOF_FBSD_ZFS_SYS}/contrib/opensolaris/uts/common/fs/zfs/sys/zfs_znode.h	# {
	    then
	      LSOF_FBSD_ZFS_SYS=""
	    fi	# }
	  fi	# }
	  if test "X$LSOF_FBSD_ZFS_SYS" != "X"	# {
	  then
	    LSOF_CFGF="$LSOF_CFGF -DHAS_ZFS"
	    LSOF_FBSD_ZFS=1
	    LSOF_FBSD_ZFS_CFGF="$LSOF_FBSD_ZFS_CFGF -DFREEBSDV=$LSOF_VERS"
	    LSOF_FBSD_ZFS_CFGF="$LSOF_FBSD_ZFS_CFGF -DHAS_ZFS"
	    grep -q z_phys ${LSOF_FBSD_ZFS_SYS}/contrib/opensolaris/uts/common/fs/zfs/sys/zfs_znode.h
	    if test $? -eq 0	# {
	    then
	      LSOF_FBSD_ZFS_CFGF="$LSOF_FBSD_ZFS_CFGF -DHAS_Z_PHYS"
	    fi	# }
	    if test -r ${LSOF_FBSD_ZFS_SYS}/compat/opensolaris/sys/sdt.h  #{
	    then
	      grep -q opt_kdtrace.h ${LSOF_FBSD_ZFS_SYS}/compat/opensolaris/sys/sdt.h
	      if test $? -eq 0	# {
	      then
		rm -f opt_kdtrace.h
		touch opt_kdtrace.h
	      fi	# }
	    fi	# }
	    if test -r ${LSOF_FBSD_ZFS_SYS}/compat/opensolaris/sys/kcondvar.h #{
	    then
		grep -q cv_timedwait_sbt ${LSOF_FBSD_ZFS_SYS}/compat/opensolaris/sys/kcondvar.h
		if test $? -eq 0	# {
		then
		  LSOF_FBSD_ZFS_CFGF="$LSOF_FBSD_ZFS_CFGF -DHAS_CV_TIMEDWAIT_SBT"
		fi	# }
	    fi	#}
	    if test -r /usr/include/sys/random.h	# {
	    then
	      grep -q opt_random.h /usr/include/sys/random.h
	      if test $? -eq 0	# {
	      then
		rm -f opt_random.h
		touch opt_random.h
	      fi	# }
	    fi	# }
	  fi	# }
	  if test -r ${LSOF_INCLUDE}/sys/vnode.h	# {
	  then

	  # See if the vnode contains the byte level lock pointer.

	    grep -q v_lockf ${LSOF_INCLUDE}/sys/vnode.h
	    if test $? -eq 0	# {
	    then
	      LSOF_CFGF="$LSOF_CFGF -DHAS_V_LOCKF"
	      if test $LSOF_FBSD_ZFS -eq 1	# {
	      then
	        LSOF_FBSD_ZFS_CFGF="$LSOF_FBSD_ZFS_CFGF -DHAS_V_LOCKF"
	      fi	# }
	    fi	# }
	  fi	# }
	  if test -r ${LSOF_INCLUDE}/sys/lockf.h	# {
	  then

	  # Determine the type of locking structure to which the inode or
	  # vnode points.

	    grep -q "^struct lockf_entry" ${LSOF_INCLUDE}/sys/lockf.h
	    if test $? -eq 0	# {
	    then

	    # Build the ./lockf_owner.h header file.

	      LSOF_TMP1=""
	      LSOF_TMP2=0
	      echo "Creating ./lockf_owner.h from ${FREEBSD_SYS}/kern/kern_lockf.c"
	      rm -f ./lockf_owner.h
	      if test -r ${FREEBSD_SYS}/kern/kern_lockf.c	# {
	      then
		LSOF_TMP1=`grep -n "^struct lock_owner {" ${FREEBSD_SYS}/kern/kern_lockf.c | sed 's/\([0-9]*\):.*$/\1/'`
		if test "X$LSOF_TMP1" != "X"	# {
		then
		  LSOF_TMP2=0
		  for i in `grep -n "};" ${FREEBSD_SYS}/kern/kern_lockf.c | sed 's/\([0-9]*\):.*$/\1/'` # {
		  do
		    if test $LSOF_TMP2 -eq 0 -a $i -gt $LSOF_TMP1	# {
		    then
		      LSOF_TMP2=$i
		    fi	# }
		  done	# }
		  if test $LSOF_TMP2 -eq 0	# {
		  then
		    LSOF_TMP1=""
		  else
		    cat > ./lockf_owner.h << LOCKF_OWNER1
/*
 * lockf_owner.h -- created by lsof Configure script on
LOCKF_OWNER1
		    echo $EO " * $EC" >> ./lockf_owner.h
		    date >> ./lockf_owner.h
		    cat >> ./lockf_owner.h << LOCKF_OWNER2
 */

#if	!defined(LOCKF_OWNER_H)
#define	LOCKF_OWNER_H

LOCKF_OWNER2
		    ed -s ${FREEBSD_SYS}/kern/kern_lockf.c >> ./lockf_owner.h << LOCKF_OWNER3
${LSOF_TMP1},${LSOF_TMP2}p
LOCKF_OWNER3
		    if test $? -ne 0	# {
		    then
		      LSOF_TMP1=""
		    else
		      cat >> ./lockf_owner.h << LOCKF_OWNER4

#endif	/* defined(LOCKF_OWNER_H) */
LOCKF_OWNER4
		    fi	# }
		  fi	# }
		fi	# }
	      else
		echo "FATAL ERROR: can't read ${FREEBSD_SYS}/kern/kern_lockf.c"
	      fi	# }
	      if test "X$LSOF_TMP1" != "X" -a "X$LSOF_TMP2" != "X0" # {
	      then
		echo "./lockf_owner.h creation succeeded."
	        LSOF_CFGF="$LSOF_CFGF -DHAS_LOCKF_ENTRY"
	      else
		echo "FATAL ERROR: ./lockf_owner.h creation failed (see 00FAQ)"
		rm -f $LSOF_HLP
		exit 1
	      fi	# }
	    fi	# }

	  # Test for in6p_.port in inpcb structure.

	    if test -r ${LSOF_INCLUDE}/netinet/in_pcb.h	# {
	    then
	      grep -q 'in6p_.port' ${LSOF_INCLUDE}/netinet/in_pcb.h
	      if test $? -ne 0	# {
	      then
		LSOF_CFGF="$LSOF_CFGF -DHAS_NO_6PORT"
	      fi	# }
	    fi	# }

	  # Test for in6p_ppcb in inpcb structure.

	    if test -r ${LSOF_INCLUDE}/netinet/in_pcb.h	# {
	    then
	      grep -q 'in6p_ppcb' ${LSOF_INCLUDE}/netinet/in_pcb.h
	      if test $? -ne 0	# {
	      then
		LSOF_CFGF="$LSOF_CFGF -DHAS_NO_6PPCB"
	      fi	# }
	    fi	# }
	    if test -r ${LSOF_INCLUDE}/sys/conf.h	# {
	    then
	      grep -q 'doadump(boolean_t)' ${LSOF_INCLUDE}/sys/conf.h
	      if test $? -eq 0	# {
	      then
		LSOF_CFGF="$LSOF_CFGF -DNEEDS_BOOLEAN_T"
	      fi	# }
	    fi	# }
	    if test -r ${LSOF_INCLUDE}/sys/sockbuf.h	# {
	    then
	      grep -q 'u_int	sb_ccc;' ${LSOF_INCLUDE}/sys/sockbuf.h
	      if test $? -eq 0	# {
	      then
		LSOF_CFGF="$LSOF_CFGF -DHAS_SB_CCC"
	      fi	# }
	    fi	# }
	    if test -r ${LSOF_INCLUDE}/sys/filedesc.h	# {
	    then
	      grep -q '^struct fdescenttbl {' ${LSOF_INCLUDE}/sys/filedesc.h
	      if test $? -eq 0	# {
	      then
		LSOF_CFGF="$LSOF_CFGF -DHAS_FDESCENTTBL"
	      fi	# }
	    fi	# }
	  fi	# }
	fi	# }
      fi	# }
      if test $LSOF_VERS -eq 10000	# {
      then

      # Do specific FreeBSD 10 version-specific stuff.

	LSOF_TMP1=`uname -m`
	if test "X$LSOF_TMP1" = "Xi386"	# {
	then
	  LSOF_CFGF="$LSOF_CFGF -DNEEDS_BOOL_TYPEDEF"
	fi	# }
      fi	# }
      ;;
    esac	# }
    LSOF_CFGF="$LSOF_CFGF -DFREEBSDV=$LSOF_VERS"
    if test $LSOF_VERS -lt 2000 -a "X$FREEBSD_KERNEL" = "X"	# {
    then
      if test ! -x $LSOF_N_UNIXV	# {
      then
	echo "Hmmm -- $LSOF_N_UNIXV doesn't appear to be your kernel file."
	echo "Please enter the name of the file in / that contains"
	echo "the kernel for this host.  It must be a regular file,"
	echo "not a directory, and must be executable."
	LSOF_LOOP=1
	while test $LSOF_LOOP = 1	# {
	do
	  echo ""
	  echo "/ contains:"
	  echo ""
	  ls -CF /
	  echo ""
	  echo -n "Kernel file name? "
	  read LSOF_N_UNIXV LSOF_EXCESS
	  LSOF_N_UNIXV="/$LSOF_N_UNIXV"
	  if test ! -d $LSOF_N_UNIXV -a -x $LSOF_N_UNIXV	# {
	  then
	    LSOF_LOOP=0
	  else
	    echo ""
	    echo $LSOF_N_UNIXV is not a regular executable file.
	  fi	# }
	done	# }
      fi	# }
      LSOF_N_UNIXV=`echo $LSOF_N_UNIXV | sed 's#^/*#/#'`
      LSOF_CFGF="$LSOF_CFGF -DN_UNIXV=$LSOF_N_UNIXV"
    fi	# }
    if test -r ${FREEBSD_SYS}/miscfs/fdesc/fdesc.h	# {
    then
      LSOF_TMP1=${FREEBSD_SYS}/miscfs/fdesc/fdesc.h
    else
      if test $LSOF_VERS -ge 5000 -a -r ${LSOF_INCLUDE}/fs/fdescfs/fdesc.h  # {
      then
	LSOF_TMP1=${LSOF_INCLUDE}/fs/fdescfs/fdesc.h
      else
	LSOF_TMP1=""
      fi	# }
    fi	# }
    if test "X$LSOF_TMP1" != "X"	# {
    then
      grep -q Fctty $LSOF_TMP1
      if test $? -eq 0	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASFDESCFS=1"
      else
	LSOF_CFGF="$LSOF_CFGF -DHASFDESCFS=2"
      fi	# }
      grep -q fd_link $LSOF_TMP1
      if test $? -eq 0	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASFDLINK"
      fi	# }
      LSOF_DINC_ADD=1
    fi	# }
    if test $LSOF_VERS -ge 5000	# {
    then
      LSOF_TMP1="fs"
    else
      LSOF_TMP1="miscfs"
    fi	# }
    if test $LSOF_VERS -lt 5000	# {
      then
      if test -d ${FREEBSD_SYS}/${LSOF_TMP1}/procfs	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASPROCFS"
	LSOF_DINC_ADD=1
      fi	# }
    else
      if test -d ${FREEBSD_SYS}/${LSOF_TMP1}/pseudofs	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASPSEUDOFS"
	LSOF_DINC_ADD=1
      fi	# }
    fi	# }
    if test -r ${LSOF_INCLUDE}/${LSOF_TMP1}/nullfs/null.h	# {
    then
      LSOF_CFGF="$LSOF_CFGF -DHASNULLFS"
    else
      if test -r ${FREEBSD_SYS}/${LSOF_TMP1}/nullfs/null.h	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASNULLFS"
	LSOF_DINC_ADD=1
      fi	# }
    fi	# }
    if test -r ${FREEBSD_SYS}/isofs/cd9660/cd9660_node.h	# {
    then
      rm -f cd9660_node.h
      grep -q "^#ifdef [_]*KERNEL" ${FREEBSD_SYS}/isofs/cd9660/cd9660_node.h
      if test $? -eq 0	# {
      then
	ln -s ${FREEBSD_SYS}/isofs/cd9660/cd9660_node.h cd9660_node.h
      else
	sed -e '/^ \* Prototypes for ISOFS vnode operations/,$c\
	\ The ISOFS prototypes were removed by Configure. */' \
	< ${FREEBSD_SYS}/isofs/cd9660/cd9660_node.h > cd9660_node.h
	echo "" >> cd9660_node.h
      fi	# }
      LSOF_CFGF="$LSOF_CFGF -DHAS9660FS"
      if test $LSOF_VERS -ge 6000	# {
      then
	grep -q "i_dev;" cd9660_node.h
	if test $? -ne 0	# {
	then
	  LSOF_CFGF="$LSOF_CFGF -DHAS_NO_ISO_DEV"
	fi	# }
      fi	# }
    fi	# }
    if test -r ${LSOF_INCLUDE}/sys/namei.h
    then
      grep -q nc_vpid ${LSOF_INCLUDE}/sys/namei.h
      if test $? -eq 0	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASNCVPID"
      fi	# }
    fi	# }
    if test $LSOF_DINC_ADD -eq 1	# {
    then
      if test "X$LSOF_DINC" = "X"	# {
      then
	LSOF_DINC="-I${FREEBSD_SYS}"
      else
	LSOF_DINC="$LSOF_DINC -I${LSOF_INCLUDE} -I${FREEBSD_SYS}"
      fi	# }
    fi	# }
    if test -r ${LSOF_INCLUDE}/netinet/in.h	# {
    then
      grep IPV6_INRIA_VERSION ${LSOF_INCLUDE}/netinet/in.h > /dev/null
      if test $? -eq 0	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASIPv6 -DHASINRIAIPv6"
      fi	# }
    fi	# }
    echo $CFGF | grep HASIPv6 > /dev/null
    if test $? -ne 0 -a -r ${LSOF_INCLUDE}/netinet6/in6.h	# {
    then
      LSOF_CFGF="$LSOF_CFGF -DHASIPv6"
    fi	# }
    if test -r ${LSOF_INCLUDE}/utmpx.h # {
    then
      LSOF_CFGF="$LSOF_CFGF -DHASUTMPX"
    fi	# }
    LSOF_DIALECT_DIR=freebsd
    ;;

# Configure for HP-UX and HP-UX gcc.

  hpux|hpuxgcc)
    if test "X$LSOF_RANLIB_SUP" = "X"	# {
    then
      LSOF_RANLIB=""
    fi	# }
    if test "X$LSOF_VSTR" = "X"	# {
    then
      LSOF_VSTR=`uname -r`
    fi	# }
    if test "X$LSOF_VERS" = "X"	# {
    then

      # If the HP-UX version isn't pre-defined, determine it.

      LSOF_VERS=`echo $LSOF_VSTR | awk -F. '{printf "%d%02d",\$2,\$3}'`
    fi	# }
    if test $LSOF_VERS -ge 1020	# {
    then
      LSOF_TSTBIGF="-D_LARGEFILE64_SOURCE"
    fi	# }

    # Determine compiler.

    if test "X$LSOF_CC" = "X"	# {
    then
      if test "X$LSOF_TGT" = "Xhpuxgcc"	# {
      then
	LSOF_CC=gcc
      else
	if test "X$HPUX_CCDIR1" = "X"	# {
	then
	  HPUX_CCDIR1="/bin"
	fi	# }
	if test "X$HPUX_CCDIR2" = "X"	# {
	then
	  HPUX_CCDIR2="/usr/ccs/bin"
	fi	# }
	if test -x ${HPUX_CCDIR1}/cc	# {
	then
	  LSOF_CC=${HPUX_CCDIR1}/cc
	else
	  if test -x ${HPUX_CCDIR2}/cc	# {
	  then
	    LSOF_CC=${HPUX_CCDIR2}/cc
	  else
	    echo "No executable cc in $HPUX_CCDIR1 or $HPUX_CCDIR2"
	    rm -f $LSOF_HLP
	    exit 1
	  fi	# }
	fi	# }
	$LSOF_CC -O < /dev/null 2>&1 | grep -q Bundled
	if test $? -eq 0	# {
	then
	  LSOF_DEBUG="No-O"			# to disable -O
	  if test "X$HPUX_LIBC1" = "X"	# {
	  then
	    HPUX_LIBC1="/usr/lib"
	  fi	# }
	  if test -r ${HPUX_LIBC1}/libc.sl	# {
	  then
	    LSOF_FCFGL="-L$HPUX_LIBC -lc"
	  else
	    if test "X$HPUX_LIBC2" = "X"	# {
	    then
	      HPUX_LIBC2="/usr/lib"
	    fi	# }
	    if test -r ${HPUX_LIBC2}/libc.sl	# {
	    then
	      LSOF_FCFGL="-L$HPUX_LIBC2 -lc"
	    fi	# }
	  fi	# }
	fi	# }
      fi	# }
    fi	# }
    echo $LSOF_CC | grep gcc > /dev/null
    if test $? -eq 0	# {
    then
      LSOF_CCV=`$LSOF_CC -v 2>&1 | sed -n 's/.*version \(.*\)/\1/p'`
    else
      $LSOF_CC -O < /dev/null 2>&1 | grep -q Bundled
      if test $? -eq 0	# {
      then
	LSOF_DEBUG="No-O"			# to disable -O
      fi	# }
    fi	# }
    LSOF_TGT=hpux

    # Test for "const void" support.

    rm -f ${LSOF_TMPC}.*
    echo "main() { const void *x; return(0); }" >> $LSOF_TMPC.c
    $LSOF_CC $LSOF_TMPC.c -o $LSOF_TMPC.x > /dev/null 2>&1
    if test $? -eq 0	# {
    then
      LSOF_CFGF="$LSOF_CFGF -DHAS_CONST"
    fi	# }
    rm -f ${LSOF_TMPC}.*

    # Test HP-UX base.

    if test "X$HPUX_BASE" = "X"	# {
    then
      if test -d $LSOF_INCLUDE/sys/pstat -a $LSOF_VERS -ge 1111 	# {
      then
	HPUX_BASE="pstat"
      else
	HPUX_BASE="/dev/kmem"
      fi	# }
    fi	# }
    if test "X$HPUX_BASE" = "Xpstat"	# {
    then

      # Configure for pstat-based HP-UX lsof.

      LSOF_CINFO="PSTAT-based"
      echo "Configuring PSTAT-based HP-UX lsof"
      LSOF_DIALECT_DIR=hpux/pstat
      LSOF_CFGF="$LSOF_CFGF -DHPUXV=$LSOF_VERS -D_PSTAT64"
      LSOF_CFGL="$LSOF_CFGL -lnsl"
      LSOF_TSTKMEM=0
      LSOF_TSTK64=1
      ls -l $LSOF_CC | grep -q ansic
      LSOF_TMP1=$?
      ls -l $LSOF_CC | grep -q aCC
      if test $? -eq 0 -o $LSOF_TMP1 -eq 0	# {
      then
	LSOF_CFGF="$LSOF_CFGF -Ae +DD32"
      else
	echo $LSOF_CC | grep -q gcc
	if test $? -ne 0	# {
	then
	  LSOF_CFGF="$LSOF_CFGF +DD32"
	fi	# }
      fi	# }
      if test -r ${LSOF_INCLUDE}/netinet/in6.h	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASIPv6"
      fi	# }
      if test -r ${LSOF_INCLUDE}/sys/pstat/stream_pstat_body.h	# {
      then
	grep -q PS_STR_XPORT_DATA ${LSOF_INCLUDE}/sys/pstat/stream_pstat_body.h
	if test $? -eq 0	# {
	then
	  LSOF_CFGF="$LSOF_CFGF -D_PSTAT_STREAM_GET_XPORT"
	fi	# }
      fi	# }
      if test $LSOF_VERS -ge 1123	# {
      then
	LSOF_CFGF="$LSOF_CFGF -D_LARGEFILE64_SOURCE"
      fi	# }
    else
      if test "X$HPUX_BASE" = "X/dev/kmem"	# {
      then
    
	# Configure for /dev/kmem-based HP-UX lsof.

	if test "X$HPUX_BOOTFILE" = "X"	# {
	then
	  HPUX_BOOTFILE="/stand/vmunix"
	fi	# }
	if test $LSOF_VERS -gt 1100	# {
	then
	  echo ""
	  echo "************************************************"
	  echo "*                                              *"
	  echo "* !!!!!!!!!!!!!!! FATAL ERROR !!!!!!!!!!!!!!!! *"
	  echo "*                                              *"
	  echo "* LSOF DOES NOT SUPPORT THIS VERSION OF HP-UX. *"
	  echo "*                                              *"
	  echo "************************************************"
	  echo ""
	  rm -f $LSOF_HLP
	  exit 1
	fi	# }
	LSOF_CFGF="$LSOF_CFGF -DHPUXV=$LSOF_VERS"
	LSOF_CINFO="/dev/kmem-based"
	LSOF_DIALECT_DIR=hpux/kmem
	echo "Configuring /dev/kmem-based HP-UX lsof"
	if test $LSOF_VERS -lt 1000	# {
	then
	  if test "X$HPUX_X25DIR" = "X"	# {
	  then
	    HPUX_X25DIR="/etc/conf"
	  else
	    HPUX_X25DIR=$HPUX_X25DIR
	  fi	# }
	  if test -r ${HPUX_X25DIR}/x25/x25addrstr.h	# {
	  then
	    LSOF_CFGF="$LSOF_CFGF -DHPUX_CCITT"
	    LSOF_DINC="$LSOF_DINC -I$HPUX_X25DIR"
	  fi	# }
	fi	# }
	if test -r ${LSOF_INCLUDE}/sys/fs/vx_inode.h -a -r ${LSOF_INCLUDE}/sys/fs/vx_hpux.h	# {
	then
	  LSOF_CFGF="$LSOF_CFGF -DHASVXFS"
	fi	# }
	if test $LSOF_VERS -ge 1030	# {
	then
	  if test "X$HPUX_KERNBITS" = "X"	# {
	  then
	    HPUX_KERNBITS=`getconf _SC_KERNEL_BITS`
	  fi	# }
	  LSOF_CFGF="$LSOF_CFGF -DHPUXKERNBITS=${HPUX_KERNBITS} -I`pwd`/dialects/hpux/kmem/hpux11"
	  if test $HPUX_KERNBITS -eq 64	# {
	  then
	    LSOF_TSTK64=1
	    echo ""
	    echo "*****************************************"
	    echo "*                                       *"
	    echo "* NOTICE!  Configuring for 64 bit HP-UX *"
	    echo "*                                       *"
	    echo "*****************************************"
	    echo $LSOF_CC | grep gcc > /dev/null
	    if test $? -eq 0	# {
	    then

	    # Test gcc for 64 bit support, trying gcc with no options, then
	    # with -mlp64, testing the result with file.

	      echo ""
	      echo "Testing $LSOF_CC for 64 bit support"
	      rm -f ${LSOF_TMPC}.*
	      echo "main(){}" > ${LSOF_TMPC}.c
	      LSOF_TMP1=""
	      $LSOF_CC ${LSOF_TMPC}.c -o ${LSOF_TMPC}.x > /dev/null 2>&1
	      if test $? -eq 0	# {
	      then
		/bin/file ${LSOF_TMPC}.x | /bin/grep 64 > /dev/null
		if test $? -eq 0	# {
		then
		    LSOF_TMP1=" "
		fi	# }
	      fi	# }
	      if test "X$LSOF_TMP1" = "X"	# {
	      then
		rm -f ${LSOF_TMPC}.x
		$LSOF_CC ${LSOF_TMPC}.c -mlp64 -o ${LSOF_TMPC}.x > /dev/null 2>&1
		if test $? -eq 0	# {
		then
		  /bin/file ${LSOF_TMPC}.x | /bin/grep 64 > /dev/null
		  if test $? -eq 0	# {
		  then
		      LSOF_TMP1="-mlp64"
		  fi	# }
		fi	# }
	      fi	# }
	      rm -f ${LSOF_TMPC}.*
	      if test "X$LSOF_TMP1" = "X"	# {
	      then
		echo ""
		echo "***************************************************"
		echo "*                                                 *"
		echo "* !!!!!!!!!!!!!!!!! FATAL ERROR !!!!!!!!!!!!!!!!! *"
		echo "*                                                 *"
		echo "* APPARENTLY GCC CANNOT BUILD 64 BIT EXECUTABLES. *"
		echo "* A COMPILER MUST BE USED THAT CAN.  SEE 00FAQ    *"
		echo "* FOR MORE INFORMATION.                           *"
		echo "*                                                 *"
		echo "***************************************************"
		echo ""
		rm -f $LSOF_HLP
		exit 1
	      else
		if test "X$LSOF_TMP1" != "X "	# {
		then
		  LSOF_CFGF="$LSOF_CFGF $LSOF_TMP1"
		fi	# }
		LSOF_CFGL="$LSOF_CFGL -lelf"
		LSOF_CINFO="${LSOF_CINFO}, 64 bit HP-UX"
	      fi	# }
	    else

	    # Set options for the HP-UX compiler.

	      LSOF_CFGF="$LSOF_CFGF +DD64"
	      LSOF_CFGL="$LSOF_CFGL -lelf"
	      LSOF_CINFO="${LSOF_CINFO}, 64 bit HP-UX"
	    fi	# }
	  else
	    LSOF_CFGF="$LSOF_CFGF -D_FILE_OFFSET_BITS=64"
	    LSOF_CINFO="${LSOF_CINFO}, 32 bit HP-UX"
	    echo $LSOF_CC | grep gcc > /dev/null
	    if test $? -ne 0	# {
	    then
	      LSOF_CFGF="$LSOF_CFGF +DAportable"
	    fi	# }
	  fi	# }
	  LSOF_CFGL="$LSOF_CFGL -lnsl"
	else

	# When HP-UX is less than 10.30, but greater than or equal to 10,
	# check NFS3 rnode status.

	  if test $LSOF_VERS -ge 1000	# {
	  then
	    LSOF_TMP1=0
	    if test "X$HPUX_RNODE3" = "X"	# {
	    then
	      nm -x $HPUX_BOOTFILE | grep -q nfs_vnodeops3
	      if test $? -eq 0	# {
	      then
		if test -r ${LSOF_INCLUDE}/nfs/rnode.h	# {
		then
		  grep -q r_fh3 ${LSOF_INCLUDE}/nfs/rnode.h
		  if test $? -ne 0	# {
		  then
		    LSOF_TMP1=1
		  fi	# }
		fi	# }
	      fi	# }
	    else
	      if test "X$HPUX_RNODE3" = "X1"	# {
	      then
		LSOF_TMP1=1
	      fi	# }
	    fi	# }
	    if test $LSOF_TMP1 -eq 1	# {
	    then
	      LSOF_CFGF="$LSOF_CFGF -DHASRNODE3"
	    fi	# }
	  fi # }
	fi	# }
	if test $LSOF_VERS -eq 1100	# {
	then

	# Test for the ipis_s structure.  If it is present, set HAS_IPC_S_PATCH.

	  if test "X$HPUX_IPC_S_PATCH" = "X"	# {
	  then
	    if test -x /usr/contrib/Q4/bin/q4exe	# {
	    then
	      LSOF_TMP=/usr/contrib/Q4/bin/q4exe
	    else
	      LSOF_TMP=/usr/contrib/bin/q4
	    fi	# }
	    if test -x $LSOF_TMP	# {
	    then
	      rm -f ${LSOF_TMPC}.out
	      echo ""
	      echo $EO "Looking in $HPUX_BOOTFILE for ipis_s with $LSOF_TMP ... $EC"
	      echo "yes\\nfields -c struct ipis_s" | $LSOF_TMP $HPUX_BOOTFILE > ${LSOF_TMPC}.out 2>&1
	      if test $? -ne 0	# {
	      then
		echo ""
		echo ""
		echo "!!!ERROR!!! $LSOF_TMP failed and produced the following output."
		echo ""
		cat ${LSOF_TMPC}.out
		HPUX_IPC_S_PATCH=fail
	      else
		grep ipis_s ${LSOF_TMPC}.out > /dev/null 2>&1
		if test $? -eq 0	# {
		then
		  echo "ipis_s exists."

		# See if ipis_msgsqueued is present.

		  grep ipis_msgsqueued ${LSOF_TMPC}.out > /dev/null 2>&1
		  if test $? -eq 0	# {
		  then
		    HPUX_IPC_S_PATCH=2
		  else
		    HPUX_IPC_S_PATCH=1
		  fi	# }
		else
		  echo "ipis_s doesn't exist."
		  HPUX_IPC_S_PATCH=N
		fi	# }
	      fi	# }
	      rm -f ${LSOF_TMPC}.out
	    else
	      echo "Can't locate or execute $LSOF_TMP"
	      echo $EO "ls says: $EC"
	      ls -ld $LSOF_TMP
	      HPUX_IPC_S_PATCH=fail
	    fi	# }
	  fi	# }
	  if test "X$HPUX_IPC_S_PATCH" = "Xfail"	# {
	  then
	    echo ""
	    echo "!!!ERROR!!!     !!!ERROR!!!     !!!ERROR!!!     !!!ERROR!!!"
	    echo "Configure can't use $LSOF_TMP to examine the ipis_s"
	    echo "structure.  You must do that yourself, report the result in"
	    echo "the HPUX_IPC_S_PATCH environment variable, then repeat the"
	    echo "Configure step.  Consult the Configure script's use of"
	    echo "$LSOF_TMP and the 00XCONFIG file for information"
	    echo "on ipis_s testing and the setting of HPUX_IPC_S_PATCH."
	    echo "!!!ERROR!!!     !!!ERROR!!!     !!!ERROR!!!     !!!ERROR!!!"
	    echo ""
	    rm -f $LSOF_HLP
	    exit 1
	  fi	# }
	  if test "X$HPUX_IPC_S_PATCH" = "X1" -o "X$HPUX_IPC_S_PATCH" = "X2" # {
	  then
	    LSOF_CFGF="$LSOF_CFGF -DHAS_IPC_S_PATCH=$HPUX_IPC_S_PATCH"
	  else
	    if test "X$HPUX_IPC_S_PATCH" != "Xn" -a "X$HPUX_IPC_S_PATCH" != "XN" # {
	    then
	      echo "Illegal value for HPUX_IPC_S_PATCH: $HPUX_IPC_S_PATCH"
	      rm -f $LSOF_HLP
	      exit 1
	    fi	# }
	  fi	# }
	fi	#}

	# Manufacture an hpux_mount.h header file with a mount struct in it, as
	# required.

	if test -r ${LSOF_INCLUDE}/sys/mount.h	# {
	then
	  LSOF_TMP1="dialects/${LSOF_DIALECT_DIR}/hpux_mount.h"
	  rm -f $LSOF_TMP1
	  echo "#if !defined(MANUFACTURED_HPUX_SYS_MOUNT_H)" > $LSOF_TMP1
	  echo "#define MANUFACTURED_HPUX_SYS_MOUNT_H" >> $LSOF_TMP1
	  echo "/* By lsof Configure:" `date` " */" >> $LSOF_TMP1
	  echo "struct mount" >> $LSOF_TMP1
	  sed '1,/struct mount/d' ${LSOF_INCLUDE}/sys/mount.h | sed -n '1,/m_dev/p' >> $LSOF_TMP1
	  echo "};" >> $LSOF_TMP1
	  echo "#endif" >> $LSOF_TMP1
	  LSOF_CFGF="$LSOF_CFGF -I`pwd`/dialects/${LSOF_DIALECT_DIR}"
	fi	# }

	# Test for OnlineJFS.

	if test $LSOF_VERS -ge 1100	# {
	then
	  if test "X$HPUX_HASONLINEJFS" = "X" -a -x /sbin/fs/vxfs/subtype  # {
	  then
	    LSOF_TMP1=`/sbin/fs/vxfs/subtype`
	    if test "X$LSOF_TMP1" = "Xvxfs3.3"
	    then
	      HPUX_HASONLINEJFS="Y"
	    fi	# }
	  fi	# }
	  if test "X$HPUX_HASONLINEJFS" = "XY" -o "X$HPUX_HASONLINEJFS" = "Xy"
	  # {
	  then
	    LSOF_CFGF="$LSOF_CFGF -DHASONLINEJFS"
	  fi	# }
	fi	# }

	# Test for AFS.

	if test -r ${AFS_VICE}/etc/ThisCell	# {
	then
	  if test "X$LSOF_SCRIPT_CALL" = "Xno"	# {
	  then
	    if test -r ./AFSHeaders -a -r ./AFSVersion	# {
	    then
	      LSOF_AFS="yes"
	    fi	# }
	  else
	    if test ! -x ./AFSConfig	# {
	    then
	      echo "Can't find or execute the AFSConfig script"
	      rm -f $LSOF_HLP
	      exit 1
	    fi	# }
	    ./AFSConfig
	    if test $? -eq 0 -a -r ./AFSHeaders -a -r ./AFSVersion	# {
	    then
	      LSOF_AFS="yes"
	    fi	# }
	  fi	# }
	  if test "X$LSOF_AFS" = "Xyes"	# {
	  then
	    LSOF_AFSV=`cat ./AFSVersion | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1 \2/' | awk '{printf "%d%02d\n",\$1,\$2}'`
	    LSOF_CFGF="$LSOF_CFGF -DHAS_AFS=$LSOF_AFSV"
	    LSOF_DINC="$LSOF_DINC -I`cat ./AFSHeaders`"
	  fi	# }
	fi	# }
      else
	echo "HP-UX base unrecognized: $HPUX_BASE"
	rm -f $LSOF_HLP
	exit 1
      fi	# }
    fi	# }
    ;;

# Configure for Linux.

  linux)
    LSOF_TSTBIGF="-D_FILE_OFFSET_BITS=64"
    LSOF_TSTKMEM=0
    if test "X$LSOF_CC" = "X"	# {
    then
      LSOF_CC=cc
      LSOF_CCV=`$LSOF_CC -v 2>&1 | sed -n 's/.*version \(.*\)/\1/p'`
    fi	# }
    if test "X$LINUX_CONF_CC" = "X"	# {
    then
      LINUX_CONF_CC=$LSOF_CC
    fi	#}
    LSOF_DIALECT_DIR=""
    if test "X$LINUX_INCL" = "X" # {
    then
      LINUX_INCL=/usr/include
    else
      LSOF_DINC="$LSOF_DINC -I${LINUX_INCL}"
    fi	# }
    if test "X$LINUX_VERSION_CODE" = "X" # {
    then
      if test -r "$LINUX_INCL/linux/version.h" # {
      then
        LINUX_VERSION_CODE=`cat $LINUX_INCL/linux/version.h | sed -n 's/.\+LINUX_VERSION_CODE \([[:digit:]]\+\)$/\1/p'`
      fi # }
    fi # }
    LSOF_VSTR=`echo $LINUX_VERSION_CODE | perl -e '$version=<STDIN>; chomp($version); printf("%d.%d.%d\n", ($version >> 16) & 0xFF, ($version >> 8) & 0xFF, $version & 0xFF);'`
    if test "X$LSOF_VSTR" = "X"	# {
    then
      LSOF_VSTR=`uname -r`
    fi	# }
    if test "X$LSOF_VERS" = "X"	# {
    then

      # If the Linux version isn't predefined, determine it.

      LSOF_VERS=`echo $LSOF_VSTR | sed 's/\./ /g' | awk '{printf "%d%d%03d",\$1,\$2,\$3}'`
    fi	# }
    LSOF_CFGF="$LSOF_CFGF -DLINUXV=$LSOF_VERS"
    if test $LSOF_VERS -lt 21072	# {
    then
      echo ""
	echo "!!!WARNING!!!==!!!WARNING!!!==!!!WARNING!!!==!!!WARNING!!!"
	echo "!                                                        !"
	echo "! THE /PROC-BASED LSOF SOURCES HAVE NOT BEEN TESTED ON   !"
	echo "! LINUX KERNELS BELOW 2.1.72, AND MAY NOT WORK ON THIS   !"
	echo "! KERNEL.  IT SHOULD USE A /DEV/KMEM-BASED LSOF.         !"
	echo "!                                                        !"
	echo "!!!WARNING!!!==!!!WARNING!!!==!!!WARNING!!!==!!!WARNING!!!"
	echo ""
    else
      LSOF_UNSUP=""
    fi	# }

    # If the Linux C library type isn't predefined, determine it.

    if test "X$LINUX_CLIB" = "X"	# {
    then
      echo -n "Testing C library type with $LINUX_CONF_CC ... "
      rm -f ${LSOF_TMPC}.*
      cat > $LSOF_TMPC.c << .LSOF_END_HERE_DOC1
#include <features.h>
main() {
#if defined(__GLIBC__) && defined(__GLIBC_MINOR__)
printf("-DGLIBCV=%d\n",__GLIBC__*100+__GLIBC_MINOR__);
#elif defined(__GLIBC__)
printf("-DGLIBCV=%d00\n",__GLIBC__);
#else
printf("\n");
#endif
return(0); }
.LSOF_END_HERE_DOC1
      $LINUX_CONF_CC ${LSOF_TMPC}.c -I$LSOF_INCLUDE -o ${LSOF_TMPC}.x > /dev/null 2>&1
      if test -x ${LSOF_TMPC}.x	# {
      then
	LINUX_CLIB=`${LSOF_TMPC}.x`
	LSOF_TMP=$?
      else
	LINUX_CLIB=""
	LSOF_TMP=1
      fi	# }
      rm -f ${LSOF_TMPC}.*
      echo "done"
      if test $LSOF_TMP -ne 0	# {
      then
	echo "Cannot determine C library type; assuming it is not glibc."
	LINUX_CLIB=""
      else
	if test "X$LINUX_CLIB" = "X"	# {
	then
	  echo "The C library type is not glibc."
	else
	  echo "The C library type is glibc, version \"$LINUX_CLIB\"."
	fi	# }
      fi	# }
    fi	# }
    if test "X$LINUX_CLIB" != "X"	# {
    then
      LSOF_CFGF="$LSOF_CFGF $LINUX_CLIB"
    fi	# }

    # Test for IPv6 support.

    if test -r ${LSOF_INCLUDE}/netinet/ip6.h	# {
    then
      LSOF_CFGF="$LSOF_CFGF -DHASIPv6"
    fi	# }

    # Test for <rpc/rpc.h>.

    if ! test -r ${LSOF_INCLUDE}/rpc/rpc.h	# {
    then
      LSOF_CFGF="$LSOF_CFGF -DHASNORPC_H"
    fi	# }

    # Test for TCP_* symbols.

    if test -r ${LSOF_INCLUDE}/netinet/tcp.h	# (
    then
      grep -q TCP_ESTABLISHED ${LSOF_INCLUDE}/netinet/tcp.h
      if test $? -eq 0	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DNEEDS_NETINET_TCPH"
      fi	#}
    fi	# }

    # Test for SELinux support.

    LSOF_TMP1=0
    if test "X$LINUX_HASSELINUX" = "X"	# {
    then
      if test -r ${LSOF_INCLUDE}/selinux/selinux.h	# {
      then
	LSOF_TMP1=1
      fi	# }
    else
      if test "X$LINUX_HASSELINUX" = "XY" -o "X$LINUX_HASSELINUX" = "Xy" # {
      then
	LSOF_TMP1=1
      fi	# }
    fi	# }
    if test $LSOF_TMP1 -eq 1	# {
    then
      LSOF_CFGF="$LSOF_CFGF -DHASSELINUX"
      LSOF_CFGL="$LSOF_CFGL -lselinux"
    fi	# }

  # Test for UNIX socket endpoint support.

    if test -r ${LSOF_INCLUDE}/linux/sock_diag.h -a -r ${LSOF_INCLUDE}/linux/unix_diag.h  # {
    then
      LSOF_CFGF="$LSOF_CFGF -DHASUXSOCKEPT"
    fi	# }

  # Test for pseudoterminal endpoint support.

    if test -r ${LSOF_INCLUDE}/linux/major.h # {
    then
      grep -q TTYAUX_MAJOR ${LSOF_INCLUDE}/linux/major.h
      if test $? -eq 0	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASPTYEPT"
      fi	# }
    fi	# }
    LSOF_DIALECT_DIR="linux"
    LSOF_CFGF="$LSOF_CFGF -D_FILE_OFFSET_BITS=64 -D_LARGEFILE64_SOURCE"
    ;;

# Configure for NetBSD.

  netbsd)
    if test "X$LSOF_CC" = "X"	# {
    then
      LSOF_CC=cc
      LSOF_CCV=`$LSOF_CC -v 2>&1 | sed -n 's/.*version \(.*\)/\1/p'`
    fi	# }
    if test "X$LSOF_VSTR" = "X"	# {
    then
      LSOF_VSTR=`uname -r`
    fi	# }
    if test "X$LSOF_VERS" = "X"	# {
    then
      
      # Validate the NetBSD version.

      case $LSOF_VSTR in	# {
      1.2*)
	LSOF_VERS="1002000"
	;;
      1.3*)
	LSOF_VERS="1003000"
	;;
      1.4*)
	LSOF_VERS="1004000"
	;;
      1.5*)
	LSOF_TSTBIGF=" "
	LSOF_VERS="1005000"
	;;
      1.6*)
	LSOF_TSTBIGF=" "
	LSOF_VERS="1006000"
	;;
      1*)
	LSOF_VERS="1006000"
	echo "!!!WARNING!!!  Unsupported NetBSD version: $LSOF_VSTR"
	echo "!!!WARNING!!!  Configuring for NetBSD 1.6"
	;;
      2.0*)
	LSOF_TSTBIGF=" "
	LSOF_VERS="2000000"
	;;
      2.99.9)
	LSOF_TSTBIGF=" "
	LSOF_VERS="2099009"
	;;
      2.99.10)
	LSOF_TSTBIGF=" "
	LSOF_VERS="2099010"
	;;
      2.99.*)
	LSOF_TSTBIGF=" "
	LSOF_VERS="2099010"
	;;
      2*)
	LSOF_VERS="2000000"
	echo "!!!WARNING!!!  Unsupported NetBSD version: $LSOF_VSTR"
	echo "!!!WARNING!!!  Configuring for NetBSD 2.0"
	;;
      3.0*)
	LSOF_TSTBIGF=" "
	LSOF_VERS="3000000"
	;;
      3.99.*)
	LSOF_TSTBIGF=" "
	LSOF_VERS="3099000"
	;;
      3*)
	LSOF_VERS="3000000"
	echo "!!!WARNING!!!  Unsupported NetBSD version: $LSOF_VSTR"
	echo "!!!WARNING!!!  Configuring for NetBSD 3.0"
	;;
      *)
	echo "Unknown NetBSD release: $LSOF_VSTR"
	echo Assuming NetBSD 1.6
	LSOF_VERS="1006000"
	;;
      esac	# }
    fi	# }

    # Test for legal NetBSD version.

    case $LSOF_VERS in	# {
    1002000|1003000|1004000|1005000|1006000)
      ;;
    2000000|2099009|2099010)
      ;;
    3000000|3099000)
      ;;
    *)
      echo "Unknown NetBSD version: $LSOF_VERS"
      rm -f $LSOF_HLP
      exit 1
      ;;
    esac	# }
    LSOF_CFGF="$LSOF_CFGF -DNETBSDV=$LSOF_VERS"
    LSOF_TMP1="-DN_UNIXV=/netbsd"
    if test -r ${LSOF_INCLUDE}/util.h	# {
    then
      grep -q getbootfile ${LSOF_INCLUDE}/util.h
      if test $? -eq 0	# {
      then
	LSOF_CFGL="$LSOF_CFGL -lutil"
	LSOF_TMP1="-DHASGETBOOTFILE"
      fi	# }
    fi	# }
    LSOF_CFGF="$LSOF_CFGF $LSOF_TMP1"
    if test -r ${LSOF_INCLUDE}/kvm.h	# {
    then
      grep -q kvm_getproc2 ${LSOF_INCLUDE}/kvm.h
      if test $? -eq 0	# {
      then
	  LSOF_CFGF="$LSOF_CFGF -DHASKVMGETPROC2"
      fi	# }
    fi	# }

  # Here begin the dual tests on header files that may be in $LSOF_INCLUDE
  # or $NETBSD_SYS.
  #
  # Note that $LSOF_TMP1 holds an indicator of the need for -I$NETBSD_SYS.
  # LSOF_TMP4 contains a temporary indicator of the use of $NETBSD_SYS.

    LSOF_TMP1=0
    if test "X$NETBSD_SYS" = "X"	# {
    then
      if test -d /usr/src	# {
      then
	NETBSD_SYS="/usr/src/sys"
      else
	NETBSD_SYS=$LSOF_INCLUDE
      fi	# }
    fi	# }
    LSOF_TMP2="nfs/nfsproto.h"
    if test -r ${LSOF_INCLUDE}/$LSOF_TMP2	# {
    then
      LSOF_TMP3="${LSOF_INCLUDE}/$LSOF_TMP2"
      LSOF_TMP4=0
    else
      if test -r ${NETBSD_SYS}/$LSOF_TMP2	# {
      then
	LSOF_TMP3="${NETBSD_SYS}/$LSOF_TMP2"
	LSOF_TMP4=1
      else
	LSOF_TMP3=""
      fi	# }
    fi	# }
    if test "X$LSOF_TMP3" != "X"	# {
    then
      LSOF_CFGF="$LSOF_CFGF -DHASNFSPROTO"
      if test $LSOF_TMP1 -eq 0 -a $LSOF_TMP4 -eq 1	# {
      then
	LSOF_TMP1=1
      fi	# }
    fi	# }
    LSOF_TMP2="netinet/ip6.h"
    if test -r ${LSOF_INCLUDE}/$LSOF_TMP2	# {
    then
      LSOF_TMP3="${LSOF_INCLUDE}/$LSOF_TMP2"
      LSOF_TMP4=0
    else
      if test -r ${NETBSD_SYS}/$LSOF_TMP2	# {
      then
	LSOF_TMP3="${NETBSD_SYS}/$LSOF_TMP2"
	LSOF_TMP4=1
      else
	LSOF_TMP3=""
      fi	# }
    fi	# }
    if test "X$LSOF_TMP3" != "X"	# {
    then
      LSOF_CFGF="$LSOF_CFGF -DHASIPv6"
      if test $LSOF_TMP1 -eq 0 -a $LSOF_TMP4 -eq 1	# {
      then
	LSOF_TMP1=1
      fi	# }
    else
      LSOF_TMP2="netinet/in.h"
      if test -r ${LSOF_INCLUDE}/$LSOF_TMP2	# {
      then
	LSOF_TMP3="${LSOF_INCLUDE}/$LSOF_TMP2"
	LSOF_TMP4=0
      else
	if test -r ${NETBSD_SYS}/$LSOF_TMP2	# {
	then
	  LSOF_TMP3="${NETBSD_SYS}/$LSOF_TMP2"
	  LSOF_TMP4=1
	else
	  LSOF_TMP3=""
	fi	# }
      fi	# }
      if test "X$LSOF_TMP3" != "X"	# {
      then
	grep -q IPV6_INRIA_VERSION $LSOF_TMP3
	if test $? -eq 0	# {
	then
	  LSOF_CFGF="$LSOF_CFGF -DHASIPv6 -DHASINRIAIPv6"
	  if test $LSOF_TMP1 -eq 0 -a $LSOF_TMP4 -eq 1	# {
	  then
	    LSOF_TMP1=1
	  fi	# }
	fi	# }
      fi # }
    fi	# }
    LSOF_TMP2="miscfs/fdesc/fdesc.h"
    if test -r ${LSOF_INCLUDE}/$LSOF_TMP2	# {
    then
      LSOF_TMP3="${LSOF_INCLUDE}/$LSOF_TMP2"
    else
      if test -r ${NETBSD_SYS}/$LSOF_TMP2	# {
      then
	LSOF_TMP3="${NETBSD_SYS}/$LSOF_TMP2"
	LSOF_TMP4=1
      else
	LSOF_TMP3=""
      fi	# }
    fi	# }
    if test "X$LSOF_TMP3" != "X"	# {
    then
      grep -q Fctty $LSOF_TMP3
      if test $? -eq 0	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASFDESCFS=1"
      else
	LSOF_CFGF="$LSOF_CFGF -DHASFDESCFS=2"
      fi	# }
      grep -q fd_link $LSOF_TMP3
      if test $? -eq 0	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASFDLINK"
      fi	# }
      if test $LSOF_TMP1 -eq 0 -a $LSOF_TMP4 -eq 1	# {
      then
	LSOF_TMP1=1
      fi	# }
    fi	# }
    LSOF_TMP2="miscfs/nullfs/null.h"
    if test -r ${LSOF_INCLUDE}/$LSOF_TMP2	# {
    then
      LSOF_TMP3="${LSOF_INCLUDE}/$LSOF_TMP2"
      LSOF_TMP4=0
    else
      if test -r ${NETBSD_SYS}/$LSOF_TMP2	# {
      then
	LSOF_TMP3="${NETBSD_SYS}/$LSOF_TMP2"
	LSOF_TMP4=1
      else
	LSOF_TMP3=""
      fi	# }
    fi	# }
    if test "X$LSOF_TMP3" != "X"	# {
    then
      LSOF_CFGF="$LSOF_CFGF -DHASNULLFS"
      if test $LSOF_TMP1 -eq 0 -a $LSOF_TMP4 -eq 1	# {
      then
	LSOF_TMP1=1
      fi	# }
    fi	# }
    LSOF_TMP2="miscfs/procfs"
    if test -d ${LSOF_INCLUDE}/$LSOF_TMP2	# {
    then
      LSOF_TMP3="${LSOF_INCLUDE}/$LSOF_TMP2"
      LSOF_TMP4=0
    else
      if test -d ${NETBSD_SYS}/$LSOF_TMP2	# {
      then
	LSOF_TMP3="${NETBSD_SYS}/$LSOF_TMP2"
	LSOF_TMP4=1
      else
	LSOF_TMP3=""
      fi	# }
    fi	# }
    if test "X$LSOF_TMP3" != "X"	# {
    then
      LSOF_CFGF="$LSOF_CFGF -DHASPROCFS"
      if test $LSOF_TMP1 -eq 0 -a $LSOF_TMP4 -eq 1	# {
      then
	LSOF_TMP1=1
      fi	# }
      if test -r ${LSOF_TMP3}/procfs.h	# {
      then
	grep -q PFSroot ${LSOF_TMP3}/procfs.h
	if test $? -eq 0	# {
	then
	  LSOF_CFGF="$LSOF_CFGF -DHASPROCFS_PFSROOT"
	fi #	}
      fi	# }
    fi	# }
    LSOF_TMP2="sys/bufq.h"
    LSOF_NBSD_BUFQH=0
    if test -r ${LSOF_INCLUDE}/$LSOF_TMP2	# {
    then
      LSOF_CFGF="$LSOF_CFGF -DHASBUFQ_H"
    else
      if test -r ${NETBSD_SYS}/$LSOF_TMP2	# {
      then
	if test $NETBSD_SYS != $LSOF_INCLUDE	# {
	then
	  LSOF_CFGF="$LSOF_CFGF -DHASBUFQ_H"
	  LSOF_NBSD_BUFQH=1
	fi	# }
      fi	# }
    fi	# }
    LSOF_TMP2="isofs/cd9660"
    if test -d ${LSOF_INCLUDE}/$LSOF_TMP2	# {
    then
      LSOF_TMP3="${LSOF_INCLUDE}/$LSOF_TMP2"
      LSOF_TMP4=0
    else
      if test -d ${NETBSD_SYS}/$LSOF_TMP2	# {
      then
	LSOF_TMP3="${NETBSD_SYS}/$LSOF_TMP2"
	LSOF_TMP4=1
      else
	LSOF_TMP3=""
      fi	# }
    fi	# }
    if test "X$LSOF_TMP3" != "X"	# {
    then
      LSOF_CFGF="$LSOF_CFGF -DHAS9660FS=1"
      if test $LSOF_TMP1 -eq 0 -a $LSOF_TMP4 -eq 1	# {
      then
	LSOF_TMP1=1
      fi	# }
    else
      LSOF_TMP2="fs/cd9660"
      if test -d ${LSOF_INCLUDE}/$LSOF_TMP2	# {
      then
	LSOF_TMP3="${LSOF_INCLUDE}/$LSOF_TMP2"
	LSOF_TMP4=0
      else
	if test -d ${NETBSD_SYS}/$LSOF_TMP2	# {
	then
	  LSOF_TMP3="${NETBSD_SYS}/$LSOF_TMP2"
	  LSOF_TMP4=1
	else
	  LSOF_TMP3=""
	fi	# }
      fi	# }
      if test "X$LSOF_TMP3" != "X"	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHAS9660FS=1"
	if test $LSOF_TMP1 -eq 0 -a $LSOF_TMP4 -eq 1	# {
	then
	  LSOF_TMP1=1
	fi	# }
      fi	# }
    fi	# }
    LSOF_TMP2="msdosfs"
    if test -d ${LSOF_INCLUDE}/$LSOF_TMP2	# {
    then
      LSOF_TMP3="${LSOF_INCLUDE}/$LSOF_TMP2"
      LSOF_TMP4=0
    else
      if test -d ${NETBSD_SYS}/$LSOF_TMP2	# {
      then
	LSOF_TMP3="${NETBSD_SYS}/$LSOF_TMP2"
	LSOF_TMP4=1
      else
	LSOF_TMP3=""
      fi	# }
    fi	# }
    if test "X$LSOF_TMP3" != "X"	# {
    then
      LSOF_CFGF="$LSOF_CFGF -DHASMSDOSFS=1"
      if test $LSOF_TMP1 -eq 0 -a $LSOF_TMP4 -eq 1	# {
      then
	LSOF_TMP1=1
      fi	# }
    else
      LSOF_TMP2="fs/msdosfs"
      if test -d ${LSOF_INCLUDE}/$LSOF_TMP2	# {
      then
	LSOF_TMP3="${LSOF_INCLUDE}/$LSOF_TMP2"
	LSOF_TMP4=0
      else
	if test -d ${NETBSD_SYS}/$LSOF_TMP2	# {
	then
	  LSOF_TMP3="${NETBSD_SYS}/$LSOF_TMP2"
	  LSOF_TMP4=1
	else
	  LSOF_TMP3=""
	fi	# }
      fi	# }
      if test "X$LSOF_TMP3" != "X"	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASMSDOSFS=2"
	if test $LSOF_TMP1 -eq 0 -a $LSOF_TMP4 -eq 1	# {
	then
	  LSOF_TMP1=1
	fi	# }
      fi	# }
    fi	# }
    LSOF_TMP2="miscfs/kernfs/kernfs.h"
    if test -r ${LSOF_INCLUDE}/$LSOF_TMP2	# {
    then
      LSOF_TMP3="${LSOF_INCLUDE}/$LSOF_TMP2"
      LSOF_TMP4=0
    else
      if test -r ${NETBSD_SYS}/$LSOF_TMP2	# {
      then
	LSOF_TMP3="${NETBSD_SYS}/$LSOF_TMP2"
	LSOF_TMP4=1
      else
	LSOF_TMP3=""
      fi	# }
    fi	# }
    if test "X$LSOF_TMP3" != "X"	# {
    then
      grep -q "kt_name;" $LSOF_TMP3
      if test $? -eq 0	# {
	then
 	  LSOF_CFGF="$LSOF_CFGF -DHASKERNFS"
	  if test $LSOF_TMP1 -eq 0 -a $LSOF_TMP4 -eq 1	# {
	  then
	    LSOF_TMP1=1
	  fi	# }
	  grep -q "*kfs_kt;" $LSOF_TMP3
	  if test $? -eq 0      # {
	  then
	    LSOF_CFGF="$LSOF_CFGF -DHASKERNFS_KFS_KT"
	  fi	# }
      fi	# }
    fi	# }
    LSOF_TMP2="sys/namei.h"
    if test -r ${LSOF_INCLUDE}/$LSOF_TMP2	# {
    then
      LSOF_TMP3="${LSOF_INCLUDE}/$LSOF_TMP2"
      LSOF_TMP4=0
    else
      if test -r ${NETBSD_SYS}/$LSOF_TMP2	# {
      then
	LSOF_TMP3="${NETBSD_SYS}/$LSOF_TMP2"
	LSOF_TMP4=1
      else
	LSOF_TMP3=""
      fi	# }
    fi	# }
    if test "X$LSOF_TMP3" != "X"	# {
    then
      grep -q nc_vpid $LSOF_TMP3
      if test $? -eq 0	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASNCVPID"
	if test $LSOF_TMP1 -eq 0 -a $LSOF_TMP4 -eq 1	# {
	then
	  LSOF_TMP1=1
	fi	# }
      fi	# }
    fi	# }
    LSOF_TMP2="ufs/ufs/inode.h"
    if test -r ${LSOF_INCLUDE}/$LSOF_TMP2	# {
    then
      LSOF_TMP3="${LSOF_INCLUDE}/$LSOF_TMP2"
      LSOF_TMP4=0
    else
      if test -r ${NETBSD_SYS}/$LSOF_TMP2	# {
      then
	LSOF_TMP3="${NETBSD_SYS}/$LSOF_TMP2"
	LSOF_TMP4=1
      else
	LSOF_TMP3=""
      fi	# }
    fi	# }
    if test "X$LSOF_TMP3" != "X"	# {
    then
      grep -q i_ffs_size $LSOF_TMP3
      if test $? -eq 0	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASI_FFS"
	if test $LSOF_TMP1 -eq 0 -a $LSOF_TMP4 -eq 1	# {
	then
	  LSOF_TMP1=1
	fi	# }
      else
	grep -q i_ffs1_size $LSOF_TMP3
	if test $? -eq 0	# {
	then
	  LSOF_CFGF="$LSOF_CFGF -DHASI_FFS1"
	  if test $LSOF_TMP1 -eq 0 -a $LSOF_TMP4 -eq 1	# {
	  then
	    LSOF_TMP1=1
	  fi	# }
	fi	# }
      fi	# }
      grep -q i_ffs_effnlink $LSOF_TMP3
      if test $? -eq 0	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASEFFNLINK=i_ffs_effnlink"
	if test $LSOF_TMP1 -eq 0 -a $LSOF_TMP4 -eq 1	# {
	then
	  LSOF_TMP1=1
	fi	# }
      fi	# }
    fi	# }
    LSOF_TMP2="sys/vnode.h"
    LSOF_NBSD_PTYFS=0
    if test -r ${LSOF_INCLUDE}/$LSOF_TMP2	# {
    then
      LSOF_TMP3="${LSOF_INCLUDE}/$LSOF_TMP2"
      LSOF_TMP4=0
    else
      if test -r ${NETBSD_SYS}/$LSOF_TMP2	# {
      then
	LSOF_TMP3="${NETBSD_SYS}/$LSOF_TMP2"
	LSOF_TMP4=1
      else
	LSOF_TMP3=""
      fi	# }
    fi	# }
    if test "XLSOF_TMP3" != "X"	# {
    then
      grep -q VT_EXT2FS $LSOF_TMP3
      if test $? -eq 0	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASEXT2FS"
	if test $LSOF_TMP1 -eq 0 -a $LSOF_TMP4 -eq 1	# {
	then
	  LSOF_TMP1=1
	fi	# }
	LSOF_TMP2="ufs/ufs/inode.h"
	if test -r ${LSOF_INCLUDE}/$LSOF_TMP2	# {
	then
	  LSOF_TMP5="${LSOF_INCLUDE}/$LSOF_TMP2"
	  LSOF_TMP6=0
	else
	  if test -r ${NETBSD_SYS}/$LSOF_TMP2	# {
	  then
	    LSOF_TMP5="${NETBSD_SYS}/$LSOF_TMP2"
	    LSOF_TMP6=1
	  else
	    LSOF_TMP5=""
	  fi	# }
	fi	# }
	if test "X$LSOF_TMP5" != "X"	# {
	then
	  grep -q "*e2fs_din" $LSOF_TMP5
	  if test $? -eq 0	# {
	  then
	    LSOF_CFGF="$LSOF_CFGF -DHASI_E2FS_PTR"
	    if test $LSOF_TMP1 -eq 0 -a $LSOF_TMP4 -eq 1	# {
	    then
	      LSOF_TMP1=$LSOF_TMP6
	    fi	# }
	  fi	# }
	fi	# }
      fi	# }
      grep -q VT_LFS $LSOF_TMP3
      if test $? -eq 0   # {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASLFS"
	if test $LSOF_TMP1 -eq 0 -a $LSOF_TMP4 -eq 1	# {
	then
	  LSOF_TMP1=1
	fi	# }
      fi	# }
      grep -q VT_PTYFS $LSOF_TMP3
      if test $? -eq 0   # {
      then
	LSOF_TMP2="fs/ptyfs/ptyfs.h"
	if test -r ${LSOF_INCLUDE}/$LSOF_TMP2	# {
	then
	  LSOF_CFGF="$LSOF_CFGF -DHASPTYFS"
	else
	  if test -r ${NETBSD_SYS}/$LSOF_TMP2	# {
	  then
	    if test $NETBSD_SYS != $LSOF_INCLUDE	# {
	    then
	      LSOF_CFGF="$LSOF_CFGF -DHASPTYFS"
	      LSOF_NBSD_PTYFS=1
	    fi	# }
	  fi	# }
	fi	# }
      fi	# }
      if test "X$NETBSD_UVM" = "X"	# {
      then
	grep -q UVM $LSOF_TMP3
	if test $? -ne 0	# {
	then
	  egrep -q "v_uvm;|v_uobj;" $LSOF_TMP3
	  if test $? -eq 0	# {
	  then
	    NETBSD_UVM="Y"
	  fi	# }
	fi	# }
      fi	# }
    fi	# }
    LSOF_TMP2="nfs/nfsnode.h"
    if test -r ${LSOF_INCLUDE}/$LSOF_TMP2	# {
    then
      LSOF_TMP3="${LSOF_INCLUDE}/$LSOF_TMP2"
      LSOF_TMP4=0
    else
      if test -r ${NETBSD_SYS}/$LSOF_TMP2	# {
      then
	LSOF_TMP3="${NETBSD_SYS}/$LSOF_TMP2"
	LSOF_TMP4=1
      else
	LSOF_TMP3=""
      fi	# }
    fi	# }
    if test "X$LSOF_TMP3" != "X"	# {
    then
      grep -q "*n_vattr" $LSOF_TMP3
      if test $? -eq 0	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASNFSVATTRP"
	if test $LSOF_TMP1 -eq 0 -a $LSOF_TMP4 -eq 1	# {
	then
	  LSOF_TMP1=1
	fi	# }
      fi	# }
    fi	# }
    LSOF_TMP2="sys/lockf.h"
    if test -r ${LSOF_INCLUDE}/$LSOF_TMP2	# {
    then
      LSOF_TMP3="${LSOF_INCLUDE}/$LSOF_TMP2"
      LSOF_TMP4=0
    else
      if test -r ${NETBSD_SYS}/$LSOF_TMP2	# {
      then
	LSOF_TMP3="${NETBSD_SYS}/$LSOF_TMP2"
	LSOF_TMP4=1
      else
	LSOF_TMP3=""
      fi	# }
    fi	# }
    if test "X$LSOF_TMP3" != "X"	# {
    then
      grep -q vop_advlock_args $LSOF_TMP3
      if test $? -eq 0	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHAS_ADVLOCK_ARGS"
	if test $LSOF_TMP1 -eq 0 -a $LSOF_TMP4 -eq 1	# {
	then
	  LSOF_TMP1=1
	fi	# }
      fi	# }
      grep -q lf_lwp $LSOF_TMP3
      if test $? -eq 0	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHAS_LF_LWP"
	if test $LSOF_TMP1 -eq 0 -a $LSOF_TMP4 -eq 1	# {
	then
	  LSOF_TMP1=1
	fi	# }
      fi	# }
    fi	# }
    LSOF_TMP2="sys/lwp.h"
    if test -r ${LSOF_INCLUDE}/$LSOF_TMP2	# {
    then
      LSOF_TMP3="${LSOF_INCLUDE}/$LSOF_TMP2"
      LSOF_TMP4=0
    else
      if test -r ${NETBSD_SYS}/$LSOF_TMP2	# {
      then
	LSOF_TMP3="${NETBSD_SYS}/$LSOF_TMP2"
	LSOF_TMP4=1
      else
	LSOF_TMP3=""
      fi	# }
    fi	# }
    if test "X$LSOF_TMP3" != "X"	# {
    then
      LSOF_CFGF="$LSOF_CFGF -DHAS_LWP_H"
      if test $LSOF_TMP1 -eq 0 -a $LSOF_TMP4 -eq 1	# {
      then
	LSOF_TMP1=1
      fi	# }
    fi	# }
    LSOF_TMP2="sys/filedesc.h"
    if test -r ${LSOF_INCLUDE}/$LSOF_TMP2	# {
    then
      LSOF_TMP3="${LSOF_INCLUDE}/$LSOF_TMP2"
      LSOF_TMP4=0
    else
      if test -r ${NETBSD_SYS}/$LSOF_TMP2	# {
      then
	LSOF_TMP3="${NETBSD_SYS}/$LSOF_TMP2"
	LSOF_TMP4=1
      else
	LSOF_TMP3=""
      fi	# }
    fi	# }
    if test "X$LSOF_TMP3" != "X"	# {
    then
      grep -q "^struct cwdinfo {" $LSOF_TMP3
      if test $? -eq 0	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASCWDINFO"
	if test $LSOF_TMP1 -eq 0 -a $LSOF_TMP4 -eq 1	# {
	then
	  LSOF_TMP1=1
	fi	# }
      fi	# }
    fi	# }
    LSOF_TMP2="sys/pipe.h"
    if test -r ${LSOF_INCLUDE}/$LSOF_TMP2	# {
    then
      LSOF_TMP3="${LSOF_INCLUDE}/$LSOF_TMP2"
      LSOF_TMP4=0
    else
      if test -r ${NETBSD_SYS}/$LSOF_TMP2	# {
      then
	LSOF_TMP3="${NETBSD_SYS}/$LSOF_TMP2"
	LSOF_TMP4=1
      else
	LSOF_TMP3=""
      fi	# }
    fi	# }
    if test "X$LSOF_TMP3" != "X"	# {
    then
      LSOF_CFGF="$LSOF_CFGF -DHAS_SYS_PIPEH"
      if test $LSOF_TMP1 -eq 0 -a $LSOF_TMP4 -eq 1	# {
      then
	LSOF_TMP1=1
      fi	# }
    fi	# }
    if test -r ${LSOF_INCLUDE}/sys/statvfs.h 	# {
    then
      grep -q '^struct statvfs {' ${LSOF_INCLUDE}/sys/statvfs.h
      if test $? -eq 0	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASSTATVFS"
      fi	# }
    fi	# }

  # Here end the dual NetBSD tests for header files in $LSOF_INCLUDE or
  # NETBSD_SYS.
  #
  # After this LSOF_TMP1 may be reused.

    if test $LSOF_TMP1 -eq 1	# {
    then
      LSOF_DINC="-I$LSOF_INCLUDE -I$NETBSD_SYS"
    fi	# }

  # Build special header files, as required.

    rm -rf dialects/n+obsd/include
    if test "X$NETBSD_UVM" = "XY" -o "X$NETBSD_UVM" = "Xy"	# {
    then
      mkdir dialects/n+obsd/include
      touch dialects/n+obsd/include/opt_uvmhist.h
      touch dialects/n+obsd/include/opt_lockdebug.h
      LSOF_CFGF="$LSOF_CFGF -DUVM -I`pwd`/dialects/n+obsd/include"
      if test -d ${LSOF_INCLUDE}/uvm	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHAS_UVM_INCL"
      fi	# }
    fi	# }
    LSOF_TMP2="sys/mount.h"
    if test -r ${LSOF_INCLUDE}/$LSOF_TMP2	# {
    then
      LSOF_TMP3="${LSOF_INCLUDE}/$LSOF_TMP2"
    else
      if test -r ${NETBSD_SYS}/$LSOF_TMP2	# {
      then
	LSOF_TMP3="${NETBSD_SYS}/$LSOF_TMP2"
      else
	LSOF_TMP3=""
      fi	# }
    fi	# }
    if test "X$LSOF_TMP3" != "X"	# {
    then

      # Build a local NetBSD netexport.h header file for possible use by
      # <msdosfs/msdosfsmount.h>.  Make sure CFGL contains a -I for it.

      LSOF_TMP1=${LSOF_TMPC}.edscr
      LSOF_TMP2=${LSOF_TMPC}.netcred
      LSOF_TMP3=${LSOF_TMPC}.netexport
      LSOF_TMP4=dialects/n+obsd/include/netexport.h
      if test ! -d dialects/n+obsd/include	# {
      then
	mkdir dialects/n+obsd/include
      fi	# }
      rm -f $LSOF_TMP1 $LSOF_TMP2 $LSOF_TMP3 $LSOF_TMP4 
      echo "/^struct netcred" > $LSOF_TMP1
      echo "1,.-1d" >> $LSOF_TMP1
      echo "/^};" >> $LSOF_TMP1
      echo "1,.w $LSOF_TMP2" >> $LSOF_TMP1
      ed ${LSOF_INCLUDE}/sys/mount.h < $LSOF_TMP1 > /dev/null 2>&1
      rm -f $LSOF_TMP1
      echo "/^struct netexport" > $LSOF_TMP1
      echo "1,.-1d" >> $LSOF_TMP1
      echo "/^};" >> $LSOF_TMP1
      echo "1,.w $LSOF_TMP3" >> $LSOF_TMP1
      ed ${LSOF_INCLUDE}/sys/mount.h < $LSOF_TMP1 > /dev/null 2>&1
      echo "/*" > $LSOF_TMP4
      echo " * netexport.h" >> $LSOF_TMP4
      echo -n " * Created by Configure: " >> $LSOF_TMP4
      echo `date` >> $LSOF_TMP4
      echo " */" >> $LSOF_TMP4
      echo "" >> $LSOF_TMP4
      echo "#if	!defined(NETEXPORT_H)" >> $LSOF_TMP4
      echo "#define	NETEXPORT_H" >> $LSOF_TMP4
      echo "" >> $LSOF_TMP4
      echo "#include <net/radix.h>" >> $LSOF_TMP4
      echo "" >> $LSOF_TMP4
      if test -r $LSOF_TMP2	# {
      then
	cat $LSOF_TMP2 >> $LSOF_TMP4
	echo "" >> $LSOF_TMP4
      fi	# }
      if test -r $LSOF_TMP3	# {
      then
	cat $LSOF_TMP3 >> $LSOF_TMP4
      fi	# }
      echo "#endif	/* !defined(NETEXPORT_H) */" >> $LSOF_TMP4
      rm -f $LSOF_TMP1 $LSOF_TMP2 $LSOF_TMP3
      echo $LSOF_CFGF | grep /dialects/n+obsd/include > /dev/null 2>&1
      if test $? -ne 0	# {
      then
	LSOF_CFGF="$LSOF_CFGF -I`pwd`/dialects/n+obsd/include"
      fi	# }
    fi	# }
    if test $LSOF_NBSD_BUFQH -eq 1	# {
    then

    # Make a local copy of $NETBSD_SYS/sys/bufq.h.

      if test ! -d dialects/n+obsd/include	# {
      then
	mkdir dialects/n+obsd/include
      fi	# }
      if test ! -d dialects/n+obsd/include/sys	# {
      then
	mkdir dialects/n+obsd/include/sys
      fi	# }
      cp $NETBSD_SYS/sys/bufq.h dialects/n+obsd/include/sys
      echo $LSOF_CFGF | grep /dialects/n+obsd/include > /dev/null 2>&1
      if test $? -ne 0	# {
      then
	LSOF_CFGF="$LSOF_CFGF -I`pwd`/dialects/n+obsd/include"
      fi	# }
    fi	# }
    if test $LSOF_NBSD_PTYFS -eq 1	# {
    then

    # Make a local copy of $NETBSD_SYS/sys/fs/ptyfs/.

      if test ! -d dialects/n+obsd/include	# {
      then
	mkdir dialects/n+obsd/include
      fi	# }
      if test ! -d dialects/n+obsd/include/fs	# {
      then
	mkdir dialects/n+obsd/include/fs
      fi	# }
      rm -rf dialects/n+obsd/include/fs/ptyfs
      mkdir dialects/n+obsd/include/fs/ptyfs
      cp $NETBSD_SYS/fs/ptyfs/*.h dialects/n+obsd/include/fs/ptyfs
      echo $LSOF_CFGF | grep /dialects/n+obsd/include > /dev/null 2>&1
      if test $? -ne 0	# {
      then
	LSOF_CFGF="$LSOF_CFGF -I`pwd`/dialects/n+obsd/include"
      fi	# }
    fi	# }
    LSOF_CFGL="$LSOF_CFGL -lkvm"
    LSOF_DIALECT_DIR=n+obsd
    ;;

# Configure for NeXTSTEP or OPENSTEP.

  nextstep|next|ns|nxt|openstep|os)
    LSOF_TGT="ns"
    LSOF_TSTXO="../lib/snpf.o"
    if test "X$LSOF_AR" = "X"	# {
    then
      LSOF_AR="rm -f \${LIB}; ar cr"
    fi	# }
    if test "X$LSOF_VSTR" = "X"	# {
    then
      LSOF_VSTR=`hostinfo | sed -n 's/.*NeXT Mach \([0-9\.]*\).*/\1/p'`
    fi	# }
    if test "X$LSOF_VERS" = "X"	# {
    then

      # If the NeXSTEP version isn't predefined, determine it.

      LSOF_VERS=`echo $LSOF_VSTR | sed -n 's/\([0-9]*\)\.\([0-9]*\)/\1\2/p'`
    fi	# }
    if test "X$LSOF_CC" = "X"	# {
    then
      if test -x /usr/local/bin/gcc	# {
      then
	LSOF_CC=/usr/local/bin/gcc
	LSOF_CCV=`$LSOF_CC -v 2>&1 | sed -n 's/.*version \(.*\)/\1/p'`
      else
	LSOF_CC=cc
	LSOF_CCV=`$LSOF_CC -v 2>&1 | sed -n 's/.*version \(.*\)/\1/p'`
      fi	# }
    fi	# }
    echo $LSOF_CC | grep gcc > /dev/null
    if test $? -eq 0	# {
    then
      LSOF_CFGL="$LSOF_CFGL -w"
      LSOF_DEBUG="-pedantic -O"
    fi	# }
    LSOF_CFGF="$LSOF_CFGF -DSTEPV=$LSOF_VERS"
    LSOF_DIALECT_DIR=n+os

    # Test for AFS.

    if test -r ${AFS_VICE}/etc/ThisCell	# {
    then
      if test "X$LSOF_SCRIPT_CALL" = "Xno"	# {
      then
	if test -r ./AFSHeaders -a -r ./AFSVersion	# {
	then
	  LSOF_AFS="yes"
	fi	# }
      else
	if test ! -x ./AFSConfig	# {
	then
	  echo "Can't find or execute the AFSConfig script"
	  rm -f $LSOF_HLP
	  exit 1
	fi	# }
	./AFSConfig
	if test $? -eq 0 -a -r ./AFSHeaders -a -r ./AFSVersion	# {
	then
	    LSOF_AFS="yes"
	fi	# }
      fi	# }
      if test "X$LSOF_AFS" = "Xyes"	# {
      then
	LSOF_AFSV=`cat ./AFSVersion | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1 \2/' | awk '{printf "%d%02d\n",\$1,\$2}'`
	LSOF_CFGF="$LSOF_CFGF -DHAS_AFS=$LSOF_AFSV"
	LSOF_DINC="$LSOF_DINC -I`cat ./AFSHeaders`"
      fi	# }
    fi	# }
    ;;

# Configure for OpenBSD.  (OpenBSD uses NetBSD dialect sources and version
# numbering.

  openbsd)
    if test "X$LSOF_CC" = "X"	# {
    then
      LSOF_CC=cc
      LSOF_CCV=`$LSOF_CC -v 2>&1 | sed -n 's/.*version \(.*\)/\1/p'`
    fi	# }
    if test "X$LSOF_VSTR" = "X"	# {
    then
      LSOF_VSTR=`uname -r`
    fi	# }
    if test "X$LSOF_VERS" = "X"	# {
    then

      # If the OpenBSD version isn't pre-defined, determine it.

      case $LSOF_VSTR in	# {
      1*)
	LSOF_VERS=1020
	echo "!!!WARNING!!!  Unsupported OpenBSD 1.x version: $LSOF_VSTR"
	echo "!!!WARNING!!!  Configuring for OpenBSD 1.2"
	;;
      2.5*)
	LSOF_VERS=2050
	;;
      2.6*)
	LSOF_VERS=2060
	;;
      2.7*)
	LSOF_TSTBIGF=" "
	LSOF_VERS=2070
	;;
      2.8*)
	LSOF_TSTBIGF=" "
	LSOF_VERS=2080
	;;
      2.9*)
	LSOF_TSTBIGF=" "
	LSOF_VERS=2090
	;;
      2*)
	LSOF_TSTBIGF=" "
	LSOF_VERS=2090
	echo "!!!WARNING!!!  Unsupported OpenBSD 2.x version: $LSOF_VSTR"
	echo "!!!WARNING!!!  Configuring for OpenBSD 2.9"
	;;
      3.0*)
	LSOF_TSTBIGF=" "
	LSOF_VERS=3000
	;;
      3.1*)
	LSOF_TSTBIGF=" "
	LSOF_VERS=3010
	;;
      3.2*)
	LSOF_TSTBIGF=" "
	LSOF_VERS=3020
	;;
      3.3*)
	LSOF_TSTBIGF=" "
	LSOF_VERS=3030
	;;
      3.4*)
	LSOF_TSTBIGF=" "
	LSOF_VERS=3040
	;;
      3.5*)
	LSOF_TSTBIGF=" "
	LSOF_VERS=3050
	;;
      3.6*)
	LSOF_TSTBIGF=" "
	LSOF_VERS=3060
	;;
      3.7*)
	LSOF_TSTBIGF=" "
	LSOF_VERS=3070
	;;
      3.8*)
	LSOF_TSTBIGF=" "
	LSOF_VERS=3080
	;;
      3.9*)
	LSOF_TSTBIGF=" "
	LSOF_VERS=3090
	;;
      3*)
	LSOF_TSTBIGF=" "
	LSOF_VERS=3090
	echo "!!!WARNING!!!  Unsupported OpenBSD 3.x version: $LSOF_VSTR"
	echo "!!!WARNING!!!  Configuring for OpenBSD 3.9"
	;;
      *)
	echo "Unknown OpenBSD release: $LSOF_VSTR"
	echo Assuming OpenBSD 3.9
	LSOF_VERS=3090
	;;
      esac	# }
    fi	# }

    # Test for legal OpenBSD version.

    case $LSOF_VERS in	# {
    1020|2050|2060|2070|2080|2090|3000|3010|3020|3030|3040|3050|3060|3070|3080|3090)
      ;;
    *)
      echo "Unknown OpenBSD version: $LSOF_VERS"
      rm -f $LSOF_HLP
      exit 1
      ;;
    esac	# }
    LSOF_CFGF="$LSOF_CFGF -DOPENBSDV=$LSOF_VERS"
    if test -r /dev/ksyms	# {
    then
      LSOF_CFGF="$LSOF_CFGF -DN_UNIXV=/dev/ksyms"
    else
      LSOF_CFGF="$LSOF_CFGF -DN_UNIXV=/bsd"
    fi
    if test -r ${LSOF_INCLUDE}/nfs/nfsproto.h	# {
    then
      LSOF_CFGF="$LSOF_CFGF -DHASNFSPROTO"
    fi	# }
    if test -r ${LSOF_INCLUDE}/netinet6/in6.h	# {
    then
      LSOF_CFGF="$LSOF_CFGF -DHASIPv6"
    fi	# }
    LSOF_TMP1=0
    if test "X$OPENBSD_SYS" = "X"	# {
    then
      OPENBSD_SYS="/sys"
    fi	# }
    if test -r ${OPENBSD_SYS}/miscfs/fdesc/fdesc.h	# {
    then
      grep -q Fctty ${OPENBSD_SYS}/miscfs/fdesc/fdesc.h
      if test $? -eq 0	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASFDESCFS=1"
      else
	LSOF_CFGF="$LSOF_CFGF -DHASFDESCFS=2"
      fi	# }
      grep -q fd_link ${OPENBSD_SYS}/miscfs/fdesc/fdesc.h
      if test $? -eq 0	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASFDLINK"
      fi	# }
      LSOF_TMP1=1
    fi	# }
    if test -r ${LSOF_INCLUDE}/sys/vnode.h	# {
    then
      grep -q VT_LFS ${LSOF_INCLUDE}/sys/vnode.h
      if test $? -eq 0   # {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASLFS"
      fi	# }
    fi	# }
    if test -r ${LSOF_INCLUDE}/miscfs/nullfs/null.h	# {
    then
      LSOF_CFGF="$LSOF_CFGF -DHASNULLFS"
    else
      if test -r ${OPENBSD_SYS}/miscfs/nullfs/null.h	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASNULLFS"
	LSOF_TMP1=1
      fi	# }
    fi	# }
    if test -d ${OPENBSD_SYS}/miscfs/procfs	# {
    then
      LSOF_CFGF="$LSOF_CFGF -DHASPROCFS"
      LSOF_TMP1=1
    fi	# }
    if test -d ${OPENBSD_SYS}/isofs/cd9660	# {
    then
      LSOF_CFGF="$LSOF_CFGF -DHAS9660FS=1"
      LSOF_TMP1=1
    else
      if test -d ${OPENBSD_SYS}/fs/cd9660	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHAS9660FS=2"
	LSOF_TMP1=1
      fi	# }
    fi	# }
    if test -d ${OPENBSD_SYS}/msdosfs	# {
    then
      LSOF_CFGF="$LSOF_CFGF -DHASMSDOSFS=1"
      LSOF_TMP1=1
    else
      if test -d ${OPENBSD_SYS}/fs/msdosfs	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASMSDOSFS=2"
	LSOF_TMP1=1
      fi	# }
    fi	# }
    if test -r ${OPENBSD_SYS}/miscfs/kernfs/kernfs.h	# {
    then
      grep -q "kt_name;" ${OPENBSD_SYS}/miscfs/kernfs/kernfs.h
      if test $? -eq 0	# {
	then
 	  LSOF_CFGF="$LSOF_CFGF -DHASKERNFS"
	  LSOF_TMP1=1
      fi	# }
    fi	# }
    if test $LSOF_TMP1 -eq 1 -a "X$LSOF_INCLUDE" != "X$OPENBSD_SYS"	# {
    then
      LSOF_DINC="-I$LSOF_INCLUDE -I$OPENBSD_SYS"
    fi	# }
    grep -q VT_EXT2FS ${LSOF_INCLUDE}/sys/vnode.h
    if test $? -eq 0	# {
    then
      LSOF_TMP1=1
      if test -r ${LSOF_INCLUDE}/ufs/ufs/inode.h	# {
      then
	grep -q "*e2fs_din" ${LSOF_INCLUDE}/ufs/ufs/inode.h
	if test $? -eq 0	# {
	then
	  LSOF_CFGF="$LSOF_CFGF -DHASI_E2FS_PTR"
	fi	# }
	grep -q "^#define[ 	]i_e2din" ${LSOF_INCLUDE}/ufs/ufs/inode.h
	if test $? -eq 0	# {
	then
	  LSOF_TMP1=2
	fi	# }
      fi	# }
      LSOF_CFGF="$LSOF_CFGF -DHASEXT2FS=$LSOF_TMP1"
    fi	# }
    if test -r ${LSOF_INCLUDE}/ufs/ufs/inode.h	# {
    then
      grep -q i_effnlink ${LSOF_INCLUDE}/ufs/ufs/inode.h
      if test $? -eq 0	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASEFFNLINK=i_effnlink"
      fi	# }
      grep -q dinode_u ${LSOF_INCLUDE}/ufs/ufs/inode.h
      if test $? -eq 0	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHAS_DINODE_U"
      fi	# }
      grep -q i_ffs1_size ${LSOF_INCLUDE}/ufs/ufs/inode.h
      if test $? -eq 0	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASI_FFS1"
      fi	# }
      grep -q UM_UFS ${LSOF_INCLUDE}/ufs/ufs/inode.h
      if test $? -eq 0	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHAS_UM_UFS"
      fi	# }
    fi	# }
    if test -r ${LSOF_INCLUDE}/sys/namei.h
    then
      grep -q nc_vpid ${LSOF_INCLUDE}/sys/namei.h
      if test $? -eq 0	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASNCVPID"
      fi	# }
    fi	# }
    if test "X$OPENBSD_UVM" = "X"	# {
    then
      if test -r ${LSOF_INCLUDE}/sys/vnode.h	# {
      then
	grep -q UVM ${LSOF_INCLUDE}/sys/vnode.h
	if test $? -ne 0	# {
	then
	  egrep -q "v_uvm;|v_uobj;" ${LSOF_INCLUDE}/sys/vnode.h
	  if test $? -eq 0	# {
	  then
	    OPENBSD_UVM="Y"
	  fi	# }
	fi	# }
      fi	# }
    fi	# }
    if test "X$OPENBSD_UVM" = "XY" -o "X$OPENBSD_UVM" = "Xy"	# {
    then
      LSOF_CFGF="$LSOF_CFGF -DUVM"
      if test -d ${LSOF_INCLUDE}/uvm	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHAS_UVM_INCL"
      fi	# }
    fi	# }
    if test -r ${LSOF_INCLUDE}/sys/mount.h -a $LSOF_VERS -lt 3030	# {
    then

      # Build a local OpenBSD netexport.h header file for possible use by
      # <msdosfs/msdosfsmount.h>.  Make sure CFGL contains a -I for it.

      LSOF_TMP1=${LSOF_TMPC}.edscr
      LSOF_TMP2=${LSOF_TMPC}.netcred
      LSOF_TMP3=${LSOF_TMPC}.netexport
      LSOF_TMP4=dialects/n+obsd/include/netexport.h
      if test ! -d dialects/n+obsd/include	# {
      then
	mkdir dialects/n+obsd/include
      fi	# }
      rm -f $LSOF_TMP1 $LSOF_TMP2 $LSOF_TMP3 $LSOF_TMP4 
      echo "/^struct netcred" > $LSOF_TMP1
      echo "1,.-1d" >> $LSOF_TMP1
      echo "/^};" >> $LSOF_TMP1
      echo "1,.w $LSOF_TMP2" >> $LSOF_TMP1
      ed ${LSOF_INCLUDE}/sys/mount.h < $LSOF_TMP1 > /dev/null 2>&1
      rm -f $LSOF_TMP1
      echo "/^struct netexport" > $LSOF_TMP1
      echo "1,.-1d" >> $LSOF_TMP1
      echo "/^};" >> $LSOF_TMP1
      echo "1,.w $LSOF_TMP3" >> $LSOF_TMP1
      ed ${LSOF_INCLUDE}/sys/mount.h < $LSOF_TMP1 > /dev/null 2>&1
      echo "/*" > $LSOF_TMP4
      echo " * netexport.h" >> $LSOF_TMP4
      echo -n " * Created by Configure: " >> $LSOF_TMP4
      echo `date` >> $LSOF_TMP4
      echo " */" >> $LSOF_TMP4
      echo "" >> $LSOF_TMP4
      echo "#if	!defined(NETEXPORT_H)" >> $LSOF_TMP4
      echo "#define	NETEXPORT_H" >> $LSOF_TMP4
      echo "" >> $LSOF_TMP4
      echo "#include <net/radix.h>" >> $LSOF_TMP4
      echo "" >> $LSOF_TMP4
      if test -r $LSOF_TMP2	# {
      then
	cat $LSOF_TMP2 >> $LSOF_TMP4
	echo "" >> $LSOF_TMP4
      fi	# }
      if test -r $LSOF_TMP3	# {
      then
	cat $LSOF_TMP3 >> $LSOF_TMP4
      fi	# }
      echo "#endif	/* !defined(NETEXPORT_H) */" >> $LSOF_TMP4
      rm -f $LSOF_TMP1 $LSOF_TMP2 $LSOF_TMP3
      echo $LSOF_CFGF | grep /dialects/n+obsd/include > /dev/null 2>&1
      if test $? -ne 0	# {
      then
	LSOF_CFGF="$LSOF_CFGF -I`pwd`/dialects/n+obsd/include"
      fi	# }
    fi	# }
    if test -r ${LSOF_INCLUDE}/sys/lockf.h	# {
    then
      grep vop_advlock_args ${LSOF_INCLUDE}/sys/lockf.h > /dev/null
      if test $? -eq 0	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHAS_ADVLOCK_ARGS"
      fi	# }
    fi	# }
    if test -r ${LSOF_INCLUDE}/sys/pipe.h	# {
    then
      LSOF_CFGF="$LSOF_CFGF -DHAS_SYS_PIPEH"
    fi	# }
    LSOF_CFGL="$LSOF_CFGL -lkvm"
    LSOF_DIALECT_DIR=n+obsd
    ;;

# Configure for SCO OpenServer.

  osr|osrgcc|sco|scogcc)
    if test "X$LSOF_RANLIB_SUP" = "X"	# {
    then
      LSOF_RANLIB=""
    fi	# }
    if test "X$OSR_CFGF" != "X"	# {
    then

    # Adopt LSOF_CFGF from OSR_CFGF in environment.

      LSOF_CFGF=$OSR_CFGF
    fi	# }
    if test "X$OSR_CFGL" != "X"	# {
    then

    # Adopt LSOF_CFGL from OSR_CFGL in environment.

      LSOF_CFGL=$OSR_CFGL
    fi	# }

  # Evaluate compiler specification.

    if test "X$LSOF_CC" = "X"	# {
    then
      if test "X$LSOF_TGT" = "Xosr" -o "X$LSOF_TGT" = "Xsco"	# {
      then
	LSOF_CC=cc
	LSOF_TMP1=1
      else
	LSOF_CC=gcc
	LSOF_CCV=`$LSOF_CC -v 2>&1 | sed -n 's/.*version \(.*\)/\1/p'`
	LSOF_TMP1=2
      fi	# }
    else
	LSOF_TMP1=0
    fi	# }
    LSOF_TGT="osr"

  # Determine version.

    if test "X$LSOF_VSTR" = "X"	# {
    then
      LSOF_VSTR="`LANG=C_C.C /bin/uname -X 2>/dev/null | grep Release | sed 's/Release = \(.*\)/\1/'`"
    fi	# }
    if test "X$LSOF_VERS" = "X"	# {
    then

      # If the SCO OpenServer release version isn't predefined, determine it.

      case $LSOF_VSTR in	# {
      3.2v2.0)
	LSOF_VERS="20"
	;;
      3.2v2.1)
	LSOF_VERS="21"
	;;
      3.2v4.0)
	LSOF_VERS="40"
	;;
      3.2v4.1)
	LSOF_VERS="41"
	;;
      3.2v4.2)
	LSOF_VERS="42"
	;;
      3.2v5.*)
	LSOF_TSTLFLG="-lsocket"
	LSOF_VERS="`echo $LSOF_VSTR | sed 's/3\.2v//; s/\.//g'`"
	;;
      *)
	echo Unknown SCO OpenServer release: $LSOF_VSTR
	echo Assuming 3.2.0 or 3.2.1
	LSOF_VERS="0"
	;;
      esac	# }
    fi	# }

    # Do SCO OpenServer specific stuff.

    case $LSOF_VERS in	# {
    0)
      if test $LSOF_TMP1 -eq 1	# {
      then
	LSOF_CFGF="$LSOF_CFGF -nointl"
	LSOF_DEBUG="-Ox"
      fi	# }
      LSOF_CFGL="$LSOF_CFGL -lrpc -lsocket -lc_s"
      LSOF_MKC="cp"
      ;;
    20)
      if test $LSOF_TMP1 -eq 1	# {
      then
	LSOF_DEBUG="-Ox"
      fi	# }
      LSOF_CFGL="$LSOF_CFGL -lrpc -lsocket -lc_s"
      LSOF_MKC="cp"
      ;;
    21)
      if test $LSOF_TMP1 -eq 1	# {
      then
	LSOF_CFGF="$LSOF_CFGF -nointl"
	LSOF_DEBUG="-Ox"
      fi	# }
      LSOF_CFGL="$LSOF_CFGL -lrpc -lsocket -lc_s"
      LSOF_MKC="cp"
      ;;
    40)
      if test $LSOF_TMP1 -eq 1	# {
      then
	LSOF_CFGF="$LSOF_CFGF -nointl"
	LSOF_DEBUG="-Ox"
      fi	# }
      LSOF_CFGL="$LSOF_CFGL -lrpc -lsocket -lc_s"
      ;;
    41)
      if test $LSOF_TMP1 -eq 1	# {
      then
	LSOF_CFGF="$LSOF_CFGF -nointl"
	LSOF_DEBUG="-Ox"
      fi	# }
      LSOF_CFGL="$LSOF_CFGL -lrpc -lsocket -lc_s"
      ;;
    42)
      if test $LSOF_TMP1 -eq 1	# {
      then
	LSOF_CFGF="$LSOF_CFGF -nointl"
	LSOF_DEBUG="-Ox"
      fi	# }
      LSOF_CFGL="$LSOF_CFGL -lrpc -lsocket -lc_s"
      ;;
    5*)
      if test $LSOF_TMP1 -eq 1	# {
      then
	LSOF_CFGF="$LSOF_CFGF -belf"
	LSOF_DEBUG="-O3 -Kspace"
      fi	# }
      LSOF_CFGL="$LSOF_CFGL -lsocket"
      ;;
    *)
      echo "Unsupported SCO OpenServer release: $LSOF_VERS"
      rm -f $LSOF_HLP
      exit 1
      ;;
    esac	# }
    LSOF_CFGF="$LSOF_CFGF -DOSRV=$LSOF_VERS"
    if test "X$OSR_STATLSTAT" = "X"	# {
    then
      echo "Testing libc.a for statlstat"
      /bin/nm /lib/libc.a | grep statlstat > /dev/null 2>&1
      if test $? -eq 0	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHAS_STATLSTAT"
      fi	# }
    else
      if test "X$OSR_STATLSTAT" = "XY" -o "X$OSR_STATLSTAT" = "Xy"	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHAS_STATLSTAT"
      fi	# }
    fi	# }
    if test -r ${LSOF_INCLUDE}/sys/fs/nfs/rnode.h	# {
    then
      LSOF_CFGF="$LSOF_CFGF -DHAS_NFS"
    fi	# }
    if test ! -r ${LSOF_INCLUDE}/netdb.h	# {
    then
      LSOF_DINC="$LSOF_DINC -I`pwd`/dialects/osr/include"
    fi	# }
    LSOF_DIALECT_DIR=osr
    ;;

# Configure for Sun Solaris, SunPro C and gcc.

  solaris|solariscc)
    if test "X$LSOF_RANLIB_SUP" = "X"	# {
    then
      LSOF_RANLIB=""
    fi	# }
    if test "X$LSOF_CC" = "X"	# {
    then
      if test "X$LSOF_TGT" = "Xsolariscc"	# {
      then
	if test "X$SOLARIS_CCDIR" = "X"	# {
	then
	  SOLARIS_CCDIR="/opt/SUNWspro/bin"
	fi	# }
	if test -x ${SOLARIS_CCDIR}/cc	# {
	then
	  LSOF_CC=${SOLARIS_CCDIR}/cc
	else
	  if test -x /opt/SunStudioExpress/bin/cc	# {
	  then
	    LSOF_CC=/opt/SunStudioExpress/bin/cc
	  else
	    echo "WARNING: no cc in ${SOLARIS_CCDIR}; using cc without path."
	    LSOF_CC=cc
	  fi	# }
	fi	# }
	LSOF_CCV=`$LSOF_CC -V 2>&1 | sed -n 's/^cc: \(.*\)/\1/p'`
      else
	LSOF_CC=gcc
	LSOF_CCV=`$LSOF_CC -v 2>&1 | sed -n 's/.*version \(.*\)/\1/p'`
      fi	# }
    fi	# }
    LSOF_TGT="solaris"
    if test "X$LSOF_VSTR" = "X"	# {
    then
      LSOF_VSTR=`uname -r`
    fi	# }
    if test "X$LSOF_VERS" = "X"	# {
    then

      # If the Solaris version isn't predefined, determine it.

      case $LSOF_VSTR in	# {
      5.[0-2])
	LSOF_VERS="20300"
	;;
      5.3)
	LSOF_VERS="20300"
	;;
      5.4)
	LSOF_VERS="20400"
	;;
      5.5)
	LSOF_VERS="20500"
	;;
      5.5.1)
	LSOF_VERS="20501"
	;;
      5.6*)
	LSOF_TSTLFLG="-lsocket -lnsl"
	LSOF_VERS="20600"
	;;
      5.7*)
	LSOF_TSTBIGF=" "
	LSOF_TSTLFLG="-lsocket -lnsl"
	LSOF_VERS="70000"
	;;
      5.8*)
	LSOF_TSTBIGF=" "
	LSOF_TSTLFLG="-lsocket -lnsl"
	LSOF_VERS="80000"
	;;
      5.9*)
	LSOF_TSTBIGF=" "
	LSOF_TSTLFLG="-lsocket -lnsl"
	LSOF_VERS="90000"
	;;
      5.10*)
	LSOF_TSTBIGF=" "
	LSOF_TSTLFLG="-lsocket -lnsl"
	LSOF_VERS="100000"
	;;
      5.11*)
	LSOF_TSTBIGF=" "
	LSOF_TSTLFLG="-lsocket -lnsl"
	LSOF_VERS="110000"
	;;
      *)
	echo Unknown Solaris version: $LSOF_VSTR
	rm -f $LSOF_HLP
	exit 1
      esac	# }
    fi	# }

    # Clear LSOF_UNSUP message for selected Solaris versions.

    case $LSOF_VERS in	# {
    90000|100000|110000)
      LSOF_UNSUP=""
      ;;
    esac	# }

    # Do Solaris version-specific stuff.

    case $LSOF_VERS in	# {
    20300)

      # Solaris patch 101318-32 creates a longer kernel tcp_s structure,
      # and 101318-45 changes the way the vnode's v_filocks member is
      # handled.  The following code creates a symbol definition for
      # patch 101318 whose value is the patch level.  No symbol is defined
      # if the patch level is not greater than zero.

      if test "X$SOLARIS_23P101318" = "X"	# {
      then
	LSOF_PL=`grep -h SUNW_PATCHID=101318 /var/sadm/pkg/SUNWcar*/pkginfo | sed 's/.*-//' | sort -u | tail -1`
	if test "X$LSOF_PL" = "X"	# {
	then
	  LSOF_PL=0
	fi	# }
      else
	LSOF_PL=$SOLARIS_23P101318
      fi	# }
      if test $LSOF_PL -gt 0	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DP101318=$LSOF_PL"
      fi	# }
      ;;
    20400)
      if test "X$SOLARIS_24P101945" = "X"	# {
      then
	LSOF_PL=`grep -h SUNW_PATCHID=101945 /var/sadm/pkg/SUNWcar*/pkginfo | sed 's/.*-//' | sort -u | tail -1`
	if test "X$LSOF_PL" = "X"	# {
	then
	  LSOF_PL=0
	fi	# }
      else
	LSOF_PL=$SOLARIS_24P101945
      fi	# }
      if test $LSOF_PL -ge 32	# {
      then
	if test "X$SOLARIS_24P102303" = "X"	# {
	then
	  LSOF_PL=`grep -h SUNW_PATCHID=102303 /var/sadm/pkg/SUNWhea*/pkginfo | sed 's/.*-//' | sort -u | tail -1`
	  if test "X$LSOF_PL" = "X"	# {
	  then
	    LSOF_PL=0
	  fi	# }
	else
	  LSOF_PL=$SOLARIS_24P102303
	fi	# }
	if test $LSOF_PL -ge 2	# {
	then
	  echo "WARNING: your Solaris 2.4 system appears to have patches 101945-32 and 102303-2"
	  echo "         installed.  This probably means the NUM_*_VECTORS definitions in"
	  echo "         <sys/auxv.h> don't match the ones used to build your kernel.  Consult"
	  echo "         the Sun Problems section of the 00FAQ file of the lsof distribution"
	  echo "         for more information on how to work around the problem."
	fi	# }
      fi	# }
      ;;
    20500|20501)
      ;;
    20600|70000|80000|90000|100000|110000)
      if test "X$SOLARIS_26PR_GWINDOWS" = "X"	# {
      then
	rm -f ${LSOF_TMPC}.*
	echo "#define _KMEMUSER" > ${LSOF_TMPC}.c
	echo "#include <sys/proc/prdata.h>" >> ${LSOF_TMPC}.c
	echo "main(){" >> ${LSOF_TMPC}.c
	echo "enum prnodetype p=PR_GWINDOWS;}" >> ${LSOF_TMPC}.c
	echo "Testing prdata.h for PR_GWINDOWS, using $LSOF_CC"
	echo $LSOF_CC | grep gcc > /dev/null
	if test $? -eq 0	# {
	then
	  $LSOF_CC ${LSOF_TMPC}.c -o ${LSOF_TMPC}.x  > /dev/null 2>&1
	else
	  $LSOF_CC ${LSOF_TMPC}.c -I$LSOF_INCLUDE -o ${LSOF_TMPC}.x  > /dev/null 2>&1
	fi	# }
	if test $? -eq 0	# {
	then
	  LSOF_CFGF="$LSOF_CFGF -DHASPR_GWINDOWS"
	fi	# }
      else
	if test "X$SOLARIS_26PR_GWINDOWS" = "XY" -o "X$SOLARIS_26PR_GWINDOWS" = "Xy"	# {
	then
	  LSOF_CFGF="$LSOF_CFGF -DHASPR_GWINDOWS"
	fi	# }
      fi	# }
      if test "X$SOLARIS_26PR_LDT" = "X"	# {
      then
	rm -f ${LSOF_TMPC}.*
	echo "#define _KMEMUSER" > ${LSOF_TMPC}.c
	echo "#include <sys/proc/prdata.h>" >> ${LSOF_TMPC}.c
	echo "main(){" >> ${LSOF_TMPC}.c
	echo "enum prnodetype p=PR_LDT;}" >> ${LSOF_TMPC}.c
	echo "Testing prdata.h for PR_LDT, using $LSOF_CC"
	echo $LSOF_CC | grep gcc > /dev/null
	if test $? -eq 0	# {
	then
	  $LSOF_CC ${LSOF_TMPC}.c -o ${LSOF_TMPC}.x > /dev/null 2>&1
	else
	  $LSOF_CC ${LSOF_TMPC}.c -I$LSOF_INCLUDE -o ${LSOF_TMPC}.x > /dev/null 2>&1
	fi	# }
	if test $? -eq 0	# {
	then
	  LSOF_CFGF="$LSOF_CFGF -DHASPR_LDT"
	fi	# }
	rm -f ${LSOF_TMPC}.*
      else
	if test "X$SOLARIS_26PR_LDT" = "XY" -o "X$SOLARIS_26PR_LDT" = "Xy"	# {
	then
	  LSOF_CFGF="$LSOF_CFGF -DHASPR_LDT"
	fi	# }
      fi	# }
      if test $LSOF_VERS -ge 70000	# {
      then

      # Do tests for Solaris 7 and above.

	if test "X$SOLARIS_KERNBITS" = "X"	# {
	then
	  SOLARIS_KERNBITS=`/bin/isainfo -kv`
	fi	# }
	if test "X$SOLARIS_INSTR" = "X"	# {
	then
	  SOLARIS_INSTR=`/bin/isainfo -k`
	fi	#}
	echo $SOLARIS_KERNBITS | grep 64 > /dev/null
	if test $? -eq 0	# {
	then
	  echo $LSOF_CC | grep gcc > /dev/null
	  if test $? -eq 0	# {
	  then

	# Test gcc for 64 bit support.

	    echo "Testing $LSOF_CC for 64 bit support"
	    rm -f ${LSOF_TMPC}.*
	    echo "main(){}" > ${LSOF_TMPC}.c
	    LSOF_TMP1=""

	# First try gcc's -m64 option -- it's the most current possibility.

	    $LSOF_CC ${LSOF_TMPC}.c -m64 -o ${LSOF_TMPC}.x > /dev/null 2>&1
	    if test $? -eq 0	# {
	    then
	      /bin/file ${LSOF_TMPC}.x | /bin/grep 64 > /dev/null 
	      if test $? -eq 0	# {
	      then
		LSOF_TMP1="-m64"
	      fi	# }
	    fi	# }
	    rm -f ${LSOF_TMPC}.*
	    if test "X$LSOF_TMP1" = "X"	# {
	    then

	    # Try using the older -mcpu=v9 option with gcc instead of -m64.

	      echo "main(){}" > ${LSOF_TMPC}.c
	      $LSOF_CC ${LSOF_TMPC}.c -mcpu=v9 -o ${LSOF_TMPC}.x > /dev/null 2>&1
	      if test $? -eq 0	# {
	      then
		/bin/file ${LSOF_TMPC}.x | /bin/grep 64 > /dev/null 
		if test $? -eq 0	# {
		then
		  LSOF_TMP1="-mcpu=v9"
		fi	# }
	      fi	# }
	      rm -f ${LSOF_TMPC}.*
	    fi	# }
	    if test "X$LSOF_TMP1" = "X"	# {
	    then
	      echo ""
	      echo "!!!WARNING!!!=========!!!WARNING!!!=========!!!WARNING!!!"
	      echo "!                                                       !"
	      echo "! LSOF NEEDS TO BE CONFIGURED FOR A 64 BIT KERNEL, BUT  !"
	      echo "! THIS GCC DOESN'T SUPPORT THE BUILDING OF 64 BIT       !"
	      echo "! SOLARIS EXECUTABLES.  LSOF WILL BE CONFIGURED FOR A   !"
	      echo "! 32 BIT KERNEL.                                        !"
	      echo "!                                                       !"
	      echo "!!!WARNING!!!=========!!!WARNING!!!=========!!!WARNING!!!"
	      echo ""
	    else
	      echo ""
	      echo "*********************************"
	      echo "* Configuring for 64 bit kernel *"
	      echo "*********************************"
	      echo ""
	      LSOF_CFGF="$LSOF_CFGF $LSOF_TMP1"
	      LSOF_CINFO="64 bit kernel"
	      LSOF_TSTK64=1
	    fi	# }
	  else

	  # Test Sun compiler for 64 bit support.

	    case $SOLARIS_INSTR in	# {
	    amd64*)
	      LSOF_TMP1="amd64"
	      LSOF_TMP2="amd64"
	      ;;
	    sparc*)
	      LSOF_TMP1="v9"
	      LSOF_TMP2="sparcv9"
	      ;;
	    *)
	      LSOF_TMP1=""
	      ;;
	    esac	# }
	    if test "X$LSOF_TMP1" != "X"	# {
	    then
	      echo "Testing $LSOF_CC for 64 bit $LSOF_TMP2 support"
	      rm -f ${LSOF_TMPC}.*
	      LSOF_TMP3="-xarch=$LSOF_TMP1"
	      echo "main(){}" > ${LSOF_TMPC}.c
	      LSOF_TMP4=`$LSOF_CC ${LSOF_TMPC}.c $LSOF_TMP3 -o ${LSOF_TMPC}.x 2>&1`
	      if test $? -eq 0	# {
	      then
		/bin/file ${LSOF_TMPC}.x | /bin/grep 64 > /dev/null 
		if test $? -ne 0	# {
		then
		  LSOF_TMP3=""
		else
		  echo "X$LSOF_TMP4" | grep "use -m64" > /dev/null 2>&1
		  if test $? -eq 0	# {
		  then
		    LSOF_TMP3=-m64
		  fi	# }
		fi	# }
	      fi	# }
	      rm -f ${LSOF_TMPC}.*
	    else
	      LSOF_TMP3=""
	    fi	# }
	    if test "X$LSOF_TMP3" != "X"	# {
	    then
	      echo ""
	      echo "*********************************"
	      echo "* Configuring for 64 bit kernel *"
	      echo "*********************************"
	      echo ""
	      LSOF_CFGF="$LSOF_CFGF $LSOF_TMP3"
	      LSOF_CINFO="64 bit kernel"
	      LSOF_TSTK64=1
	    else
	      echo ""
	      echo "!!!WARNING!!!==========!!!WARNING!!!==========!!!WARNING!!!"
	      echo "!"
	      echo "! LSOF NEEDS TO BE CONFIGURED FOR A 64 BIT KERNEL, BUT"
	      echo "! THE VERSION OF SUN C AVAILABLE DOESN'T SUPPORT THE"
	      echo "! \"$LSOF_TMP2\" INSTRUCTION SET."
	      echo "!"
	      echo "! LSOF WILL BE CONFIGURED FOR A 32 BIT KERNEL."
	      echo "!"
	      echo "!!!WARNING!!!==========!!!WARNING!!!==========!!!WARNING!!!"
	      echo ""
	    fi	# }
	  fi	# }
	else
	  echo ""
	  echo "*********************************"
	  echo "* Configuring for 32 bit kernel *"
	  echo "*********************************"
	  echo ""
	  LSOF_CINFO="32 bit kernel"
	fi	# }
      fi	# }

      # Do tests specific to Solaris 8 and above.

      if test $LSOF_VERS -ge 80000	# {
      then
	if test -r ${LSOF_INCLUDE}/netinet/ip6.h	# {
	then
	  LSOF_CFGF="$LSOF_CFGF -DHASIPv6"
	fi	# }
      fi	# }

      # Do tests specific to Solaris 9 and above.

      if test $LSOF_VERS -ge 90000	# {
      then
	if test -r ${LSOF_INCLUDE}/sys/socketvar.h	# {
	then
	  grep soua_vp ${LSOF_INCLUDE}/sys/socketvar.h > /dev/null 2>&1
	  if test $? -eq 0	# {
	  then
	    LSOF_CFGF="$LSOF_CFGF -DHASSOUXSOUA"
	  fi	# }
	fi	# }
	if test $LSOF_VERS -lt 110000	# {
	then

	# Do tests specific to Solaris 9 and 10.

	  if test -r ${LSOF_INCLUDE}/sys/lgrp_user.h      # {
	  then
	    if test -r ${LSOF_INCLUDE}/sys/lgrp.h      # {
	    then
	      grep lgrp_root ${LSOF_INCLUDE}/sys/lgrp_user.h > /dev/null 2>&1
	      if test $? -eq 0	# {
	      then
		grep lgrp_root ${LSOF_INCLUDE}/sys/lgrp.h > /dev/null 2>&1
		if test $? -eq 0
		then
		  LSOF_CFGF="$LSOF_CFGF -DHAS_LGRP_ROOT_CONFLICT"
		fi	# }
	      fi	# }
	    fi	# }
	  fi	# }
	fi	# }
      fi	# }

      # Do tests specific to Solaris 10 and above.

      if test $LSOF_VERS -eq 100000	# {
      then
	if test -r ${LSOF_INCLUDE}/sys/socket_proto.h	# {
	then
	    LSOF_CFGF="$LSOF_CFGF -DHAS_SOCKET_PROTO_H"
	fi	# }
      fi	# }
      if test $LSOF_VERS -ge 100000	# {
      then
	if test -r ${LSOF_INCLUDE}/inet/ipclassifier.h	# {
	then
	  LSOF_CFGF="$LSOF_CFGF -DHAS_IPCLASSIFIER_H"
	  grep conn_ixa ${LSOF_INCLUDE}/inet/ipclassifier.h > /dev/null 2>&1
	  if test $? -eq 0	# {
	  then
	    LSOF_CFGF="$LSOF_CFGF -DHAS_CONN_NEW"
	  fi	#}
	fi	# }
	if test -r ${LSOF_INCLUDE}/sys/cred_impl.h	# {
	then
	  LSOF_CFGF="$LSOF_CFGF -DHAS_CRED_IMPL_H"

	  # DEBUG -- Begin temporary hack for Solaris 10, build s10_44.

	  grep "c2/audit.h" ${LSOF_INCLUDE}/sys/cred_impl.h > /dev/null
	  if test $? -eq 0	# {
	  then
	    rm -rf `pwd`/dialects/sun/solaris10
	    mkdir `pwd`/dialects/sun/solaris10
	    mkdir `pwd`/dialects/sun/solaris10/c2
	    touch `pwd`/dialects/sun/solaris10/c2/audit.h
	    LSOF_CFGF="$LSOF_CFGF -I`pwd`/dialects/sun/solaris10"
	  fi	# }

	  # DEBUG -- End temporary hack for Solaris 10, build s10_44.

	fi	# }
	if test -r ${LSOF_INCLUDE}/sys/vnode.h	# {
	then
	  grep v_path ${LSOF_INCLUDE}/sys/vnode.h > /dev/null 2>&1
	  if test $? -eq 0	# {
	  then
	    LSOF_CFGF="$LSOF_CFGF -DHAS_V_PATH"
	    LSOF_TSTVPATH=1
	  fi	# }
	fi	# }
	if test -r ${LSOF_INCLUDE}/sys/fs/pc_fs.h	# {
	then
	  grep pc_direntpersec ${LSOF_INCLUDE}/sys/fs/pc_fs.h > /dev/null 2>&1
	  if test $? -eq 0	# {
	  then
	    LSOF_CFGF="$LSOF_CFGF -DHAS_PC_DIRENTPERSEC"
	  fi	# }
	fi	# }
	if test -r ${LSOF_INCLUDE}/sys/aio_req.h	# {
	then
	  grep "struct[ 	]aio_req" ${LSOF_INCLUDE}/sys/aio_req.h > /dev/null 2>&1
	  if test $? -eq 0	# {
	  then
	    LSOF_CFGF="$LSOF_CFGF -DHAS_AIO_REQ_STRUCT"
	  fi	# }
	fi	# }
      fi	# }
      if test -r ${LSOF_INCLUDE}/sys/zone.h	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASZONES"
      fi	# }

      # Check for Solaris 10 or higher CTF library and things that depend
      # on it.

      if test -r ${LSOF_INCLUDE}/libctf.h	# {
      then
	LSOF_CTFH=1
      fi	# }
      if test -r ${LSOF_INCLUDE}/sys/fs/zfs.h	# {
      then
	if test $LSOF_CTFH -eq 1	# {
	then
	  LSOF_CFGF="$LSOF_CFGF -DHAS_ZFS"
	  LSOF_CTFL=1
	else
	  echo "WARNING: ZFS support not enabled; libctf.h missing."
	fi	# }
      fi	# }
      if test $LSOF_VERS -ge 110000	# {
      then

      # Do things specific to Solaris 11 and above.

	if test $LSOF_CTFH -eq 1	# {
	then
	  LSOF_CTFL=1
	else
	  echo "WARNING: socket support not enabled; libctf.h missing."
	fi	# }
	rm -rf ./solaris11
	mkdir ./solaris11
	mkdir ./solaris11/sys
	touch ./solaris11/sys/extdirent.h
	echo "./solaris11/sys/extdirent.h created"
	LSOF_CFGF="$LSOF_CFGF -I`pwd`/solaris11"
	if test -r ${LSOF_INCLUDE}/sys/mutex.h	# {
	then

	# Check <sys/mutex.h> 'for pad_mutex_t;'.

	  grep 'pad_mutex_t;' ${LSOF_INCLUDE}/sys/mutex.h > /dev/null 2>&1
	  if test $? -eq 0	# {
	  then
	    LSOF_CFGF="$LSOF_CFGF -DHAS_PAD_MUTEX"
	  fi	# }
	fi	# )
      fi	# }

      # If -lctf was added to LSOF_CFGL, define HAS_LIBCTF.

      if test $LSOF_CTFL -eq 1	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHAS_LIBCTF"
	LSOF_CFGL="$LSOF_CFGL -lctf"
      fi	# }
      ;;
    *)
      echo "Unsupported Solaris version: $LSOF_VERS"
      rm -f $LSOF_HLP
      exit 1
      ;;
    esac	# }
    LSOF_CFGF="$LSOF_CFGF -Dsolaris=$LSOF_VERS"

    # Test for <sys/fs/cachefs_fs.h>.

    if test -r ${LSOF_INCLUDE}/sys/fs/cachefs_fs.h	# {
    then
      LSOF_CFGF="$LSOF_CFGF -DHASCACHEFS"
    fi	# }

    # Test for <utmpx.h>

    if test -r ${LSOF_INCLUDE}/utmpx.h	# {
    then
      LSOF_CFGF="$LSOF_CFGF -DHASUTMPX"
    fi	# }

    # Test for VSOCK.

    if test "X$SOLARIS_VSOCK" = "X"	# {
    then
      rm -f ${LSOF_TMPC}.*
      echo "#include <sys/vnode.h>" > ${LSOF_TMPC}.c
      echo "main(){" >> ${LSOF_TMPC}.c
      echo "enum vtype p=VSOCK;}" >> ${LSOF_TMPC}.c
      echo "Testing vnode.h for VSOCK, using $LSOF_CC"
      echo $LSOF_CC | grep gcc > /dev/null
      if test $? -eq 0	# {
      then
	$LSOF_CC ${LSOF_TMPC}.c -o ${LSOF_TMPC}.x > /dev/null 2>&1
      else
	$LSOF_CC ${LSOF_TMPC}.c -I$LSOF_INCLUDE -o ${LSOF_TMPC}.x > /dev/null 2>&1
      fi	# }
      if test $? -eq 0	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHAS_VSOCK"
      fi	# }
      rm -f ${LSOF_TMPC}.*
    else
      if test "X$SOLARIS_VSOCK" = "XY" -o "X$SOLARIS_VSOCK" = "Xy"	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHAS_VSOCK"
      fi	# }
    fi	# }

    # Test for AFS.

    if test -r ${AFS_VICE}/etc/ThisCell	# {
    then
      if test "X$LSOF_SCRIPT_CALL" = "Xno"	# {
      then
	if test -r ./AFSHeaders -a -r ./AFSVersion	# {
	then
	  LSOF_AFS="yes"
	fi	# }
      else
	if test ! -x ./AFSConfig	# {
	then
	  echo "Can't find or execute the AFSConfig script"
	  rm -f $LSOF_HLP
	  exit 1
	fi	# }
	./AFSConfig
	if test $? -eq 0 -a -r ./AFSHeaders -a -r ./AFSVersion	# {
	then
	    LSOF_AFS="yes"
	fi	# }
      fi	# }
      if test "X$LSOF_AFS" = "Xyes"	# {
      then
	if test "X$SUN_AFSAPATHDEF" = "X"	# {
	then
	  ls /usr/vice/etc/modload/libafs > /dev/null 2>&1
	  if test $? -ne 0	# {
	  then
	    LSOF_TMP1=`ls /usr/vice/etc/modload/libafs* 2>/dev/null | wc -l`
	    if test $LSOF_TMP1 -ne 0	# {
	    then
	      SUN_AFSAPATHDEF=`ls -t /usr/vice/etc/modload/libafs* | head -1`
	    fi	# }
	  fi	# }
	fi	# }
	if test "X$SUN_AFSAPATHDEF" != "X"	# {
	then
	  LSOF_CFGF="$LSOF_CFGF -DAFSAPATHDEF=\\\"$SUN_AFSAPATHDEF\\\""
	fi	# }
	LSOF_AFSV=`cat ./AFSVersion | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1 \2/' | awk '{printf "%d%02d\n",\$1,\$2}'`
	LSOF_CFGF="$LSOF_CFGF -DHAS_AFS=$LSOF_AFSV"
	LSOF_DINC="$LSOF_DINC -I`cat ./AFSHeaders`"
      fi	# }
    fi	# }

    # Test for VxFS.
    #
    # If the location of the VxFS header files hasn't been defined in the
    # environment, establish their likely locations.

    LSOF_TMP2=$SOLARIS_VXFSINCL
    if test -d /opt/VRTS/include	# {
    then
      LSOF_TMP2="$LSOF_TMP2 /opt/VRTS/include"
    fi	# }
    if test -d /opt/VRTSvxfs/include	# {
    then
      LSOF_TMP2="$LSOF_TMP2 /opt/VRTSvxfs/include"
    fi	# }
    LSOF_TMP1=0
    for i in $LSOF_TMP2	# {
    do
      if test -r ${i}/vxfsutil.h	# {
      then
	LSOF_TMP1=1
	SOLARIS_VXFSINCL=$i
	break
      fi	# }
    done	# }
    if test $LSOF_TMP1 -eq 1	# {
    then

    # Warn that VxFS is unsupported.

      LSOF_UNSUP2="WARNING: VxFS is no longer supported by Solaris lsof."

    # The VxFS header files are for VxFS version 3.4 or above.  Enable VxFS
    # for those versions.

      LSOF_CFGF="$LSOF_CFGF -DHASVXFS -DHASVXFSUTIL -I$SOLARIS_VXFSINCL"

    # Determine which libvxfsutil.a is required -- 32 or 64 bit.

      LSOF_TMP2=""			# assume 32 bit
      echo "X$LSOF_CINFO" | grep "^X64" > /dev/null 2>&1
      if test $? -eq 0-a "X$SOLARIS_INSTR" != "X"	# {
      then
	case $SOLARIS_INSTR in	# {
	amd64*)
	  LSOF_TMP2="/amd64"
	  ;;
	sparcv9*)
	  LSOF_TMP2="/sparcv9"
	  ;;
	esac	# }
      fi	# }

    # See if the correct library has been specified and exists.

      if test "X$SOLARIS_VXFSLIB" = "X"	# {
      then
	SOLARIS_VXFSLIB=`dirname $SOLARIS_VXFSINCL`/lib
      fi	# }
      LSOF_TMP3="${SOLARIS_VXFSLIB}${LSOF_TMP2}/libvxfsutil.a"
      if test ! -r $LSOF_TMP3	# {
      then
	echo "!!!FATAL: no VxFS $LSOF_TMP3"
	exit 1
      fi	# }
      LSOF_CFGL="$LSOF_CFGL -L$SOLARIS_VXFSLIB${LSOF_TMP2} -lvxfsutil -ldl"

    # See if the library has the Reverse Name Lookup (RNL) function.

      nm $LSOF_TMP3 | grep vxfs_inotopath > /dev/null 2>&1
      if test $? -eq 0	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASVXFSRNL -DHASVXFSDNLC"
      fi	# }
    else

    # See if there are VxFS header files for VxFS versions below 3.4.

      if test -r ${LSOF_INCLUDE}/sys/fs/vx_inode.h	# {
      then

      # Define VxFS for VxFS versions below 3.4.  Make additional header
      # file tests.

	LSOF_CFGF="$LSOF_CFGF -DHASVXFS"
	if test -r ${LSOF_INCLUDE}/sys/fs/vx_fs.h	# {
	then
	  LSOF_CFGF="$LSOF_CFGF -DHASVXFS_FS_H"
	fi	# }
	if test -r ${LSOF_INCLUDE}/sys/fs/vx_sol.h	# {
	then
	  LSOF_CFGF="$LSOF_CFGF -DHASVXFS_SOL_H"
	fi	# }
	if test -r ${LSOF_INCLUDE}/sys/fs/vx_machdep.h	# {
	then
	  LSOF_CFGF="$LSOF_CFGF -DHASVXFS_MACHDEP_H"
	fi	# }
	if test -r ${LSOF_INCLUDE}/sys/fs/vx_solaris.h	# {
	then
	  LSOF_CFGF="$LSOF_CFGF -DHASVXFS_SOLARIS_H"
	  grep "off32_t;" ${LSOF_INCLUDE}/sys/fs/vx_machdep.h > /dev/null
	  if test $? -eq 0	# {
	  then
	    LSOF_CFGF="$LSOF_CFGF -DHASVXFS_OFF32_T"
	  fi	# }
	  grep "off64_t;" ${LSOF_INCLUDE}/sys/fs/vx_solaris.h > /dev/null
	  if test $? -eq 0	# {
	  then
	    LSOF_CFGF="$LSOF_CFGF -DHASVXFS_OFF64_T"
	  fi	# }
	  grep "vx_u64_t;" ${LSOF_INCLUDE}/sys/fs/vx_solaris.h > /dev/null
	  if test $? -eq 0	# {
	  then
	    LSOF_CFGF="$LSOF_CFGF -DHASVXFS_U64_T"
	  fi	# }
	fi	# }
	egrep "struct[ 	]vx_inode[ 	]\{" ${LSOF_INCLUDE}/sys/fs/vx_inode.h > /dev/null
	# } (dummy '}' to match '{' in above egrep)
	if test $? -eq 0	# {
	then
	  LSOF_CFGF="$LSOF_CFGF -DHASVXFS_VX_INODE"
	fi	# }
      fi	# }
    fi	# }

    # Set libraries and dialect subdirectory.

    LSOF_CFGL="$LSOF_CFGL -lkvm -lelf -lsocket -lnsl"
    LSOF_DIALECT_DIR=sun

    # Set local-specific stuff.

    if test "X$LSOF_LOCALSUFFIX" = "XLOCAL"	# {
    then
      LSOF_DOC="\${DESTDIR}/usr/local/man"
    fi	# }
    ;;

# Configure for SCO|Caldera OpenServer Release 6.0.0 and UnixWare.

  osr6|unixware|uw)
    LSOF_TMP1=$LSOF_TGT
    LSOF_TGT="uw"
    if test "X$LSOF_RANLIB_SUP" = "X"	# {
    then
      LSOF_RANLIB=""
    fi	# }
    if test "X$LSOF_VSTR" = "X"	# {
    then
      LSOF_VSTR=`uname -v`
    fi	# }
    if test "X$LSOF_VERS" = "X"	# {
    then

      # If the Openserver Release 6.0.0 or UnixWare version isn't pre-defined,
      # determine it.

      LSOF_VERS=`echo $LSOF_VSTR | sed 's/\([0-9\.]*\).*/\1/; s/\./ /g' | awk '{printf "%d%02d%02d\n", $1, $2, $3;}'`
    fi	# }
    if test $LSOF_TMP1 = "osr6"	# {
    then
      LSOF_CINFO="OSR6 support via UnixWare sources"

    # Convert the OpenServer Release 6.0.0 version number to a UnixWare one.

      case $LSOF_VERS in	# {
      60000)
	LSOF_VERS=70104
	;;
      *)
	echo "Unknown OpenServer Release version: $LSOF_VERS"
	rm -f $LSOF_HLP
	exit 1
      esac	# }
    fi	# }
    LSOF_CFGF="$LSOF_CFGF -DUNIXWAREV=$LSOF_VERS"

    # Do OpenServer Release 6.0.0 and UnixWare version-specific stuff.

    case $LSOF_VERS in	# {
    20100|20101|20102|20103)
      if test -r ${LSOF_INCLUDE}/sys/fs/vx_inode.h	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASVXFS"
      fi	# }
      LSOF_CFGL="$LSOF_CFGL -lsocket -lnsl -lelf -lgen"
      ;;
    70000|70001|70100|70101|70103|70104)
      LSOF_TSTBIGF=" "
      LSOF_TSTLFLG="-lsocket -lnsl"
      if test $LSOF_VERS -lt 70103	# {
      then
	LSOF_DINC="$LSOF_DINC -I`pwd`/dialects/uw/uw7"
      else	# $LSOF_VERS -ge 70103

      # Process 7.1.3 and above.

	if test -r ${LSOF_INCLUDE}/netinet/in6.h	# {
	then
	  LSOF_CFGF="$LSOF_CFGF -DHASIPv6"
	fi	# }
	if test $LSOF_VERS -ge 70104	# {
	then

	# Process 7.1.4 and above.

	  LSOF_TMP1=0
	  if test -r ${LSOF_INCLUDE}/netinet/in_pcb.h	# {
	  then
	    grep INKERNEL ${LSOF_INCLUDE}/netinet/in_pcb.h > /dev/null 2>&1
	    if test $? -eq 0	# {
	    then
	      LSOF_TMP1=1
	    fi	# }
	  fi	# }
	  if test $LSOF_TMP1 -eq 0 -a -r ${LSOF_INCLUDE}/netinet/tcp_var.h   # {
	  then
	    grep INKERNEL ${LSOF_INCLUDE}/netinet/tcp_var.h > /dev/null 2>&1
	    if test $? -eq 0	# {
	    then
	      LSOF_TMP1=1
	    fi	# }
	  fi	# }
	  if test $LSOF_TMP1 -eq 1	# {
	  then
	    LSOF_CFGF="$LSOF_CFGF -DHAS_INKERNEL"
	  fi	# }
	fi	# }
      fi	# }
      if test ! -r ${LSOF_INCLUDE}/vm/swap.h -a -r ${LSOF_INCLUDE}/sys/swap.h	# {
      then
	(cd ./dialects/uw/uw7/vm; rm -f swap.h; ln -s ${LSOF_INCLUDE}/sys/swap.h swap.h)
      fi	# }
      if test -r ${LSOF_INCLUDE}/sys/fs/vx_gemini.h	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASVXFS"
      fi	# }
      LSOF_CFGL="$LSOF_CFGL -lsocket -lnsl -lelf -lgen"
      /bin/pkginfo 2> /dev/null | grep -i patch | grep -i ptf7038 > /dev/null
      if test -r ${LSOF_INCLUDE}/sys/file.h	# {
      then
	grep f_open ${LSOF_INCLUDE}/sys/file.h > /dev/null
	if test $? -eq 0	# {
	then
	  LSOF_CFGF="$LSOF_CFGF -DHAS_F_OPEN"
	fi	# }
      fi	# }
      if test -r ${LSOF_INCLUDE}/sys/fs/cdfs_fs.h	# {
      then
	grep "cdfs_LogSecShift;" ${LSOF_INCLUDE}/sys/fs/cdfs_fs.h > /dev/null 2>&1
	if test $? -eq 0	# {
	then
	  LSOF_TMP=`grep "cdfs_LogSecShift;" ${LSOF_INCLUDE}/sys/fs/cdfs_fs.h | sed 's/^[ 	]*\([^ 	]*\).*/\1/'`
	  if test "X$LSOF_TMP" != "X"	# {
	  then
	    LSOF_CFGF="$LSOF_CFGF -DTYPELOGSECSHIFT=$LSOF_TMP"
	  fi	# }
	fi	# }
      fi	# }
      if test -r ${LSOF_INCLUDE}/sys/proc.h	# {
      then
	grep p_pgid ${LSOF_INCLUDE}/sys/proc.h > /dev/null
	if test $? -eq 0	# {
	then
	  LSOF_CFGF="$LSOF_CFGF -DHAS_P_PGID"
	fi	# }
      fi	# }
      if test $LSOF_VERS -ge 70101	# {
      then

	# Do OpenServer Release 6.0.0 and UnixWare 7.1.1 and above tests, as
	# required.

	if test "X$UW_HAS_NSC" = "X"	# {
	then
	  UW_HAS_NSC=N
	  if test -x /bin/node_self	# {
	  then
	    /bin/node_self > /dev/null 2>&1
	    if test $? -eq 0	# {
	    then
	      UW_HAS_NSC=Y
	    fi	# }
	  fi	# }
	fi	# }
	if test "X$UW_HAS_NSC" = "XY" -o "X$UW_HAS_NSC" = "Xy" 	# {
	then
	  LSOF_CFGF="$LSOF_CFGF -DHAS_UW_NSC"
	  LSOF_CFGL="$LSOF_CFGL -lcluster"
	fi	# }
	if test -r ${LSOF_INCLUDE}/sys/nsc_synch.h	# {
	then
	  LSOF_CFGF="$LSOF_CFGF -DHAS_UW_CFS"
	fi	# }
      fi	# }
      ;;
    *)
      echo Unsupported UnixWare version: `uname -v`
      rm -f $LSOF_HLP
      exit 1
      ;;
    esac	# }
    if test -r ${LSOF_INCLUDE}/sys/fs/xnamnode.h	# {
    then
      LSOF_CFGF="$LSOF_CFGF -DHASXNAMNODE"
    fi	# }
    LSOF_DIALECT_DIR=uw
    ;;

# Handle unknown abbreviation.

  *) 
    echo "Can't configure for $LSOF_TGT."
    cat $LSOF_HLP
    rm -f $LSOF_HLP
    exit 1
    ;;

# End of LSOF_TGT cases

esac	# }

# Do an inventory of the distribution, as required.

if test "X$LSOF_SCRIPT_CALL" = "Xyes" -a ! -r ./.neverInv	# {
then
  if test ! -f ./Inventory	# Want -x, but Ultrix doesn't grok it.	# {
  then
    echo "Can't find Inventory script."
    rm -f $LSOF_HLP
    exit 1
  fi	# }
  ./Inventory
fi	# }

# Make sure target directory exists.

if test ! -d ./dialects/$LSOF_DIALECT_DIR	# {
then
  echo "Can't configure for $LSOF_TGT -- ./dialects/$LSOF_DIALECT_DIR doesn't exist."
  rm -f $LSOF_HLP
  exit 1
fi	# }

# Make sure $LSOF_MK exists in the target directory.

if test ! -r ./dialects/$LSOF_DIALECT_DIR/$LSOF_MK	# {
then
  echo "Can't configure for $LSOF_TGT -- ./dialects/$LSOF_DIALECT_DIR/$LSOF_MK doesn't exist."
  rm -f $LSOF_HLP
  exit 1
fi	# }

# Make sure $LSOF_MKF, $LSOF_SPMKF, or $LSOF_MKF.$LSOF_LOCALSUFFIX) exists
# in the target directory.

if test "X$LSOF_SPMKF" != "X"	# {
then
  LSOF_TMP1=$LSOF_SPMKF
else
  LSOF_TMP1=$LSOF_MKF
fi	# }
if test "X$LSOF_LOCALSUFFIX" != "X"	# {
then
  LSOF_REST=$LSOF_TMP1.$LSOF_LOCALSUFFIX
else
  LSOF_REST=$LSOF_TMP1
fi	# }
if test ! -r ./dialects/$LSOF_DIALECT_DIR/$LSOF_REST	# {
then
  echo "Can't configure for $LSOF_TGT -- ./dialects/$LSOF_DIALECT_DIR/$LSOF_REST doesn't exist."
  rm -f $LSOF_HLP
  exit 1
fi	# }

# If this is FreeBSD, make sure $LSOF_FBSD_ZFS_MKF exists.

if test $LSOF_FBSD_ZFS -eq 1	# {
then
  if test ! ./dialects/$LSOF_DIALECT_DIR/$LSOF_FBSD_ZFS_MKF	# {
  then
    echo "Can't configure for $LSOF_TGT -- ./dialects/$LSOF_DIALECT_DIR/$LSOF_FBSD_ZFS_MKF doesn't exist."
    rm -f $LSOF_HLP
    exit 1
  fi	# }
fi	# }}

# Make sure $LSOF_VF exists.  Extract the version number from it.

if test ! -r $LSOF_VF	# {
then
  echo "Version number file, ./$LSOF_VF, doesn't exist."
  rm -f $LSOF_HLP
  exit 1
else
  LSOF_VN=`sed "s/.ds VN \(.*\)/\1/" < $LSOF_VF`
fi	# }

# Clean up in advance.

rm -f $LSOF_F $LSOF_MKFC $LSOF_FBSD_ZFS_MKF $LSOF_TSTCFLG $LSOF_TSTCC
rm -f $LSOF_TSTXOC $LSOF_TSTLFF
echo "rm -f $LSOF_F $LSOF_MKFC $LSOF_FBSD_ZFS_MKF $LSOF_TSTCFLG"
echo "rm -f $LSOF_TSTCC $LSOF_TSTXOC $LSOF_TSTLFF"

# Make sure there's a C compiler name.

if test "X$LSOF_CC" = "X"	# {
then
  LSOF_CC=cc
fi	# }

# Do common feature analyses.

# Check for localtime(3) and strftime(3).

rm -f ${LSOF_TMPC}.*
cat > $LSOF_TMPC.c << .LSOF_END_HERE_DOC2
#include <time.h>
main(){
  time_t cl;
  struct tm *ts;
  char bf[32];
  if ((cl = time(NULL)) == (time_t)-1)
    return(1);
  ts = localtime(&cl);
  if (strftime(bf, sizeof(bf), "%D", ts) != 8)
    return(1);
  if ((bf[2] != '/') || (bf[5] != '/'))
    return (1);
  return(0);
}
.LSOF_END_HERE_DOC2
echo $EO "Testing C library for localtime() and strftime(), using $LSOF_CC ... $EC"
$LSOF_CC ${LSOF_TMPC}.c -o ${LSOF_TMPC}.x > /dev/null 2>&1
if test -x ${LSOF_TMPC}.x	# {
then
  ./${LSOF_TMPC}.x
  if test $? -eq 0	# }
  then
    LSOF_CFGF="$LSOF_CFGF -DHAS_STRFTIME"
    echo "present"
  else
    echo "unusable"
  fi	# }
else
  echo "missing"
fi	# }
rm -f ${LSOF_TMPC}.[cox]

# Make the dialect sources.

if test "X$LSOF_MKC" = "X"	# {
then
  LSOF_MKC="ln -s"
fi	# }
LSOF_MKC=$LSOF_MKC ./dialects/$LSOF_DIALECT_DIR/$LSOF_MK $LSOF_TGT $LSOF_VERS

# Make $LSOF_MKFC and ${LSOF_LIB}/$LSOF_LIBMKF.

echo "# $LSOF_TGT Makefile for lsof revision $LSOF_VN" > $LSOF_MKFC
echo "" >> $LSOF_MKFC
echo "CC=	$LSOF_CC" >> $LSOF_MKFC
if test "X$LSOF_CCV" != "X"	# {
then
  echo "" >> $LSOF_MKFC
  echo "CCV=	$LSOF_CCV" >> $LSOF_MKFC
fi	# }
if test "X$LSOF_LIB_NO" = "X"	# {
then
  echo "" >> $LSOF_MKFC
  echo "LIB=	${LSOF_LIB}/liblsof.a" >> $LSOF_MKFC
fi	# }
if test "X$LSOF_LD" != "X"	# {
then
  echo "" >> $LSOF_MKFC
  echo "LD=	$LSOF_LD" >> $LSOF_MKFC
fi	# }
if test "X$LSOF_CINFO" != "X"	# {
then
  echo "" >> $LSOF_MKFC
  echo "CINFO=	$LSOF_CINFO" >> $LSOF_MKFC
fi	# }
if test "X$LSOF_CFGD" != "X"	# {
then
  echo "CFGD=	$LSOF_CFGD" >> $LSOF_MKFC
fi	# }
if test "X$LSOF_CFGDN" != "X"	# {
then
  echo "CFGDN=	$LSOF_CFGDN" >> $LSOF_MKFC
fi	# }
if test "X$LSOF_ARCH" != "X"	# {
then
  LSOF_CFGF="$LSOF_CFGF -DLSOF_ARCH=\\\"$LSOF_ARCH\\\""
fi	# }
if test "X$LSOF_VSTR" != "X"	# {
then
  LSOF_TMP=`echo $LSOF_VSTR | sed 's/(/\\\\(/g' | sed 's/)/\\\\)/g'`
  LSOF_CFGF="$LSOF_CFGF -DLSOF_VSTR=\\\"$LSOF_TMP\\\""
fi	# }
echo "" >> $LSOF_MKFC
echo "CFGF=	$LSOF_CFGF" >> $LSOF_MKFC
if test "X$LSOF_LIB_NO" = "X"	# {
then
  echo "" >> $LSOF_MKFC
  echo "CFGL=	$LSOF_FCFGL -L./$LSOF_LIB -llsof $LSOF_CFGL" >> $LSOF_MKFC
fi	# }
echo "" >> $LSOF_MKFC
if test "X$LSOF_DEBUG" = "X"	# {
then
  LSOF_DEBUG="-O"
else
  if test "X$LSOF_DEBUG" = "XNo-O"	# {
  then
    LSOF_DEBUG=""
  fi	# }
fi	# }
echo "DEBUG=	$LSOF_DEBUG" >> $LSOF_MKFC
if test "X$LSOF_OPINC" != "X"	# {
then
  LSOF_DINC="$LSOF_DINC $LSOF_OPINC"
fi	# }
if test "X$LSOF_DINC" != "X"	# {
then
  echo "" >> $LSOF_MKFC
  echo "DINC=	$LSOF_DINC" >> $LSOF_MKFC
fi	# }
if test "X$LSOF_DOC" != "X"	# {
then
  echo "" >> $LSOF_MKFC
  echo "DOC=$LSOF_DOC" >> $LSOF_MKFC
fi	# }
if test "X$LSOF_DISTRIBKVM" != "X" -a "X$LSOF_DISTRIBKVM" != "XKVM"	# {
then
  echo "" >> $LSOF_MKFC
  echo "KVM=	$LSOF_DISTRIBKVM" >> $LSOF_MKFC
fi	# }
rm -f ${LSOF_LIB}/$LSOF_LIBMKF
if test "X$LSOF_LIB_NO" = "X"	# {
then
  cp $LSOF_MKFC ${LSOF_LIB}/$LSOF_LIBMKF
fi	# }
cat ./dialects/$LSOF_DIALECT_DIR/$LSOF_REST >> $LSOF_MKFC
if test "X$LSOF_LIB_NO" = "X"	# {
then

  # Put archiving and optional randomizing strings in ${LSOF_LIB}/$LSOF_LIBMKF.
  #
  # Process optional CFLAGS override.
  #
  # Add the library Makefile skeleton section.

  echo "" >> ${LSOF_LIB}/$LSOF_LIBMKF
  if test "X$LSOF_AR" = "X"	# {
  then
    echo "AR=	ar cr \${LIB} \${OBJ}" >> ${LSOF_LIB}/$LSOF_LIBMKF
  else
    echo "AR=	$LSOF_AR \${LIB} \${OBJ}" >> ${LSOF_LIB}/$LSOF_LIBMKF
  fi	# }
  if test "X$LSOF_RANLIB" != "X"	# {
  then
    echo "" >> ${LSOF_LIB}/$LSOF_LIBMKF
    echo "RANLIB=	$LSOF_RANLIB \${LIB}" >> ${LSOF_LIB}/$LSOF_LIBMKF
  fi	# }
  echo "" >> ${LSOF_LIB}/$LSOF_LIBMKF
  if test "X$LSOF_CFLAGS_OVERRIDE" = "X"	# {
  then
    echo "CFLAGS=	\${CDEFS} \${INCL} \${DEBUG}" >> ${LSOF_LIB}/$LSOF_LIBMKF
  else
    echo "override CFLAGS=\${CDEFS} \${INCL} \${DEBUG}" >> ${LSOF_LIB}/$LSOF_LIBMKF
  fi	# }
  echo "" >> ${LSOF_LIB}/$LSOF_LIBMKF
  cat ${LSOF_LIB}/$LSOF_LIBMKFSKEL >> ${LSOF_LIB}/$LSOF_LIBMKF
  echo $LSOF_MKFC and ${LSOF_LIB}/$LSOF_LIBMKF created.
else
  echo $LSOF_MKFC created.
fi	# }

# If this is FreeBSD, create $LSOF_FBSD_ZFS_MKF.

if test $LSOF_FBSD_ZFS -eq 1	# {
then
  rm -f $LSOF_FBSD_ZFS_MKF
  echo "# $LSOF_TGT ZFS Makefile for lsof revision $LSOF_VN" > $LSOF_FBSD_ZFS_MKF
  echo "" >> $LSOF_FBSD_ZFS_MKF
  echo "CC=		$LSOF_CC" >> $LSOF_FBSD_ZFS_MKF
  echo "" >> $LSOF_FBSD_ZFS_MKF
  echo "CFLAGS=	$LSOF_FBSD_ZFS_CFGF" >> $LSOF_FBSD_ZFS_MKF
  echo "" >> $LSOF_FBSD_ZFS_MKF
  if test "X$LSOF_DEBUG" = "X"	# {
  then
    LSOF_DEBUG="-O"
  else
    if test "X$LSOF_DEBUG" = "XNo-O"	# {
    then
      LSOF_DEBUG=""
    fi	# }
  fi	# }
  echo "DEBUG=	$LSOF_DEBUG" >> $LSOF_FBSD_ZFS_MKF
  echo "" >> $LSOF_FBSD_ZFS_MKF
  echo "OPENSOLARIS=	$LSOF_FBSD_ZFS_SYS" >> $LSOF_FBSD_ZFS_MKF
  echo "" >> $LSOF_FBSD_ZFS_MKF
  cat ./dialects/$LSOF_DIALECT_DIR/$LSOF_FBSD_ZFS_MKF >> $LSOF_FBSD_ZFS_MKF
  echo $LSOF_FBSD_ZFS_MKF created.
fi	# }

# Create test cc file.

echo "$LSOF_CC" > $LSOF_TSTCC
echo "$LSOF_TSTCC created"

# Create test cflags file.

echo "-DLT_DIAL_$LSOF_TGT" > $LSOF_TSTCFLG
if test "X$LSOF_TSTBIGF" != "X"	# {
then
  echo "-DLT_BIGF" >> $LSOF_TSTCFLG
  if test "X$LSOF_TSTBIGF" != "X "	# {
  then
    for i in $LSOF_TSTBIGF	# {
    do
      echo "$i" >> $LSOF_TSTCFLG
    done	# }
  fi	# }
fi	# }
if test "X$LSOF_TSTDFLG" != "X"	# {
then
  for i in $LSOF_TSTDFLG	# {
  do
    echo "$i" >> $LSOF_TSTCFLG
  done	# }
fi	# }
echo $LSOF_CC | grep gcc > /dev/null 2>&1
if test $? -eq 0	# {
then
  echo "-DLT_GCC" >> $LSOF_TSTCFLG
else
  echo "-DLT_CC" >> $LSOF_TSTCFLG
fi	# r}
if test $LSOF_TSTKMEM -eq 1	# {
then
  echo "-DLT_KMEM" >> $LSOF_TSTCFLG
fi	# }
if test $LSOF_TSTK64 -eq 1	# {
then
  echo "-DLT_K64" >> $LSOF_TSTCFLG
fi	# }
echo "-DLT_VERS=$LSOF_VERS" >> $LSOF_TSTCFLG
if test $LSOF_TSTVPATH -eq 1	# {
then
  echo "-DLT_VPATH" >> $LSOF_TSTCFLG
fi	# }
echo "$LSOF_TSTCFLG created"

# Create tests loader flags file.

echo $LSOF_TSTLFLG > $LSOF_TSTLFF
echo "$LSOF_TSTLFF created"

# Create test extra objects file.

echo "$LSOF_TSTXO" > $LSOF_TSTXOC
echo "$LSOF_TSTXOC created"

rm -f $LSOF_HLP

# Call Customize, as required.

if test "X$LSOF_SCRIPT_CALL" = "Xyes" -a ! -r ./.neverCust	# {
then
  if test ! -f ./Customize	# {  Want -x, but Ultrix doesn't grok it.
  then
    echo "Can't find Customize script."
    exit 1
  fi	# }
  ./Customize $LSOF_DIALECT_DIR
fi	# }

# Issue unsupported warnings, as appropriate.

if test "X$LSOF_UNSUP" != "X"	# {
then
  echo "$LSOF_UNSUP"
fi	#}
if test "X$LSOF_UNSUP2" != "X"	# {
then
  echo "$LSOF_UNSUP2"
fi	#}
exit 0
@


1.165
log
@Revision 4.90
@
text
@d17 1
a17 1
# $Id: Configure,v 1.164 2015/07/07 20:16:58 abe Exp abe $
d1942 5
d2094 1
a2094 1
		LSOF_TMP1=`grep -n "^struct lock_owner" ${FREEBSD_SYS}/kern/kern_lockf.c | sed 's/\([0-9]*\):.*$/\1/'`
@


1.164
log
@Revision 4.89
@
text
@d17 1
a17 1
# $Id: Configure,v 1.163 2014/10/13 22:31:08 abe Exp abe $
d296 2
a297 2
      rm -f opt_kdtrace.h
      echo "rm -f opt_kdtrace.h"
d1623 4
d1638 1
a1638 1
    4090|8020|8030|8040|9000|10000|11000)
d1714 16
d1909 13
d1929 5
d1999 6
d2046 9
d2991 11
d4935 8
@


1.163
log
@Revision 4.88
@
text
@d17 1
a17 1
# $Id: Configure,v 1.162 2013/01/02 17:13:48 abe Exp abe $
d892 1
a892 1
      12.*)			# Next Mac OS X
d895 3
d900 2
a901 2
	echo Assuming Darwin 11.0
	LSOF_VERS=1100
d930 1
a930 1
    900|1000|1100)
d940 1
a940 1
    1200)
d1639 1
a1639 1
    # Get system CFLAGS from FREEBSD_MAKE_CONF (default=/etc/make.conf).
d1641 8
a1648 14
    if test "X$FREEBSD_MAKE_CONF" = "X"	# {
    then
      FREEBSD_MAKE_CONF="/etc/make.conf"
    fi	# }
    if test -r $FREEBSD_MAKE_CONF	# {
    then
      LSOF_TMP1=`echo "all:\n.include <bsd.prog.mk>" | $LSOF_MAKE -f- -VCFLAGS`
      LSOF_TMP=1
      while test $LSOF_TMP -eq 1	# {
      do
	echo $LSOF_TMP1 | grep -q -e '-O'
	if test $? -eq 0	# {
	then
	  if test "X$LSOF_DEBUG" = "X"
d1651 13
a1663 8
	  fi	# }
	  LSOF_TMP1=`echo $LSOF_TMP1 | sed 's/\(.*\)-O[^ $]*\(.*\)/\1 \2/' | sed 's/^  *//g' | sed 's/  */ /g' | sed 's/  *$//'`
	else
	  LSOF_TMP=0
	fi	# }
	LSOF_FBSD_ZFS_CFGF="$LSOF_CFGF $LSOF_TMP1"
      done	# }
      LSOF_CFGF="$LSOF_CFGF $LSOF_TMP1"
d2120 17
a2136 1
	    fi	# |
d2140 11
d2900 11
d2931 7
@


1.162
log
@Revision 4.87
@
text
@d17 1
a17 1
# $Id: Configure,v 1.161 2012/04/10 16:35:46 abe Exp abe $
d107 2
d137 1
d205 1
d296 2
d1604 4
d1616 4
d1631 1
a1631 1
    4090|8020|8030|9000|10000)
d1697 11
d1799 12
d1983 17
d5009 4
d5499 4
d5659 1
a5659 1
# Issue unsupported warning, as appropriate.
d5665 4
@


1.161
log
@Revision 4.86
@
text
@d17 1
a17 1
# $Id: Configure,v 1.160 2011/09/27 17:27:20 abe Exp abe $
d926 4
d1668 15
d1777 4
@


1.160
log
@Revision 4.85 (final)
@
text
@d17 1
a17 1
# $Id: Configure,v 1.159 2010/07/29 15:59:28 abe Exp abe $
d883 6
d891 2
a892 2
	echo Assuming Darwin 10.0
	LSOF_VERS=1000
d921 1
a921 1
    900|1000)
d927 4
d1590 4
d1598 4
d1604 2
a1605 8
	echo Assuming FreeBSD 2.x
	LSOF_CFGL="$LSOF_CFGL -lkvm"
	LSOF_VERS=2000
	LSOF_N_UNIXV=`/usr/sbin/sysctl -n kern.bootfile`
	if test "X$LSOF_N_UNIXV" = "X"	# {
	then
	  LSOF_N_UNIXV="/kernel"
	fi	# }
d1613 1
a1613 1
    4090|6040|8000|8020|9000)
d1699 1
a1699 1
    4000|4010|4020|4030|4040|4050|4060|4070|4080|4090|4100|4110|5000|5010|5020|5030|5040|5050|6000|6010|6020|6030|6040|7000|7010|7020|7030|7040|8000|8010|8020|9000)
d1749 1
a2045 5
    *)
      echo "Unknown FreeBSD release: $LSOF_VERS"
      rm -f $LSOF_HLP
      exit 1
      ;;
d4816 7
d4824 1
@


1.159
log
@Revision 4.84
@
text
@d17 1
a17 1
# $Id: Configure,v 1.158 2010/01/18 19:01:11 abe Exp abe $
d75 2
a76 2
#	$LSOF_ARCH	    Unix dialect architecture as a string -- may be
#			    supplied externally
a102 2
#	$LSOF_LINUX_INCL    temporary variable for holding path to Linux
#			    include files
d135 2
a136 2
#	$LSOF_VERS	    Unix dialect version as a decimal number -- may
#			    be supplied externally
a174 1
LSOF_LINUX_INCL=""
d880 1
a880 1
      10.*)			# a coming version of Mac OS?
d885 2
a886 2
	echo Assuming Darwin 9.0
	LSOF_VERS=900
d915 1
a915 1
    900)
a920 4
    1000)
      LSOF_CFGF="$LSOF_CFGF -DHASIPv6"
      LSOF_TMP1=""
      ;;
d1559 4
d1568 1
a1568 1
      8*)
d1572 8
d1601 1
a1601 1
    4090|7000|7010|7020|7030|8000|9000)
d1687 1
a1687 1
    4000|4010|4020|4030|4040|4050|4060|4070|4080|4090|4100|4110|5000|5010|5020|5030|5040|5050|6000|6010|6020|6030|6040|7000|7010|7020|7030|8000|9000)
d1905 5
d2021 8
d2679 4
d2684 14
d2729 1
a2729 1
      echo -n "Testing C library type with $LSOF_CC ... "
d2743 1
a2743 1
      $LSOF_CC ${LSOF_TMPC}.c -I$LSOF_INCLUDE -o ${LSOF_TMPC}.x > /dev/null 2>&1
d2779 7
d4660 21
d4685 7
d4779 11
@


1.158
log
@Revision 4.83
@
text
@d17 1
a17 1
# $Id: Configure,v 1.157 2009/03/25 19:23:55 abe Exp abe $
d1562 4
d1596 1
a1596 1
    4090|7000|7010|7020|8000|9000)
d1682 1
a1682 1
    4000|4010|4020|4030|4040|4050|4060|4070|4080|4090|4100|4110|5000|5010|5020|5030|5040|5050|6000|6010|6020|6030|6040|7000|7010|7020|8000|9000)
d4249 1
a4249 1
	    nLSOF_CC=cc
d4626 5
@


1.157
log
@Revision 4.82
@
text
@d17 1
a17 1
# $Id: Configure,v 1.156 2008/10/21 16:21:41 abe Exp abe $
d19 1
a19 1
#LSOF_CFLAGS_OVERRIDE=1 may be introduced through the environment to cause
d23 1
a23 1
#LSOF_DISTRIBKVM may be introduced through the environment to specify the
d30 2
a31 2
#LSOF_LOCALSUFFIX may be introduced through the environment to select a local
#		  version of a Makefile.  It is used as a suffix to $LSOF_MKF.
d33 13
d48 1
a48 1
#LSOF_MKC is the dialect's Mksrc create command -- default "ln -s".
d85 2
d111 1
d115 1
a155 2
LSOF_CFGF=""
LSOF_CFGL=""
d157 2
d179 7
a185 1
LSOF_RANLIB="ranlib \${LIB}"
d266 2
a267 2
	echo "make -f $LSOF_MKFC clean"
	make -f $LSOF_MKFC clean
d271 2
a272 2
	  echo "(cd ${LSOF_LIB}; make -f ${LSOF_LIBMKF} clean)"
	  (cd ${LSOF_LIB}; make -f ${LSOF_LIBMKF} clean)
d276 2
a277 2
	    echo "(cd ${LSOF_LIB}; make -f ${LSOF_LIBMKF}.skel clean)"
	    (cd ${LSOF_LIB}; make -f ${LSOF_LIBMKF}.skel clean)
d283 2
a284 2
	echo "(cd ${LSOF_TSTSUBD}; make spotless)"
	(cd ${LSOF_TSTSUBD}; make spotless)
d291 2
a292 2
      rm -rf AFSHeaders AFSVersion version.h vnode_if.h
      echo "rm -rf AFSHeaders AFSVersion version.h vnode_if.h"
d386 4
a389 1
    LSOF_RANLIB="@@echo \\\\\\\\c"    # AIX make doesn't like a null ${RANLIB}.
d739 1
a739 1
	LSOF_CFGF="${LSOF_CFGF} -DAIX_KERNBITS=${AIX_KERNBITS}"
d938 1
a938 1
    LSOF_CFGL="-lcurses"
d1199 1
a1199 1
	LSOF_CFGF="-Olimit 1024"
d1203 1
a1203 1
	LSOF_CFGF="-Olimit 1024"
d1208 1
a1208 1
	LSOF_CFGF="-Olimit 1024"
d1216 1
a1216 1
	LSOF_CFGF="-DUSE_STAT"
d1317 1
a1317 1
    LSOF_CFGL="-lmld"
d1571 4
d1578 1
a1578 1
	LSOF_CFGL="-lkvm"
d1592 1
a1592 1
    4090|7000|7010|7020|8000)
d1605 1
a1605 1
      LSOF_CFGF=`echo "all:\n.include <bsd.prog.mk>" | make -f- -VCFLAGS`
d1609 1
a1609 1
	echo $LSOF_CFGF | grep -q -e '-O'
d1614 1
a1614 1
	    LSOF_DEBUG=`echo $LSOF_CFGF | sed 's/.*\(-O[^ $]*\).*/\1/'`
d1616 1
a1616 1
	  LSOF_CFGF=`echo $LSOF_CFGF | sed 's/\(.*\)-O[^ $]*\(.*\)/\1 \2/' | sed 's/^  *//g' | sed 's/  */ /g' | sed 's/  *$//'`
d1620 1
a1620 1
	LSOF_FBSD_ZFS_CFGF="$LSOF_CFGF"
d1622 1
d1648 1
a1648 1
      LSOF_CFGL="-lutil"
d1658 1
a1658 1
      LSOF_CFGL="-lkvm"
d1661 1
a1661 1
      LSOF_CFGL="-lkvm"
d1668 1
a1668 1
      LSOF_CFGL="-lkvm"
d1678 5
a1682 1
    4000|4010|4020|4030|4040|4050|4060|4070|4080|4090|4100|4110|5000|5010|5020|5030|5040|5050|6000|6010|6020|6030|6040|7000|7010|7020|8000)
d1707 1
a1707 1
      LSOF_CFGL="-lkvm"
d1815 5
d2159 4
d2169 4
a2172 2
    LSOF_CFGL=""
    LSOF_RANLIB=""
d2262 1
a2262 1
      LSOF_CFGF="-DHAS_CONST"
d2669 1
a2669 1
    LSOF_CFGF="-DLINUXV=$LSOF_VERS"
d2749 1
a2749 1
      if test "X$LINUX_HASSELINUX" = "XY" -o "X$LINUX_HASSELINUX" = "xY" # {
d2860 1
a2860 1
    LSOF_CFGF="-DNETBSDV=$LSOF_VERS"
d2867 1
a2867 1
	LSOF_CFGL="-lutil"
d3661 1
a3661 1
      LSOF_CFGL="-w"
a3662 2
    else
      LSOF_CFGL=""
d3664 1
a3664 1
    LSOF_CFGF="-DSTEPV=$LSOF_VERS"
d3812 1
a3812 1
    LSOF_CFGF="-DOPENBSDV=$LSOF_VERS"
d4045 1
a4045 1
    LSOF_CFGL="-lkvm"
d4052 4
a4055 2
    LSOF_RANLIB=""

d4224 4
a4227 1
    LSOF_RANLIB=""
d4240 7
a4246 2
	  echo "WARNING: no cc in ${SOLARIS_CCDIR}; using cc without path."
	  LSOF_CC=cc
d4304 5
d4319 1
a4319 1
    90000|100000)
d4347 1
a4347 1
	LSOF_CFGF="-DP101318=$LSOF_PL"
d4385 1
a4385 1
    20600|70000|80000|90000|100000)
d4651 8
d4665 2
a4666 1
      # Check for Solaris 10 or higher ZFS.
d4668 4
d4674 1
a4674 18

      # Check for required ZFS kernel header files.

	LSOF_TMP1="dmu.h zfs_acl.h zfs_debug.h zfs_rlock.h zil.h spa.h zfs_context.h zfs_dir.h zfs_vfsops.h zio.h txg.h zfs_ctldir.h zfs_ioctl.h zfs_znode.h zio_impl.h"
	LSOF_TMP2=""
	for i in $LSOF_TMP1	# {
	do
	  if test ! -r ${LSOF_INCLUDE}/sys/$i	# {
	  then
	    if test "X$LSOF_TMP2" = "X"	# {
	    then
	      LSOF_TMP2=$i
	    else
	      LSOF_TMP2="$LSOF_TMP2 $i"
	    fi	# }
	  fi	# }
	done	# }
	if test "X$LSOF_TMP2" = "X"	# {
d4676 2
a4677 2
	  LSOF_TMP4="${LSOF_INCLUDE}/sys"
	  LSOF_TMP5=0
d4679 5
a4683 12
	  LSOF_TMP3=`pwd`/dialects/sun/get-hdr-loc.sh
	  if test ! -x $LSOF_TMP3	# {
	  then
	    echo "FATAL: can't execute: $LSOF_TMP3"
	    rm -f $LSOF_HLP
	    exit 1
	  fi	# }
	  LSOF_TMP4=`$LSOF_TMP3 $LSOF_TMP2`
	  LSOF_TMP5=$?
	fi	#}
	if test $LSOF_TMP5 -eq 0	# {
	then
d4685 1
a4685 1
	# ZFS support has been requested.
d4687 3
a4689 38
	  if test "X$LSOF_TMP4" = "X"	# {
	  then

	  # Use of lsof interal ZFS structure definitions has been
	  # requested.

	    LSOF_CFGF="$LSOF_CFGF -DHAS_ZFS=1"
	  else

	  # Use of ZFS header files at the returned location has
	  # been requested.

	    LSOF_CFGF="$LSOF_CFGF -DHAS_ZFS=2"
	    if test "X$LSOF_TMP4" != "X${LSOF_INCLUDE}/sys"	# {
	    then

	    # Add the returned location unless it is ${LSOF_INCLUDE}/sys.

	      LSOF_CFGF="$LSOF_CFGF -I$LSOF_TMP4"
	    fi	# }
	  fi	# }

	  # Identify the ZFS version.

	    LSOF_TMP1=0
	    if test -x /usr/sbin/zpool	# {
	    then
	      LSOF_TMP2=`/usr/sbin/zpool upgrade -v|grep -i running|grep -i zfs`
	      if test "X$LSOF_TMP2" != "X"	# {
	      then
	        LSOF_TMP3=`echo $LSOF_TMP2 | sed 's/^.* \([0-9][0-9]*\)\.$/\1/'`
	        if test "X$LSOF_TMP3" != "X"	# {
	        then
		  LSOF_TMP1=$LSOF_TMP3
	        fi	# }
	      fi	# }
	    fi	# }
	    LSOF_CFGF="$LSOF_CFGF -DZFS_VERS=$LSOF_TMP1"
d4691 9
d4701 1
a4701 3
	# The get-hdr-loc.sh script returned a non-zero exit value.
	# If there was a message on STDOUT, an error was detected.
	# if there was no message, ZFS support is not required.
d4703 4
a4706 7
	  if test "X$LSOF_TMP4" != "X"	# {
	  then
	    echo "$LSOF_TMP3 detected the error: $LSOF_TMP4"
	    rm -f $LSOF_HLP
	    exit 1
	  fi	# }
	fi	# }
d4715 1
a4715 1
    LSOF_CFGF="-Dsolaris=$LSOF_VERS $LSOF_CFGF"
d4858 1
a4858 1
      LSOF_CFGL="-L$SOLARIS_VXFSLIB${LSOF_TMP2} -lvxfsutil -ldl"
d4936 4
a4939 1
    LSOF_RANLIB=""
d4968 1
a4968 1
    LSOF_CFGF="-DUNIXWAREV=$LSOF_VERS"
d4978 1
a4978 1
      LSOF_CFGL="-lsocket -lnsl -lelf -lgen"
d5030 1
a5030 1
      LSOF_CFGL="-lsocket -lnsl -lelf -lgen"
d5351 1
a5351 1
    echo "RANLIB=	$LSOF_RANLIB" >> ${LSOF_LIB}/$LSOF_LIBMKF
@


1.156
log
@Revision 4.81
@
text
@d17 1
a17 1
# $Id: Configure,v 1.155 2008/05/12 12:39:12 abe Exp abe $
d980 17
a996 1
      LSOF_TMP1="sys/proc_info.h"
d1511 4
d1528 8
d1562 1
a1562 1
    4090|7000|8000)
d1647 1
a1647 1
    4000|4010|4020|4030|4040|4050|4060|4070|4080|4090|4100|4110|5000|5010|5020|5030|5040|5050|6000|6010|6020|6040|7000|8000)
d1811 9
d1945 22
d4387 4
a4459 4
	    if test "X$SOLARIS_INSTR" = "X"	# {
	    then
	      SOLARIS_INSTR=`/bin/isainfo -k`
	    fi	#}
d4479 1
a4479 1
	      $LSOF_CC ${LSOF_TMPC}.c $LSOF_TMP3 -o ${LSOF_TMPC}.x > /dev/null 2>&1
d4486 6
d4602 3
d4609 1
a4609 1
	  if test ! -r /usr/include/sys/$i	# {
d4619 1
a4619 1
	if test "X$LSOF_TMP2" != "X"	# {
d4621 3
d4632 8
a4639 1
	  if test $? -eq 0	# {
d4642 2
a4643 1
	  # ZFS support has been requested.
d4645 2
a4646 2
	    if test "X$LSOF_TMP4" = "X"	# {
	    then
d4648 2
a4649 2
	    # Use of lsof interal ZFS structure definitions has been
	    # requested.
d4651 3
a4653 2
	      LSOF_CFGF="$LSOF_CFGF -DHAS_ZFS=1"
	    else
d4655 1
a4655 2
	    # Use of ZFS header files at the returned location has
	    # been requested.
d4657 1
a4657 1
	      LSOF_CFGF="$LSOF_CFGF -DHAS_ZFS=2 -I$LSOF_TMP4"
d4659 1
a4659 1
	  else
d4661 1
a4661 2
	  # If there is a message on STDOUT, get-hdr-loc.sh detected
	  # an error; no message, ZFS support is not required.
d4663 2
a4664 1
	    if test "X$LSOF_TMP4" != "X"	# {
d4666 9
a4674 3
	      echo "$LSOF_TMP3 detected the error: $LSOF_TMP4"
	      rm -f $LSOF_HLP
	      exit 1
d4676 12
d4815 1
d4817 1
a4817 1
      if test $? -eq 0	# {
d4819 8
a4826 3
	LSOF_TMP2="/sparcv9"
      else
	LSOF_TMP2=""
@


1.155
log
@Revision 4.80
@
text
@d17 1
a17 1
# $Id: Configure,v 1.154 2008/05/12 12:28:50 abe Exp abe $
d270 2
a271 2
      rm -f ${LSOF_HLP_BASE}* cd9660_node.h lockf_owner.h
      echo "rm -f ${LSOF_HLP_BASE}* cd9660_node.h lockf_owner.h"
d848 1
a848 1
      7.*)
d851 1
a851 1
      8.*)
d854 6
d862 2
a863 2
	echo Assuming Darwin 8.0
	LSOF_VERS=800
d892 10
d908 3
d931 1
a931 1
    if test "X$DARWIN_BASE" = "X"	# {
d933 2
a934 1
      if test -r ${LSOF_INCLUDE}/../local/include/libproc.h -a $LSOF_VERS -ge 800 	# {
d936 14
a949 1
	DARWIN_BASE="libproc"
d951 3
d960 1
a960 1
      # Configure for libproc-based Darwin lsof.
d965 4
a968 1
      LSOF_CFGL="$LSOF_CFGL -lproc"
d970 10
a980 3
      LSOF_TMP2=""
      LSOF_DINC="$LSOF_DINC -I${LSOF_INCLUDE}/../local/include"

d982 1
a982 1
      if test "X$DARWIN_BASE" = "X/dev/kmem"	# {
a983 9
    
	# Configure for /dev/kmem-based Darwin lsof.

	echo "Configuring /dev/kmem-based Darwin lsof"
	LSOF_CINFO="/dev/kmem-based"
	LSOF_DIALECT_DIR=darwin/kmem

      else

a986 1

d988 2
a989 1
    fi
d991 3
a993 1
    # Make sure Darwin XNU kernel headers are present.
d995 5
a999 5
    LSOF_TMP5=""
    for i in $LSOF_TMP1	# {
    do
      LSOF_TMP6=0
      for j in $LSOF_TMP2 $LSOF_TMP3 $LSOF_TMP4 $LSOF_INCLUDE	# {
d1001 10
a1010 1
	if test "X${j}" != "X" -a -r ${j}/${i}  # {
d1012 7
a1018 3
	  LSOF_TMP6=1
	  break
	fi	# }
d1020 1
a1020 1
      if test $LSOF_TMP6 -ne 1	# {
d1022 6
a1027 1
	if test "X$LSOF_TMP5" = "X"	# {
d1029 3
a1031 3
	  LSOF_TMP5=$i
	else
	  LSOF_TMP5="$LSOF_TMP5 $i"
d1033 10
a1042 14
      fi			# }
    done	# }
    if test "X$LSOF_TMP5" != "X"	# {
    then

    # If any Darwin XNU kernel header files are missing, call the
    # get-hdr-loc.sh script to find the path.

      LSOF_TMP6=`pwd`/dialects/darwin/get-hdr-loc.sh
      if test ! -x $LSOF_TMP6	# {
      then
	echo "FATAL: can't execute: $LSOF_TMP6"
	rm -f $LSOF_HLP
	exit 1
a1043 11
      DARWIN_XNUDIR=`$LSOF_TMP6 $LSOF_TMP5`
      if test $? -ne 0	# {
      then
	echo "FATAL: $LSOF_TMP6 returns: $DARWIN_XNUDIR"
	rm -f $LSOF_HLP
	exit 1
      fi	# }
      LSOF_TMP2="${DARWIN_XNUDIR}/bsd"
      LSOF_TMP3="${DARWIN_XNUDIR}/osfmk"
      LSOF_TMP4=""
    fi	# }
d1045 1
a1045 1
    # Add header file paths.
d1047 7
a1053 9
    for i in $LSOF_TMP2 $LSOF_TMP3 $LSOF_TMP4 $LSOF_INCLUDE	# {
    do
      if test -d $i -a "X$i" != "X/usr/include"	# {
      then
	LSOF_DINC="$LSOF_DINC -I${i}"
      fi	# }
    done	# }
    if test "X$DARWIN_BASE" = "X/dev/kmem"	# {
    then
d1100 1
d1102 1
a1102 1
    LSOF_CFGF="$LSOF_CFGF -DHAS9660F -DDARWINV=$LSOF_VERS"
d1495 4
d1578 2
d1619 1
a1619 1
    4000|4010|4020|4030|4040|4050|4060|4070|4080|4090|4100|4110|5000|5010|5020|5030|5040|5050|6000|6010|6020|7000|8000)
d1675 15
a1689 2
	  if test -r ${LSOF_INCLUDE}/sys/types.h \
		  -a -r ${LSOF_INCLUDE}/machine/_types.h	# {
d1691 5
a1695 2
	    grep -q cpumask_t ${LSOF_INCLUDE}/sys/types.h
	    if test $? -eq 0	# {
d1697 1
a1697 1
	      grep -q __cpumask_t ${LSOF_INCLUDE}/machine/_types.h
d1700 3
a1702 5
		LSOF_CFGF="$LSOF_CFGF -DHASCPUMASK_T"
	      else
		$LSOF_CC -E ${LSOF_INCLUDE}/machine/_types.h 2>/dev/null | grep -q __cpumask_t
		if test $? -eq 0  # {
		then
d1704 7
a1710 1
		fi	# }
d1752 32
d1890 1
a1890 1
#endif	/* LOCKF_OWNER_H */
d2185 3
a2187 1
      if test $? -eq 0	# {
d2209 4
d4553 3
a4555 3
          LSOF_TMP3=`pwd`/dialects/sun/get-hdr-loc.sh
          if test ! -x $LSOF_TMP3	# {
          then
d4559 2
a4560 2
          fi	# }
          LSOF_TMP4=`$LSOF_TMP3 $LSOF_TMP2`
@


1.154
log
@Revision 4.80
@
text
@d17 1
a17 1
# $Id: Configure,v 1.153 2008/05/09 12:55:54 abe Exp abe $
d806 1
a806 1
    if $LSOF_VERS -ge 5300	# {
@


1.153
log
@Revision 4.80
@
text
@d17 1
a17 1
# $Id: Configure,v 1.152 2008/04/15 13:24:19 abe Exp abe $
d4946 1
a4946 1
    echo "Can't fonfigure for $LSOF_TGT -- ./dialects/$LSOF_DIALECT_DIR/$LSOF_FBSD_ZFS_MKF doesn't exist."
d4960 1
a4960 1
  LSOF_VN=`sed "s/.ds VN \(.*\)/\1/" < version`
d4970 1
a4970 1
# Do common feature analyses.  DEBUG
d4972 7
a5026 4
if test "X$LSOF_CC" = "X"	# {
then
  LSOF_CC=cc
fi	# }
a5145 4
  if test "X$LSOF_CC" = "X"       # {
  then
    LSOF_CC=cc
  fi      # }
@


1.152
log
@Revision 4.79
@
text
@d17 1
a17 1
# $Id: Configure,v 1.151 2007/04/24 16:16:30 abe Exp abe $
d82 1
d119 1
d149 1
d181 1
d806 4
d1486 8
a1699 3
	fi	# }
	if test $LSOF_VERS -ge 7000	# {
	then
d1701 3
a1703 1
	# Do FreeBSD 7.0 and higher version-specific stuff.
d1705 2
a1706 1
	  if test -r ${FREEBSD_SYS}/contrib/opensolaris/uts/common/fs/zfs/sys/zfs_znode.h	# {
d1708 8
d1721 15
d1739 2
a1740 1
	  # Determine the type of locking structure to which the inode points.
d1754 1
a1754 1
		LSOF_TMP1=`grep -n "^struct lock_owner" ${FREEBSD_SYS}/kern/kern_lockf.c | sed 's/\([0-9]*\):.*$/\1/`
d2471 2
d4093 8
d5162 2
d5239 7
@


1.151
log
@Revision 4.78
@
text
@d17 1
a17 1
# $Id: Configure,v 1.150 2006/04/10 12:44:20 abe Exp abe $
d26 1
a26 1
LSOF_F="ddev.c dfile.c dlsof.h dmnt.c dnode*.c dproc.c dproto.h dsock.c dstore.c kernelbase.h machine.h machine.h.old new_machine.h __lseek.s"
d74 1
a74 1
#	$LSOF_DINC_ADD	    include flags -- -I's -- must be added to $LSOF_DINC
d79 3
d144 3
d187 12
d262 6
a267 6
      rm -f $LSOF_F $LSOF_MKFC ${LSOF_TMPC_BASE}*
      echo rm -f $LSOF_F $LSOF_MKFC ${LSOF_TMPC_BASE}*
      rm -rf AFSHeaders AFSVersion version.h
      echo "rm -rf AFSHeaders AFSVersion version.h"
      rm -f ${LSOF_HLP_BASE}* cd9660_node.h
      echo "rm -f ${LSOF_HLP_BASE}* cd9660_node.h"
d320 1
a320 1
      if test $LSOF_TGT != no-target	# {
d1298 1
d1442 4
d1460 4
d1501 1
d1556 1
a1556 1
    4000|4010|4020|4030|4040|4050|4060|4070|4080|4090|4100|4110|5000|5010|5020|5030|5040|5050|6000|6010|7000)
d1685 86
d1905 1
a1905 1
	LSOF_DINC="$LSOF_DINC -I${LSOF_INCLUDE} -I$FREEBSD_SYS"
d2060 8
d2257 1
a2257 1
	      echo "Looking in $HPUX_BOOTFILE for ipis_s with $LSOF_TMP ... \c"
d2290 1
a2290 1
	      echo "ls says: \c"
d2439 1
a2439 1
      cat > $LSOF_TMPC.c << .LSOF_END_HERE_DOC
d2450 1
a2450 1
.LSOF_END_HERE_DOC
d2489 2
a2490 1
    if test -r ${LSOF_INCLUDE}/selinux/selinux.h	# {
d2492 12
d2508 1
a2508 1
    LSOF_CFGF="$LSOF_CFGF -D_FILE_OFFSET_BITS=64"
d4890 12
d4915 3
a4917 2
rm -f $LSOF_F $LSOF_MKFC $LSOF_TSTCFLG $LSOF_TSTCC $LSOF_TSTXOC $LSOF_TSTLFF
echo "rm -f $LSOF_F $LSOF_MKFC $LSOF_TSTCFLG"
d4920 38
d5086 30
@


1.150
log
@Revision 4.77
@
text
@d17 1
a17 1
# $Id: Configure,v 1.149 2006/03/27 23:04:05 abe Exp abe $
d64 1
a64 1
#	$LSOF_CC	    C compiler name (may be supplied extermally)
d250 2
a251 2
      rm -f dialects/aix/aix41*
      echo "rm -f dialects/aix/aix41*"
d538 2
d544 8
d1594 6
d2364 8
d4242 62
a4313 1

@


1.149
log
@Revision 4.77
@
text
@d17 1
a17 1
# $Id: Configure,v 1.148 2005/08/29 10:17:36 abe Exp abe $
d983 2
a984 2
        if test "X${i}" != "X" -a -r ${i}/sys/namei.h	# {
        then
d991 1
a991 1
        fi	# }
d995 2
a996 2
        if test "X${i}" != "X"	# {
        then
d1022 1
a1022 1
        fi	# }
d3370 8
d3380 1
a3380 1
	LSOF_VERS=3070
d3382 1
a3382 1
	echo "!!!WARNING!!!  Configuring for OpenBSD 3.7"
d3386 2
a3387 2
	echo Assuming OpenBSD 3.7
	LSOF_VERS=3070
d3395 1
a3395 1
    1020|2050|2060|2070|2080|2090|3000|3010|3020|3030|3040|3050|3060|3070)
d3501 1
a3501 2
      grep -q "*e2fs_din" ${LSOF_INCLUDE}/ufs/ufs/inode.h
      if test $? -eq 0	# {
d3503 10
a3512 1
	LSOF_CFGF="$LSOF_CFGF -DHASI_E2FS_PTR"
a3513 5
      grep -q "^#define[ 	]i_e2din" ${LSOF_INCLUDE}/ufs/ufs/inode.h
      if test $? -eq 0	# {
      then
	LSOF_TMP1=2
      fi	# }
d3523 15
d3614 1
a3614 1
        cat $LSOF_TMP3 >> $LSOF_TMP4
@


1.148
log
@Revision 4.76
@
text
@d17 1
a17 1
# $Id: Configure,v 1.147 2005/08/08 19:45:19 abe Exp $
a193 1
    bsdi                    : BSDI BSD/OS
a775 116
# Configure for BSDI BSD/OS.

  bsdi)
    if test "X$LSOF_CC" = "X"	# {
    then
      LSOF_CC=gcc
      LSOF_CCV=`$LSOF_CC -v 2>&1 | sed -n 's/.*version \(.*\)/\1/p'`
    fi	# }
    if test -x /usr/bin/shlicc2
    then
      LSOF_LD=/usr/bin/shlicc2
    else
      if test -x /usr/bin/shlicc
      then
	LSOF_LD=/usr/bin/shlicc
      fi
    fi
    if test "X$LSOF_VSTR" = "X"	# {
    then
      LSOF_VSTR=`uname -r`
    fi	# }
    if test "X$LSOF_VERS" = "X"	# {
    then

      # If the BSDI version isn't predefined, determine it.

      case $LSOF_VSTR in	# {
      2.0*)
	LSOF_VERS=20000
	;;
      2.1*)
	LSOF_VERS=20100
	;;
      3.0*)
	LSOF_VERS=30000
	;;
      3.1*)
	LSOF_VERS=30100
	;;
      4.0*)
	LSOF_VERS=40000
	;;
      4.1*)
	LSOF_TSTBIGF=" "
	LSOF_VERS=40100
	;;
      4.3*)
	LSOF_TSTBIGF=" "
	LSOF_VERS=40300
	;;
      5.0)
	LSOF_TSTBIGF=" "
	LSOF_VERS=50000
	;;
      *)  
	echo "Unsupported BSDI release: $LSOF_VSTR"
	echo "Assuming BSDI BSD/OS 4.3"
	LSOF_VERS=40300
	;;
      esac	# }
    fi	# }

    # Test for a legal BSDI version.

    case $LSOF_VERS in	# {
    20000|20100|30000|30100|40000|40100|40300|50000)
      ;;
    *)
      echo "Unsupported BSDI version: $LSOF_VERS"
      rm -f $LSOF_HLP
      exit 1
      ;;
    esac	# }
    LSOF_CFGF="-DBSDIV=$LSOF_VERS"
    if test -r ${LSOF_INCLUDE}/miscfs/fdesc/fdesc.h	# {
    then
      grep -q Fctty ${LSOF_INCLUDE}/miscfs/fdesc/fdesc.h
      if test $? -eq 0	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASFDESCFS=1"
      else
	LSOF_CFGF="$LSOF_CFGF -DHASFDESCFS=2"
      fi	# }
      grep -q fd_link ${LSOF_INCLUDE}/miscfs/fdesc/fdesc.h
      if test $? -eq 0	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASFDLINK"
      fi	# }
    fi	# }
    if test -r ${LSOF_INCLUDE}/sys/namei.h	# {
    then
      grep -q nc_vpid ${LSOF_INCLUDE}/sys/namei.h
      if test $? -eq 0	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASNCVPID"
      fi	# }
    fi	# }
    if test -r ${LSOF_INCLUDE}/ufs/ufs/inode.h	# {
    then
      grep -q i_effnlink ${LSOF_INCLUDE}/ufs/ufs/inode.h
      if test $? -eq 0	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASEFFNLINK=i_effnlink"
      fi	# }
    fi	# }
    if test $LSOF_VERS -ge 40000	# {
    then
      if test -d ${LSOF_INCLUDE}/netinet6	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASIPv6"
      fi	# }
    fi	# }
    LSOF_CFGL="-lrpc -lkvm"
    LSOF_DIALECT_DIR=bsdi
    ;;

a858 2
    # Make sure Darwin XNU kernel headers are present.

d874 1
a874 1
    # Look for the required Darwin XNU kernel header files.
d876 44
d976 2
d979 1
a979 1
    # Make conditional feature definitions.
d981 6
a986 19
    for i in $LSOF_TMP2 $LSOF_TMP3 $LSOF_TMP4 $LSOF_INCLUDE      # {
    do
      if test "X${i}" != "X" -a -r ${i}/sys/namei.h	# {
      then
	grep -q nc_vpid ${i}/sys/namei.h
	if test $? -eq 0	# {
	then
	  LSOF_CFGF="$LSOF_CFGF -DHASNCVPID"
	fi	# }
	break
      fi	# }
    done	# }
    for i in $LSOF_TMP2 $LSOF_TMP3 $LSOF_TMP4 $LSOF_INCLUDE	# {
    do
      if test "X${i}" != "X"	# {
      then
	if test $LSOF_VERS -ge 800	# {
	then
	  if test -r ${i}/sys/file_internal.h	# {
d988 1
a988 6
	    grep -q DTYPE_KQUEUE ${i}/sys/file_internal.h
	    if test $? -eq 0	# {
	    then
	      LSOF_CFGF="$LSOF_CFGF -DHASKQUEUE"
	    fi	# }
	    break
d990 8
a997 2
	else
	  if test $LSOF_VERS -ge 700	# {
d999 1
a999 1
	    if test -r ${i}/sys/file.h	# {
d1001 1
a1001 1
	      grep -q DTYPE_KQUEUE ${i}/sys/file.h
d1006 1
d1008 13
a1020 1
	    break
d1022 3
a1024 3
	fi	# }
      fi	# }
    done	# }
a1025 1
    LSOF_DIALECT_DIR=darwin
d1396 4
d1401 1
a1401 1
	LSOF_VERS=5030
d1403 1
a1403 1
	echo "!!!WARNING!!!  Configuring for FreeBSD 5.3"
d1409 4
d1518 1
a1518 1
    4000|4010|4020|4030|4040|4050|4060|4070|4080|4090|4100|4110|5000|5010|5020|5030|5040|6000|7000)
d1630 5
d1636 4
d2102 2
a2106 2
	if test $LSOF_VERS -eq 1100	# {
	then
d3119 2
a3120 1
      # Build a local NetBSD netexport.h header file.
d3153 9
a3161 3
      cat $LSOF_TMP2 >> $LSOF_TMP4
      echo "" >> $LSOF_TMP4
      cat $LSOF_TMP3 >> $LSOF_TMP4
d3547 2
a3548 1
      # Build the netexport.h header file for OpenBSD from <sys/mount.h>.
d3581 9
a3589 3
      cat $LSOF_TMP2 >> $LSOF_TMP4
      echo "" >> $LSOF_TMP4
      cat $LSOF_TMP3 >> $LSOF_TMP4
d3596 1
a3596 1
      fi
@


1.147
log
@Revision 4.76
@
text
@d17 1
a17 1
# $Id: Configure,v 1.146 2005/05/17 01:06:02 abe Exp abe $
d4179 14
d4326 3
d4330 2
a4331 1
    if test "X$SOLARIS_VXFSINCL" = "X"	#
d4333 10
a4342 5

    # If the location of the VxFS header files hasn't been defined in the
    # environment, establish their likely location.

      if test -d /opt/VRTSvxfs/include	# {
d4345 5
a4349 9
	SOLARIS_VXFSINCL="/opt/VRTSvxfs/include"
      else
	LSOF_TMP1=0
	SOLARIS_VXFSINCL="/usr/include"
      fi
    else
      LSOF_TMP1=1
    fi	# }
    if test -r ${SOLARIS_VXFSINCL}/vxfsutil.h	# {
d4352 2
a4353 1
    # The VxFS header files are for VxFS version 3.4 or above.
d4355 2
d4371 1
a4371 1
	SOLARIS_VXFSLIB="/opt/VRTSvxfs/lib"
d4376 1
a4376 1
	echo "!!!FATAL: no $LSOF_TMP3"
d4379 1
d4381 1
a4381 1
    # Identify the VxFS version, if possible.
d4383 2
a4384 2
      echo "Determining VxFS version"
      if test "X$SOLARIS_VXFSVERS" = "X"	# {
d4386 1
a4386 29
	SOLARIS_VXFSVERS=`pkginfo -l VRTSvxfs 2> /dev/null | grep VERSION: | sed 's/^ *VERSION: *\([0-9\.]*\),.*$/\1/'`
	if test "X$SOLARIS_VXFSVERS" = "X"	# {
	then
	  SOLARIS_VXFSVERS="3.4"
	fi	# }
      fi	# {
      echo "VxFS version is: $SOLARIS_VXFSVERS"
      LSOF_TMP4=`echo $SOLARIS_VXFSVERS | awk -F. '{printf "%d%03d",$1,$2}'`
      if test $LSOF_TMP4 -lt 3004
      then
	echo ""
	echo "************************************************************"
	echo "*                                                          *"
	echo "* WARNING!!!     UNSUPPORTED VxFS version!      WARNING!!! *"
	echo "* WARNING!!! VxFS support is not being enabled. WARNING!!! *"
	echo "*                                                          *"
	echo "************************************************************"
	echo ""
      else
	SOLARIS_VXFSVERS=$LSOF_TMP4

      # Enable support for VxFS versions 3.4 and above.

	LSOF_CFGF="$LSOF_CFGF -DHASVXFS=$SOLARIS_VXFSVERS -DHASVXFSUTIL"
	if test $LSOF_TMP1 -eq 1	# {
	then
	  LSOF_CFGF="$LSOF_CFGF -I$SOLARIS_VXFSINCL"
	fi	# }
	LSOF_CFGL="-L$SOLARIS_VXFSLIB${LSOF_TMP2} -lvxfsutil -ldl"
d4392 1
a4392 1
      if test -r ${SOLARIS_VXFSINCL}/sys/fs/vx_inode.h	# {
d4396 1
a4396 3
      # file tests.  If the VxFS version hasn't been supplied in the
      # SOLARIS_VXFSVERS environment variable, set it to 3.3 to indicate
      # it is something less than 3.4.
d4398 2
a4399 2
	echo "Determining VxFS version"
	if test "X$SOLARIS_VXFSVERS" = "X"	# {
d4401 1
a4401 1
	  SOLARIS_VXFSVERS=3.3
d4403 1
a4403 3
	echo "VxFS version is: $SOLARIS_VXFSVERS"
	LSOF_TMP4=`echo $SOLARIS_VXFSVERS | awk -F. '{printf "%d%03d",$1,$2}'`
	if test $LSOF_TMP4 -le 0 -o $LSOF_TMP4 -ge 3004	 # {
d4405 11
a4415 15
	  echo ""
	  echo "************************************************************"
	  echo "*                                                          *"
	  echo "* WARNING!!!     UNSUPPORTED VxFS version!      WARNING!!! *"
	  echo "* WARNING!!! VxFS support is not being enabled. WARNING!!! *"
	  echo "*                                                          *"
	  echo "************************************************************"
	  echo ""
	else
	  SOLARIS_VXFSVERS=$LSOF_TMP4

	# Determine parameters of VxFS version.

	  LSOF_CFGF="$LSOF_CFGF -DHASVXFS=$SOLARIS_VXFSVERS"
	  if test $LSOF_TMP1 -eq 1	# {
d4417 1
a4417 1
	    LSOF_CFGF="$LSOF_CFGF -I$SOLARIS_VXFSINCL"
d4419 2
a4420 1
	  if test -r ${SOLARIS_VXFSINCL}/sys/fs/vx_fs.h	# {
d4422 1
a4422 1
	    LSOF_CFGF="$LSOF_CFGF -DHASVXFS_FS_H"
d4424 1
a4424 28
	  if test -r ${SOLARIS_VXFSINCL}/sys/fs/vx_sol.h	# {
	  then
	    LSOF_CFGF="$LSOF_CFGF -DHASVXFS_SOL_H"
	  fi	# }
	  if test -r ${SOLARIS_VXFSINCL}/sys/fs/vx_machdep.h	# {
	  then
	    LSOF_CFGF="$LSOF_CFGF -DHASVXFS_MACHDEP_H"
	  fi	# }
	  if test -r ${SOLARIS_VXFSINCL}/sys/fs/vx_solaris.h	# {
	  then
	    LSOF_CFGF="$LSOF_CFGF -DHASVXFS_SOLARIS_H"
	    grep "off32_t;" ${SOLARIS_VXFSINCL}/sys/fs/vx_machdep.h > /dev/null
	    if test $? -eq 0	# {
	    then
	      LSOF_CFGF="$LSOF_CFGF -DHASVXFS_OFF32_T"
	    fi	# }
	    grep "off64_t;" ${SOLARIS_VXFSINCL}/sys/fs/vx_solaris.h > /dev/null
	    if test $? -eq 0	# {
	    then
	      LSOF_CFGF="$LSOF_CFGF -DHASVXFS_OFF64_T"
	    fi	# }
	    grep "vx_u64_t;" ${SOLARIS_VXFSINCL}/sys/fs/vx_solaris.h > /dev/null
	    if test $? -eq 0	# {
	    then
	      LSOF_CFGF="$LSOF_CFGF -DHASVXFS_U64_T"
	    fi	# }
	  fi	# }
	  egrep "struct[ 	]vx_inode[ 	]\{" ${SOLARIS_VXFSINCL}/sys/fs/vx_inode.h > /dev/null
d4427 1
a4427 1
	    LSOF_CFGF="$LSOF_CFGF -DHASVXFS_VX_INODE"
d4430 6
d4472 1
a4472 1
      LSOF_CINFO="OSR5 support via UnixWare sources"
@


1.146
log
@Revision 4.75
@
text
@d17 1
a17 1
# $Id: Configure,v 1.145 2005/05/11 23:29:38 abe Exp abe $
d539 5
a543 5
        LSOF_CFGF="$LSOF_CFGF -DHAS_JFS2"
        LSOF_CFGF="$LSOF_CFGF -I`pwd`/dialects/aix/aix5"
        if test $LSOF_VERS -ge 5200	# {
        then
          echo $LSOF_CC | grep gcc > /dev/null
d560 1
a560 1
        fi	# }
d871 1
a871 1
        LSOF_CFGF="$LSOF_CFGF -DHASNCVPID"
d879 1
a879 1
        LSOF_CFGF="$LSOF_CFGF -DHASEFFNLINK=i_effnlink"
d932 3
d937 2
a938 2
	echo Assuming Darwin 6.0
	LSOF_VERS=600
d963 4
d973 1
a975 8
    # Get the root path to the /System.framework/PrivateHeaders, as required.

    if test "X$DARWIN_SYSDIR" = "X"	# {
    then
       DARWIN_SYSDIR=/System/Library/Frameworks
    fi	# }
    LSOF_TMP2="${DARWIN_SYSDIR}/System.framework/PrivateHeaders"

d980 8
a987 5

    # Add a trailing "/bsd" to the supplied path, as required.

      echo $DARWIN_XNUDIR | grep "/bsd$" > /dev/null
      if test $? -ne 0	# {
d989 1
a989 1
	DARWIN_XNUDIR="${DARWIN_XNUDIR}/bsd"
d993 1
a993 2
    # Look for the required Darwin XNU kernel header files in the paths
    # specified in $LSOF_TMP2 and $DARWIN_XNUDIR.
d995 1
a995 1
    LSOF_TMP3=1
d998 10
a1007 1
      if test "X$DARWIN_XNUDIR" = "X" -o ! -f ${DARWIN_XNUDIR}/$i # {
d1009 7
a1015 5
        if test ! -f ${LSOF_TMP2}/$i	# {
        then
	  LSOF_TMP3=0
        fi	# }
      fi	# }
d1017 1
a1017 1
    if test $LSOF_TMP3 -ne 1	# {
d1023 2
a1024 2
      LSOF_TMP3=`pwd`/dialects/darwin/get-hdr-loc.sh
      if test ! -x $LSOF_TMP3	# {
d1026 1
a1026 1
	echo "FATAL: can't execute: $LSOF_TMP3"
d1030 1
a1030 1
      DARWIN_XNUDIR=`$LSOF_TMP3 $LSOF_TMP2 $LSOF_TMP1`
d1033 1
a1033 1
	echo "FATAL: $LSOF_TMP3 returns: $DARWIN_XNUDIR"
d1037 3
d1041 6
a1046 4
    if test -r ${LSOF_INCLUDE}/sys/namei.h
    then
      grep -q nc_vpid ${LSOF_INCLUDE}/sys/namei.h
      if test $? -eq 0	# {
d1048 1
a1048 1
        LSOF_CFGF="$LSOF_CFGF -DHASNCVPID"
d1050 7
a1056 5
    fi	# }
    if test $LSOF_VERS -ge 700 -a ${LSOF_INCLUDE}/sys/file.h	# {
    then
      grep -q DTYPE_KQUEUE ${LSOF_INCLUDE}/sys/file.h
      if test $? -eq 0
d1058 39
a1096 9
	LSOF_CFGF="$LSOF_CFGF -DHASKQUEUE"
      fi
    fi	#}
    if test "X$DARWIN_XNUDIR" != "X"	# {
    then
      LSOF_DINC="$LSOF_DINC -I$DARWIN_XNUDIR"
    fi	# }
    LSOF_DINC="$LSOF_DINC -I$LSOF_TMP2"
    LSOF_DINC="$LSOF_DINC -I${DARWIN_SYSDIR}/Kernel.framework/Headers"
d1334 1
a1334 1
        LSOF_CFGF="$LSOF_CFGF -DHASNCVPID"
d1483 9
d1583 1
a1583 1
    4000|4010|4020|4030|4040|4050|4060|4070|4080|4090|4100|4110|5000|5010|5020|5030|5040|6000)
d1822 1
a1822 1
        LSOF_CFGF="$LSOF_CFGF -DHASNCVPID"
d2522 1
a2522 1
          LSOF_CFGF="$LSOF_CFGF -DHASKVMGETPROC2"
d2539 1
a2539 1
        NETBSD_SYS=$LSOF_INCLUDE
d2707 1
a2707 1
          LSOF_CFGF="$LSOF_CFGF -DHASBUFQ_H"
d2852 1
a2852 1
        LSOF_CFGF="$LSOF_CFGF -DHASNCVPID"
d2942 1
a2942 1
        fi	# }
d3510 2
a3511 2
        LSOF_CFGF="$LSOF_CFGF -DHAS9660FS=2"
        LSOF_TMP1=1
d3521 2
a3522 2
        LSOF_CFGF="$LSOF_CFGF -DHASMSDOSFS=2"
        LSOF_TMP1=1
d3567 1
a3567 1
        LSOF_CFGF="$LSOF_CFGF -DHASNCVPID"
d4191 1
a4191 1
          # DEBUG -- Begin temporary hack for Solaris 10, build s10_44.
d4203 1
a4203 1
          # DEBUG -- End temporary hack for Solaris 10, build s10_44.
d4358 1
a4358 1
    # Enable support for VxFS versions 3.4 and above.
d4360 2
a4361 2
      LSOF_CFGF="$LSOF_CFGF -DHASVXFS -DHASVXFSUTIL"
      if test $LSOF_TMP1 -eq 1	# {
d4363 29
a4391 1
	LSOF_CFGF="$LSOF_CFGF -I$SOLARIS_VXFSINCL"
a4392 1
      LSOF_CFGL="-L$SOLARIS_VXFSLIB${LSOF_TMP2} -lvxfsutil -ldl"
d4401 3
a4403 1
      # file tests.
d4405 2
a4406 2
	LSOF_CFGF="$LSOF_CFGF -DHASVXFS"
	if test $LSOF_TMP1 -eq 1	# {
d4408 1
a4408 1
	  LSOF_CFGF="$LSOF_CFGF -I$SOLARIS_VXFSINCL"
d4410 3
a4412 1
	if test -r ${SOLARIS_VXFSINCL}/sys/fs/vx_fs.h	# {
d4414 15
a4428 15
	  LSOF_CFGF="$LSOF_CFGF -DHASVXFS_FS_H"
	fi	# }
	if test -r ${SOLARIS_VXFSINCL}/sys/fs/vx_sol.h	# {
	then
	  LSOF_CFGF="$LSOF_CFGF -DHASVXFS_SOL_H"
	fi	# }
	if test -r ${SOLARIS_VXFSINCL}/sys/fs/vx_machdep.h	# {
	then
	  LSOF_CFGF="$LSOF_CFGF -DHASVXFS_MACHDEP_H"
	fi	# }
	if test -r ${SOLARIS_VXFSINCL}/sys/fs/vx_solaris.h	# {
	then
	  LSOF_CFGF="$LSOF_CFGF -DHASVXFS_SOLARIS_H"
	  grep "off32_t;" ${SOLARIS_VXFSINCL}/sys/fs/vx_machdep.h > /dev/null
	  if test $? -eq 0	# {
d4430 1
a4430 1
	    LSOF_CFGF="$LSOF_CFGF -DHASVXFS_OFF32_T"
d4432 1
a4432 2
	  grep "off64_t;" ${SOLARIS_VXFSINCL}/sys/fs/vx_solaris.h > /dev/null
	  if test $? -eq 0	# {
d4434 1
a4434 1
	    LSOF_CFGF="$LSOF_CFGF -DHASVXFS_OFF64_T"
d4436 28
a4463 1
	  grep "vx_u64_t;" ${SOLARIS_VXFSINCL}/sys/fs/vx_solaris.h > /dev/null
d4466 1
a4466 1
	    LSOF_CFGF="$LSOF_CFGF -DHASVXFS_U64_T"
a4468 5
	egrep "struct[ 	]vx_inode[ 	]\{" ${SOLARIS_VXFSINCL}/sys/fs/vx_inode.h > /dev/null
	if test $? -eq 0	# {
	then
	  LSOF_CFGF="$LSOF_CFGF -DHASVXFS_VX_INODE"
	fi	# }
@


1.145
log
@Revision 4.75
@
text
@d17 1
a17 1
# $Id: Configure,v 1.144 2005/05/11 13:01:57 abe Exp abe $
d31 1
a31 1
#	          version of a Makefile.  It is used as a suffix to $LSOF_MKF.
d586 1
a586 1
	# do an ia64 lsof compilation unknown.
d1466 1
a1466 1
	  LSOF_CFGF=`echo $LSOF_CFGF | sed 's/\(.*\)-O[^ $]*\(.*\)/\1 \2/' | sed 's/^  *//g' | sed 's/  */ /g' | sed 's/  *$//`
d1589 1
a1589 1
	        LSOF_CFGF="$LSOF_CFGF -DHASCPUMASK_T"
d2012 4
a2015 4
	        rm -f ${LSOF_TMPC}.x
	        $LSOF_CC ${LSOF_TMPC}.c -mlp64 -o ${LSOF_TMPC}.x > /dev/null 2>&1
	        if test $? -eq 0	# {
	        then
d2021 1
a2021 1
	        fi	# }
d2026 13
a2038 13
	        echo ""
	        echo "***************************************************"
	        echo "*                                                 *"
	        echo "* !!!!!!!!!!!!!!!!! FATAL ERROR !!!!!!!!!!!!!!!!! *"
	        echo "*                                                 *"
	        echo "* APPARENTLY GCC CANNOT BUILD 64 BIT EXECUTABLES. *"
	        echo "* A COMPILER MUST BE USED THAT CAN.  SEE 00FAQ    *"
	        echo "* FOR MORE INFORMATION.                           *"
	        echo "*                                                 *"
	        echo "***************************************************"
	        echo ""
	        rm -f $LSOF_HLP
	        exit 1
d2044 2
a2045 2
	        LSOF_CFGL="$LSOF_CFGL -lelf"
	        LSOF_CINFO="${LSOF_CINFO}, 64 bit HP-UX"
d2078 2
a2079 2
	        if test -r ${LSOF_INCLUDE}/nfs/rnode.h	# {
	        then
d2085 1
a2085 1
	        fi	# }
d2090 1
a2090 1
	        LSOF_TMP1=1
d3971 1
a3971 1
	echo $SOLARIS_KERNBITS  | grep 64 > /dev/null
a3973 1
	  LSOF_TSTK64=1
d4027 9
a4035 8
	     echo ""
	     echo "*********************************"
	     echo "* Configuring for 64 bit kernel *"
	     echo "*********************************"
	     echo ""
	     LSOF_CFGF="$LSOF_CFGF $LSOF_TMP1"
	     LSOF_CINFO="64 bit kernel"
	   fi	# }
d4040 1
a4040 6
	    echo "Testing $LSOF_CC for 64 bit support"
	    rm -f ${LSOF_TMPC}.*
	    echo "main(){}" > ${LSOF_TMPC}.c
	    LSOF_TMP1=0
	    $LSOF_CC ${LSOF_TMPC}.c -xarch=v9 -o ${LSOF_TMPC}.x > /dev/null 2>&1
	    if test $? -eq 0	# {
d4042 22
a4063 1
	      /bin/file ${LSOF_TMPC}.x | /bin/grep 64 > /dev/null 
d4066 5
a4070 1
		LSOF_TMP1=1
d4072 3
d4076 1
a4076 2
	    rm -f ${LSOF_TMPC}.*
	    if test $LSOF_TMP1 -eq 1	# {
a4077 1
	      LSOF_CFGF="$LSOF_CFGF -xarch=v9"
d4083 1
d4085 1
d4089 7
a4095 6
	      echo "!                                                         !"
	      echo "! LSOF NEEDS TO BE CONFIGURED FOR A 64 BIT KERNEL, BUT    |"
	      echo "! THE VERSION OF SUN C AVAILABLE DOESN'T SUPPORT THE      !"
	      echo "! -xarch=v9 FLAG.  LSOF WILL BE CONFIGURED FOR A 32 BIT   !"
	      echo "! KERNEL.                                                 !"
	      echo "!                                                         !"
@


1.144
log
@Revision 4.75
@
text
@d17 1
a17 1
# $Id: Configure,v 1.143 2005/01/17 13:24:30 abe Exp abe $
a204 1
    openunix|ou             : Caldera OpenUNIX
d3356 4
d3362 1
a3362 1
	LSOF_VERS=3060
d3364 1
a3364 1
	echo "!!!WARNING!!!  Configuring for OpenBSD 3.6"
d3368 2
a3369 2
	echo Assuming OpenBSD 3.6
	LSOF_VERS=3060
d3377 1
a3377 1
    1020|2050|2060|2070|2080|2090|3000|3010|3020|3030|3040|3050|3060)
a3596 75
# Configure for Caldera OpenUNIX.

  openunix|ou)
    LSOF_TGT="ou";
    LSOF_TSTBIGF=" "
    LSOF_TSTLFLG="-lsocket"
    LSOF_RANLIB=""
    if test "X$LSOF_VSTR" = "X"	# {
    then
      LSOF_VSTR=`uname -v`
    fi	# }
    if test "X$LSOF_VERS" = "X"	# {
    then

      # If the OpenUNIX version isn't pre-defined, determine it.

      LSOF_VERS=`echo $LSOF_VSTR | sed 's/\([0-9\.]*\).*/\1/; s/\./ /g' | awk '{printf "%d%02d%02d\n", $1, $2, $3;}'`
    fi	# }
    LSOF_CFGF="-DOPENUNIXV=$LSOF_VERS"

    # Prepare compiler information.

    if test "X$LSOF_CC" = "X"	#
    then
      LSOF_CC=cc
      LSOF_CCV=`$LSOF_CC -V 2>&1 | grep INFO`
    fi	# }

    # Do OpenUNIX version-specific stuff.

    case $LSOF_VERS in	# {
    80000|80001)
      if test $LSOF_VERS -lt 80001	# {
      then

      # Do things specific to 8.0.

	LSOF_CFGL="-lsocket -lnsl -lelf -lgen"
	LSOF_DINC="$LSOF_DINC -I`pwd`/dialects/ou/ou8"
      else

      # Do things specific to 8.0.1 and above.

	LSOF_CFGL="-lsocket -lnsl -lelf -lgen -lcdfs"
      fi	# }
      if test -r ${LSOF_INCLUDE}/sys/fs/vx_gemini.h	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASVXFS"
      fi	# }
      if test -r ${LSOF_INCLUDE}/netinet/in6.h	# {
      then
	  LSOF_CFGF="$LSOF_CFGF -DHASIPv6"
      fi	# }
      if test -r ${LSOF_INCLUDE}/sys/fs/cdfs_fs.h	# {
      then
	grep "cdfs_LogSecShift;" ${LSOF_INCLUDE}/sys/fs/cdfs_fs.h > /dev/null 2>&1
	if test $? -eq 0	# {
	then
	  LSOF_TMP=`grep "cdfs_LogSecShift;" ${LSOF_INCLUDE}/sys/fs/cdfs_fs.h | sed 's/^[ 	]*\([^ 	]*\).*/\1/'`
	  if test "X$LSOF_TMP" != "X"	# {
	  then
	    LSOF_CFGF="$LSOF_CFGF -DTYPELOGSECSHIFT=$LSOF_TMP"
	  fi	# }
	fi	# }
      fi	# }
      ;;
    *)
      echo Unsupported OpenUNIX version: `uname -v`
      rm -f $LSOF_HLP
      exit 1
      ;;
    esac	# }
    LSOF_DIALECT_DIR=ou
    ;;

@


1.143
log
@Revision 4.74
@
text
@d17 1
a17 1
# $Id: Configure,v 1.142 2004/12/30 18:38:58 abe Exp abe $
d206 3
a208 2
    osr|sco                 : SCO OpenServer, SCO devloper's compiler
    osrgcc|scogcc           : SCO OpenServer, gcc compiler
d262 2
a263 2
      rm -f dialects/uw/uw21/vm/swap.h dialects/uw/uw7/vm/swap.h
      echo "rm -f dialects/uw/uw21/vm/swap.h dialects/uw/uw7/vm/swap.h"
d517 2
a518 2
    if test -r ${LSOF_INCLUDE}/sys/stat.h
    then	# {
d525 4
d534 2
a535 2
    if test -d ${LSOF_INCLUDE}/j2	# {
    then
d540 7
a546 7
      LSOF_CFGF="$LSOF_CFGF -DHAS_JFS2"
      LSOF_CFGF="$LSOF_CFGF -I`pwd`/dialects/aix/aix5"
      if test $LSOF_VERS -ge 5200	# {
      then
        echo $LSOF_CC | grep gcc > /dev/null
	if test $? -eq 0	# {
	then
d548 1
a548 1
	# Test gcc version for AIX 5.2.
d550 3
a552 3
	  LSOF_TMP1=`echo $LSOF_CCV | awk -F . '{printf "%d%02d",$1,$2}'`
	  if test $LSOF_TMP1 -ge 303	# {
	  then
d554 3
a556 3
	  # Add gcc >= 3.3 option to handle use of i_dev from the wInode
	  # anonymous structure reference in the JFS2 inode structure of
	  # <j2/j2_inode.h>.
d558 4
a561 3
	    LSOF_CFGF="$LSOF_CFGF -fms-extensions"
	  fi	# }
	fi	#}
a562 1
    fi	# }
d564 1
a564 1
    # Determine the AIX architecture type and set AIXA accordingly.
d1416 4
d1421 1
a1421 1
	LSOF_VERS=5020
d1423 1
a1423 1
	echo "!!!WARNING!!!  Configuring for FreeBSD 5.2"
d1525 1
a1525 1
    4000|4010|4020|4030|4040|4050|4060|4070|4080|4090|4100|4110|5000|5010|5020|5030|6000)
d1617 22
d1750 8
d1774 1
a1774 1
      fi	# )
d1842 1
a1842 1
	what $LSOF_CC | grep -q Bundled
a1869 1
      LSOF_CFGF="-DHAS_CONST"
d1871 1
a1871 1
      what $LSOF_CC | grep -q Bundled
d1879 11
d1924 4
d1937 1
a1937 1
	fi
d2402 1
a2402 1
      2.99.11)
d2404 1
a2404 1
	LSOF_VERS="2099011"
d2411 13
d2435 1
a2435 1
    1002000|1003000|1004000|1005000|1006000|2000000|2099009|2099010|2099011)
d2437 4
d3976 1
a3976 3
	  echo "         for an explanation of the work-around being supplied by including"
	  echo "         the header file ./dialects/sun/include/sys/auxv.h."
	  LSOF_DINC="$LSOF_DINC -I`pwd`/dialects/sun/include"
d4422 1
a4422 1
# Configure for SCO|Caldera UnixWare.
d4424 2
a4425 1
  unixware|uw)
d4435 2
a4436 1
      # If the UnixWare version isn't pre-defined, determine it.
d4440 16
d4458 1
a4458 1
    # Do UnixWare version-specific stuff.
a4461 5
      LSOF_DINC="$LSOF_DINC -I`pwd`/dialects/uw/uw21"
      if test ! -r ${LSOF_INCLUDE}/vm/swap.h -a -r ${LSOF_INCLUDE}/sys/swap.h	# {
      then
	(cd ./dialects/uw/uw21/vm; rm -f swap.h; ln -s ${LSOF_INCLUDE}/sys/swap.h swap.h)
      fi	# }
d4482 27
d4519 1
a4519 1
      /bin/pkginfo | grep -i patch | grep -i ptf7038 > /dev/null
d4551 2
a4552 1
	# Do UnixWare 7.1.1 and above tests, as required.
@


1.142
log
@Revision 4.74
@
text
@d17 1
a17 1
# $Id: Configure,v 1.141 2004/10/19 19:36:15 abe Exp abe $
d1386 4
d1516 1
a1516 1
    4000|4010|4020|4030|4040|4050|4060|4070|4080|4090|4100|5000|5010|5020|5030|6000)
d1594 1
a1594 1
	if test $LSOF_VERS -ge 6000	# {
d1597 1
a1597 1
	# Do FreeBSD 6 and higher version-specific stuff.
d2349 4
d2369 1
a2369 1
    1002000|1003000|1004000|1005000|1006000|2000000|2099009|2099010)
@


1.141
log
@Revision 4.73
@
text
@d17 1
a17 1
# $Id: Configure,v 1.140 2004/07/13 09:28:39 abe Exp abe $
d87 3
d100 1
d112 1
d169 1
d862 1
a862 1
    if test -r ${LSOF_INCLUDE}/sys/namei.h
d870 8
d1521 16
d1590 14
a2310 6
      1.0*)
	LSOF_VERS="1000"
	;;
      1.1*)
	LSOF_VERS="1010"
	;;
d2312 1
a2312 1
	LSOF_VERS="1020"
d2315 1
a2315 1
	LSOF_VERS="1030"
d2318 1
a2318 1
	LSOF_VERS="1040"
d2322 1
a2322 1
	LSOF_VERS="1050"
d2326 1
a2326 1
	LSOF_VERS="1060"
d2329 1
a2329 1
	LSOF_VERS=1060
d2335 1
a2335 1
	LSOF_VERS="2000"
d2339 1
a2339 1
	LSOF_VERS="2999"
d2341 4
d2346 1
a2346 1
	LSOF_VERS=2000
d2352 2
a2353 2
	echo Assuming NetBSD 1.0
	LSOF_VERS="1000"
d2361 1
a2361 1
    1000|1010|1020|1030|1040|1050|1060|2000|2999)
d2381 1
a2381 1
    if test -r ${LSOF_INCLUDE}/nfs/nfsproto.h	# {
d2383 5
a2387 1
	LSOF_CFGF="$LSOF_CFGF -DHASNFSPROTO"
d2389 9
a2397 1
    if test -r ${LSOF_INCLUDE}/netinet/ip6.h	# {
d2399 45
d2445 31
d2477 2
a2478 2
    LSOF_TMP1=0
    if test "X$NETBSD_SYS" = "X"	# {
d2480 9
a2488 1
      NETBSD_SYS=$LSOF_INCLUDE
d2490 1
a2490 1
    if test -r ${NETBSD_SYS}/miscfs/fdesc/fdesc.h	# {
d2492 1
a2492 1
      grep -q Fctty ${NETBSD_SYS}/miscfs/fdesc/fdesc.h
d2499 1
a2499 1
      grep -q fd_link ${NETBSD_SYS}/miscfs/fdesc/fdesc.h
d2504 4
a2507 1
      LSOF_TMP1=1
d2509 2
a2510 1
    if test -r ${LSOF_INCLUDE}/sys/vnode.h	# {
d2512 4
a2515 2
      grep -q VT_LFS ${LSOF_INCLUDE}/sys/vnode.h
      if test $? -eq 0   # {
d2517 4
a2520 1
	LSOF_CFGF="$LSOF_CFGF -DHASLFS"
d2523 1
a2523 1
    if test -r ${LSOF_INCLUDE}/miscfs/nullfs/null.h	# {
d2526 1
a2526 2
    else
      if test -r ${NETBSD_SYS}/miscfs/nullfs/null.h	# {
a2527 1
	LSOF_CFGF="$LSOF_CFGF -DHASNULLFS"
d2531 2
a2532 1
    if test -d ${NETBSD_SYS}/miscfs/procfs	# {
d2534 13
d2548 1
a2548 3
      LSOF_TMP1=1
      grep -q PFSroot ${NETBSD_SYS}/miscfs/procfs/procfs.h
      if test $? -eq 0 #	{
d2550 10
a2559 2
	LSOF_CFGF="$LSOF_CFGF -DHASPROCFS_PFSROOT"
      fi #	}
d2561 3
a2563 1
    if test -d ${NETBSD_SYS}/isofs/cd9660	# {
d2565 27
d2593 4
a2596 1
      LSOF_TMP1=1
d2598 2
a2599 1
      if test -d ${NETBSD_SYS}/fs/cd9660	# {
d2601 10
a2610 2
        LSOF_CFGF="$LSOF_CFGF -DHAS9660FS=2"
        LSOF_TMP1=1
d2612 8
d2621 2
a2622 1
    if test -d ${NETBSD_SYS}/msdosfs	# {
d2624 13
d2638 4
a2641 1
      LSOF_TMP1=1
d2643 2
a2644 1
      if test -d ${NETBSD_SYS}/fs/msdosfs	# {
d2646 10
a2655 2
        LSOF_CFGF="$LSOF_CFGF -DHASMSDOSFS=2"
        LSOF_TMP1=1
d2657 8
d2666 2
a2667 1
    if test -r ${NETBSD_SYS}/miscfs/kernfs/kernfs.h	# {
d2669 14
a2682 1
      grep -q "kt_name;" ${NETBSD_SYS}/miscfs/kernfs/kernfs.h
d2686 5
a2690 2
	  LSOF_TMP1=1
	  grep -q "*kfs_kt;" ${NETBSD_SYS}/miscfs/kernfs/kernfs.h
d2697 2
a2698 1
    if test $LSOF_TMP1 -eq 1 -a "X$LSOF_INCLUDE" != "X$NETBSD_SYS"	# {
d2700 10
a2709 1
      LSOF_DINC="-I$LSOF_INCLUDE -I$NETBSD_SYS"
d2711 1
a2711 1
    if test -r ${LSOF_INCLUDE}/sys/namei.h
d2713 1
a2713 1
      grep -q nc_vpid ${LSOF_INCLUDE}/sys/namei.h
d2717 4
d2723 2
a2724 2
    grep -q i_ffs_size ${LSOF_INCLUDE}/ufs/ufs/inode.h
    if test $? -eq 0	# {
d2726 2
a2727 1
      LSOF_CFGF="$LSOF_CFGF -DHASI_FFS"
d2729 1
a2729 2
      grep -q i_ffs1_size ${LSOF_INCLUDE}/ufs/ufs/inode.h
      if test $? -eq 0	# {
d2731 5
a2735 2
	LSOF_CFGF="$LSOF_CFGF -DHASI_FFS1"
      fi	#}
d2737 1
a2737 2
    grep -q VT_EXT2FS ${LSOF_INCLUDE}/sys/vnode.h
    if test $? -eq 0	# {
d2739 1
a2739 2
      LSOF_CFGF="$LSOF_CFGF -DHASEXT2FS"
      grep -q "*e2fs_din" ${LSOF_INCLUDE}/ufs/ufs/inode.h
d2742 15
a2756 1
	LSOF_CFGF="$LSOF_CFGF -DHASI_E2FS_PTR"
d2758 9
d2768 3
a2770 1
    if test -r ${LSOF_INCLUDE}/nfs/nfsnode.h	# {
d2772 4
a2775 2
      grep -q "*n_vattr" ${LSOF_INCLUDE}/nfs/nfsnode.h
      if test $? -eq 0	# {
d2777 4
a2780 1
	LSOF_CFGF="$LSOF_CFGF -DHASNFSVATTRP"
d2783 1
a2783 1
    if test "X$NETBSD_UVM" = "X"	# {
d2785 2
a2786 1
      if test -r /etc/mk.conf	# {
d2788 2
a2789 2
	grep -q "^UVM[ 	]*=" /etc/mk.conf
	if test $? -eq 0	# {
d2791 1
a2791 1
	  NETBSD_UVM="Y"
d2793 26
d2820 2
a2821 1
      if test "X$NETBSD_UVM" = "X"	# {
d2823 2
a2824 1
	if test -r ${LSOF_INCLUDE}/sys/vnode.h	# {
d2826 12
a2837 2
	  grep -q UVM ${LSOF_INCLUDE}/sys/vnode.h
	  if test $? -ne 0	# {
d2839 1
a2839 2
	    egrep -q "v_uvm;|v_uobj;" ${LSOF_INCLUDE}/sys/vnode.h
	    if test $? -eq 0	# {
d2841 2
a2842 1
	      NETBSD_UVM="Y"
d2847 12
d2860 152
d3024 2
a3025 1
    if test -r ${LSOF_INCLUDE}/sys/mount.h	# {
d3027 11
d3039 1
a3039 1
      # Build the netexport.h header file for NetBSD.
d3081 1
a3081 1
      fi
d3083 1
a3083 1
    if test -r ${LSOF_INCLUDE}/sys/lockf.h	# {
d3085 4
a3088 2
      grep vop_advlock_args ${LSOF_INCLUDE}/sys/lockf.h > /dev/null
      if test $? -eq 0	# {
d3090 1
a3090 1
	LSOF_CFGF="$LSOF_CFGF -DHAS_ADVLOCK_ARGS"
d3092 1
a3092 2
      grep lf_lwp ${LSOF_INCLUDE}/sys/lockf.h > /dev/null
      if test $? -eq 0	# {
d3094 1
a3094 1
	LSOF_CFGF="$LSOF_CFGF -DHAS_LF_LWP"
d3096 3
a3098 9
    fi	# }
    if test -r ${LSOF_INCLUDE}/sys/lwp.h	# {
    then
      LSOF_CFGF="$LSOF_CFGF -DHAS_LWP_H"
    fi	# }
    if test -r ${LSOF_INCLUDE}/netinet/in.h	# {
    then
      grep IPV6_INRIA_VERSION ${LSOF_INCLUDE}/netinet/in.h > /dev/null
      if test $? -eq 0	# {
d3100 1
a3100 1
	LSOF_CFGF="$LSOF_CFGF -DHASIPv6 -DHASINRIAIPv6"
d3103 1
a3103 1
    if test -r ${LSOF_INCLUDE}/sys/filedesc.h	# {
d3105 4
a3108 2
      grep -q "^struct cwdinfo {" ${LSOF_INCLUDE}/sys/filedesc.h
      if test $? -eq 0	# {
d3110 1
a3110 1
	LSOF_CFGF="$LSOF_CFGF -DHASCWDINFO"
d3112 1
a3112 9
    fi	# }
    if test -r ${LSOF_INCLUDE}/sys/pipe.h	# {
    then
      LSOF_CFGF="$LSOF_CFGF -DHAS_SYS_PIPEH"
    fi	# }
    if test -r ${LSOF_INCLUDE}/sys/statvfs.h   # {
    then
      grep -q '^struct statvfs {' ${LSOF_INCLUDE}/sys/statvfs.h
      if test $? -eq 0	# {
d3114 1
a3114 1
	LSOF_CFGF="$LSOF_CFGF -DHASSTATVFS"
d3116 5
a3120 5
    fi	# }
    if test -r ${LSOF_INCLUDE}/kvm.h	# {
    then
      grep -q kvm_getproc2 ${LSOF_INCLUDE}/kvm.h
      if test $? -eq 0	# {
d3122 1
a3122 1
          LSOF_CFGF="$LSOF_CFGF -DHASKVMGETPROC2"
d3414 8
d4119 9
d4726 4
@


1.140
log
@Revision 4.72
@
text
@d17 1
a17 1
# $Id: Configure,v 1.139 2004/07/12 13:57:43 abe Exp abe $
d60 2
a61 1
#	$LSOF_AR	    archive command for making the lsof library
a121 1
LSOF_AR="ar cr \${LIB} \${OBJ}"
d591 4
a594 1
	LSOF_AR="/usr/bin/ar cr \${LIB} \${OBJ}"
d635 4
a638 1
	  LSOF_AR="/usr/bin/ar cr \${LIB} \${OBJ}"
d642 4
a645 1
	  LSOF_AR="/usr/bin/ar -X 64 -v -q \${LIB} \${OBJ}"
d756 6
a761 1
	  LSOF_CFGF="$LSOF_CFGF -qmaxmem=16384"
d763 1
a763 1
      fi	#}
d1389 4
d1398 9
d1498 1
a1498 1
    4000|4010|4020|4030|4040|4050|4060|4070|4080|4090|4100|5000|5010|5020)
d2299 4
d2319 1
a2319 1
    1000|1010|1020|1030|1040|1050|1060|2000)
d2620 4
a2623 1
    LSOF_AR="rm -f \${LIB}; $LSOF_AR"
d2761 4
d2767 1
a2767 1
	LSOF_VERS=3050
d2769 1
a2769 1
	echo "!!!WARNING!!!  Configuring for OpenBSD 3.3"
d2773 2
a2774 2
	echo Assuming OpenBSD 3.2
	LSOF_VERS=3020
d2782 1
a2782 1
    1020|2050|2060|2070|2080|2090|3000|3010|3020|3030|3040|3050)
d4121 5
a4125 2
  # Put optional archiver and randomizing strings in ${LSOF_LIB}/$LSOF_LIBMKF.
  # Add its skeleton section.
d4127 2
a4128 1
  if test "X$LSOF_AR" != "X"	# {
d4130 3
a4132 2
    echo "" >> ${LSOF_LIB}/$LSOF_LIBMKF
    echo "AR=	$LSOF_AR" >> ${LSOF_LIB}/$LSOF_LIBMKF
@


1.139
log
@Revision 4.72
@
text
@d17 1
a17 1
# $Id: Configure,v 1.138 2004/07/06 19:14:51 abe Exp abe $
d531 20
d2159 1
a2159 3
	echo "! KERNEL.  IT SHOULD USE A /DEV/KMEM-BASED LSOF.  IF YOU !"
	echo "! ARE UNCERTAIN ABOUT THE STATUS OF YOUR /PROC, CONTACT  !"
	echo "! ME FOR ADVICE.                                         !"
a2160 2
	echo "! Vic Abell <abe@@purdue.edu>                             !"
	echo "!                                                        !"
@


1.138
log
@Revision 4.72
@
text
@d17 1
a17 1
# $Id: Configure,v 1.137 2004/03/10 23:41:02 abe Exp abe $
d533 1
a533 1
    # Determine the AIX architectire type and set AIXA accordingly.
@


1.137
log
@Revision 4.71
@
text
@d17 1
a17 1
# $Id: Configure,v 1.136 2004/01/14 11:23:55 abe Exp abe $
d1257 1
a1257 1
	LSOF_VERS=100
d1260 1
a1260 1
	LSOF_VERS=200
d1263 1
a1263 1
	LSOF_VERS=205
d1266 1
a1266 1
	LSOF_VERS=210
d1269 1
a1269 1
	LSOF_VERS=220
d1272 1
a1272 1
	LSOF_VERS=300
d1275 1
a1275 1
	LSOF_VERS=310
d1278 1
a1278 1
	LSOF_VERS=320
d1281 1
a1281 1
	LSOF_VERS=330
d1284 1
a1284 1
	LSOF_VERS=340
d1287 1
a1287 1
	LSOF_VERS=350
d1290 1
a1290 1
	LSOF_VERS=350
d1296 1
a1296 1
	LSOF_VERS=400
d1298 1
a1298 1
      4.1*)
d1300 1
a1300 1
	LSOF_VERS=410
d1304 1
a1304 1
	LSOF_VERS=420
d1308 1
a1308 1
	LSOF_VERS=430
d1312 1
a1312 1
	LSOF_VERS=440
d1316 1
a1316 1
	LSOF_VERS=450
d1320 1
a1320 1
	LSOF_VERS=460
d1324 1
a1324 1
	LSOF_VERS=470
d1328 1
a1328 1
	LSOF_VERS=480
d1332 1
a1332 1
	LSOF_VERS=490
d1334 4
d1339 1
a1339 1
	LSOF_VERS=490
d1341 1
a1341 1
	echo "!!!WARNING!!!  Configuring for FreeBSD 4.9"
d1345 1
a1345 1
	LSOF_VERS=500
d1349 1
a1349 1
	LSOF_VERS=510
d1353 1
a1353 1
	LSOF_VERS=520
d1356 1
a1356 1
	LSOF_VERS=520
d1364 1
a1364 1
	LSOF_VERS=200
d1419 1
a1419 1
    100)
d1430 1
a1430 1
    200|205|210)
d1433 1
a1433 1
    220)
d1440 1
a1440 1
    300|310|320|330|340|350)
d1451 1
a1451 1
    400|410|420|430|440|450|460|470|480|490|500|510|520)
d1461 1
a1461 1
      if test $LSOF_VERS -ge 500	# {
d1486 27
d1522 1
a1522 1
    if test $LSOF_VERS -lt 200 -a "X$FREEBSD_KERNEL" = "X"	# {
d1557 1
a1557 1
      if test $LSOF_VERS -ge 500 -a -r ${LSOF_INCLUDE}/fs/fdescfs/fdesc.h  # {
d1580 1
a1580 1
    if test $LSOF_VERS -ge 500	# {
d1586 1
a1586 1
    if test $LSOF_VERS -lt 500	# {
d2252 9
d2272 1
a2272 1
    1000|1010|1020|1030|1040|1050|1060)
d2548 8
d2707 4
d2713 1
a2713 1
	LSOF_VERS=3030
d2728 1
a2728 1
    1020|2050|2060|2070|2080|2090|3000|3010|3020|3030|3040)
d3057 1
a3057 1
      LSOF_VSTR="`LANG=C_C.C uname -X 2>/dev/null | grep Release | sed 's/Release = \(.*\)/\1/'`"
d3557 7
@


1.136
log
@Revision 4.70
@
text
@d17 1
a17 1
# $Id: Configure,v 1.135 2003/10/15 20:30:22 abe Exp abe $
d897 11
a907 7
     530)
       LSOF_TMP1="hfs/hfs.h hfs/hfs_macos_defs.h hfs/rangelist.h miscfs/devfs/devfsdefs.h miscfs/devfs/devfs_proto.h miscfs/fdesc/fdesc.h net/ndrv.h net/ndrv_var.h"
       ;;
     600|700)
       LSOF_CFGF="$LSOF_CFGF -DHASIPv6"
       LSOF_TMP1="hfs/hfs.h hfs/hfs_catalog.h hfs/hfs_cnode.h hfs/hfs_macos_defs.h hfs/rangelist.h miscfs/devfs/devfsdefs.h miscfs/devfs/devfs_proto.h miscfs/fdesc/fdesc.h net/ndrv_var.h net/raw_cb.h netinet/ip_var.h netinet/tcp_var.h"
       ;;
d981 8
a1925 1
	  LSOF_TMP=/usr/contrib/bin/q4
d1928 6
d3492 4
d3735 1
a3735 1
    70000|70001|70100|70101|70103)
@


1.135
log
@Revision 4.69
NetBSD and OpenBSD changes.
@
text
@d17 1
a17 1
# $Id: Configure,v 1.134 2003/10/14 13:55:56 abe Exp abe $
d247 2
d1335 4
d1340 1
a1340 1
	LSOF_VERS=500
d1342 1
a1342 1
	echo "!!!WARNING!!!  Configuring for FreeBSD 5.0"
d1435 1
a1435 1
    400|410|420|430|440|450|460|470|480|490|500|510)
d2107 12
a2118 10
      echo "#include <features.h>" > $LSOF_TMPC.c
      echo "main(){" >> $LSOF_TMPC.c
      echo "#if defined(__GLIBC__) && defined(__GLIBC_MINOR__)" >> $LSOF_TMPC.c
      echo "printf(\"-DGLIBCV=%d\\n\",__GLIBC__*100+__GLIBC_MINOR__);" >> $LSOF_TMPC.c
      echo "#elif defined(__GLIBC__)" >> $LSOF_TMPC.c
      echo "printf(\"-DGLIBCV=%d00\\n\",__GLIBC__);" >> $LSOF_TMPC.c
      echo "#else" >> $LSOF_TMPC.c
      echo "printf(\"\\n\");" >> $LSOF_TMPC.c
      echo "#endif" >> $LSOF_TMPC.c
      echo "return(0); }" >> $LSOF_TMPC.c
d2264 8
d2638 4
d2644 1
a2644 1
	LSOF_VERS=3020
d2646 1
a2646 1
	echo "!!!WARNING!!!  Configuring for OpenBSD 3.2"
d2659 1
a2659 1
    1020|2050|2060|2070|2080|2090|3000|3010|3020|3030)
d2703 8
d2764 1
a2764 1
      LSOF_CFGF="$LSOF_CFGF -DHASEXT2FS"
d2770 6
d3458 15
@


1.134
log
@Revision 4.69
@
text
@d17 1
a17 1
# $Id: Configure,v 1.133 2003/10/13 14:07:07 abe Exp abe $
d2238 1
a2238 1
      NETBSD_SYS="/sys"
d2278 1
a2278 1
      LSOF_CFGF="$LSOF_CFGF -DHAS9660FS"
d2280 6
d2289 1
a2289 1
      LSOF_CFGF="$LSOF_CFGF -DHASMSDOSFS"
d2291 6
d2312 1
a2312 1
    if test $LSOF_TMP1 -eq 1	# {
d2700 1
a2700 1
      LSOF_CFGF="$LSOF_CFGF -DHAS9660FS"
d2702 6
d2711 1
a2711 1
      LSOF_CFGF="$LSOF_CFGF -DHASMSDOSFS"
d2713 6
d2729 1
a2729 1
    if test $LSOF_TMP1 -eq 1	# {
@


1.133
log
@Revision 4.69
@
text
@d17 1
a17 1
# $Id: Configure,v 1.132 2003/06/12 00:55:20 abe Exp abe $
d910 1
a910 1
    # Make sure XNU headers are present.
d912 8
d930 1
a930 1
    else
d932 2
a933 1
    # Get the Darwin XNU header path via the get-hdr-loc.sh script.
d935 4
a938 2
      LSOF_TMP2=`pwd`/dialects/darwin/get-hdr-loc.sh
      if test ! -x $LSOF_TMP2	# {
d940 16
a955 1
	echo "FATAL: can't execute: $LSOF_TMP2"
d959 2
a960 3
      DARWIN_XNUDIR=`$LSOF_TMP2 $LSOF_TMP1`
      LSOF_TMP3=$?
      if test $LSOF_TMP3 -ne 0	# {
d962 1
a962 1
	echo "FATAL: $LSOF_TMP2 returns: $DARWIN_XNUDIR"
a964 13
      fi	# {
    fi	# }
    LSOF_TMP2=""
    for i in $LSOF_TMP1	# {
    do
      if test ! -f ${DARWIN_XNUDIR}/$i	# {
      then
	if test "X$LSOF_TMP2" = "X"	# {
	then
	  LSOF_TMP2=$i
	else
	  LSOF_TMP2="$LSOF_TMP3 $i"
	fi	# }
a965 6
    done	# }
    if test "X$LSOF_TMP2" != "X"	# {
    then
      echo "FATAL: can't find these Darwin xnu headers: $LSOF_TMP2"
      rm -f $LSOF_HLP
      exit 1
d975 6
a980 3
    LSOF_DINC="$LSOF_DINC -I$DARWIN_XNUDIR -I/usr/include"
    LSOF_DINC="$LSOF_DINC -I/System/Library/Frameworks/System.framework/PrivateHeaders"
    LSOF_DINC="$LSOF_DINC -I/System/Library/Frameworks/Kernel.framework/Headers"
@


1.132
log
@Revision 4.68
Darwin addition.
@
text
@d17 1
a17 1
# $Id: Configure,v 1.131 2003/06/11 11:35:57 abe Exp abe $
a246 2
      rm -rf dialects/darwin/xnu
      echo "rm -rf dialects/darwin/xnu"
d820 1
a820 2
    grep -q nc_vpid ${LSOF_INCLUDE}/sys/namei.h
    if test $? -eq 0	# {
d822 5
a826 1
      LSOF_CFGF="$LSOF_CFGF -DHASNCVPID"
d875 3
d880 2
a881 2
	echo Assuming Darwin 5.5
	LSOF_VERS=530
d898 1
a898 1
     600)
d912 1
a912 1
    if test "X$DARWIN_SYSDIR" = "X"	# {
d914 27
a940 1
      DARWIN_SYSDIR=/System/Library/Frameworks
d942 1
a942 2
    LSOF_TMP2=0
    LSOF_TMP3=`pwd`/dialects/darwin/xnu/bsd
d945 1
a945 2
      if test ! -f ${DARWIN_SYSDIR}/System.framework/PrivateHeaders/$i \
		-a ! -f ${LSOF_TMP3}/$i	# {
d947 6
a952 1
	LSOF_TMP2=1
d955 1
a955 1
    if test $LSOF_TMP2 -eq 1	# {
d957 8
a964 3
      LSOF_TMP3=get-xnu-headers.sh
      LSOF_TMP4=`pwd`/dialects/darwin/$LSOF_TMP3
      if test ! -x $LSOF_TMP4	# {
d966 1
a966 3
	 echo "Can't execute: $LSOF_TMP4"
	 rm -f $LSOF_HLP
	 exit 1
a967 8
      $LSOF_TMP4 $LSOF_TMP1
      LSOF_TMP2=$?
      if test $LSOF_TMP2 -ne 0	# {
      then
	echo "$LSOF_TMP3 exit: $LSOF_TMP2"
	rm -f $LSOF_HLP
	exit 1
      fi	# }
d969 4
a972 6
    LSOF_DINC="$LSOF_DINC -I`pwd`/dialects/darwin/xnu/bsd"
    LSOF_DINC="$LSOF_DINC -I/usr/include"
    LSOF_DINC="$LSOF_DINC -I${DARWIN_SYSDIR}/System.framework/PrivateHeaders"
    LSOF_DINC="$LSOF_DINC -I${DARWIN_SYSDIR}/Kernel.framework/Headers"
    LSOF_CFGF="$LSOF_CFGF -DHAS9660FS"
    LSOF_CFGF="$LSOF_CFGF -DDARWINV=$LSOF_VERS"
d1204 8
d1307 4
d1312 1
a1312 1
	LSOF_VERS=480
d1314 1
a1314 1
	echo "!!!WARNING!!!  Configuring for FreeBSD 4.8"
d1420 1
a1420 1
    400|410|420|430|440|450|460|470|480|500|510)
d1567 1
a1567 2
    grep -q nc_vpid ${LSOF_INCLUDE}/sys/namei.h
    if test $? -eq 0	# {
d1569 5
a1573 1
      LSOF_CFGF="$LSOF_CFGF -DHASNCVPID"
d2261 5
d2284 5
d2295 1
a2295 2
    grep -q nc_vpid ${LSOF_INCLUDE}/sys/namei.h
    if test $? -eq 0	# {
d2297 5
a2301 1
      LSOF_CFGF="$LSOF_CFGF -DHASNCVPID"
d2454 8
d2710 1
a2710 2
    grep -q nc_vpid ${LSOF_INCLUDE}/sys/namei.h
    if test $? -eq 0	# {
d2712 5
a2716 1
      LSOF_CFGF="$LSOF_CFGF -DHASNCVPID"
d3119 5
d3194 1
a3194 1
    20600|70000|80000|90000)
d3374 1
a3374 1
	if test -r ${LSOF_INCLUDE}/netinet/ip6.h
d3377 15
a3391 1
	fi
@


1.131
log
@Revision 4.68
@
text
@d17 1
a17 1
# $Id: Configure,v 1.130 2003/03/23 19:27:46 abe Exp abe $
d247 2
a248 2
      rm -rf dialects/darwin/include
      echo "rm -rf dialects/darwin/include"
d913 1
a913 1
    LSOF_TMP3=`pwd`/dialects/darwin/include
d932 1
a932 1
      $LSOF_TMP4 $DARWIN_SYSDIR $LSOF_TMP1
d941 1
a941 1
    LSOF_DINC="$LSOF_DINC -I`pwd`/dialects/darwin/include"
@


1.130
log
@Revision 4.67
Add LWP tests to NetBSD stanza.
@
text
@d17 1
a17 1
# $Id: Configure,v 1.129 2003/03/23 14:00:14 abe Exp abe $
d55 2
a56 1
#	$AFS_VICE	    locate of AFS VICE directory (default = /usr/vice)
d58 1
d119 1
d175 1
a175 1
# Make sure the help file is removed before an abnormal exit.
d177 1
a177 1
trap 'rm -f $LSOF_HLP ${LSOF_TMPC_BASE}*; exit 1' 1 2 3 15
d236 1
a236 1
	echo '(cd ${LSOF_TSTSUBD); rm *.o config.*)'
d239 2
a240 2
      rm -f $LSOF_F $LSOF_HLP $LSOF_MKFC ${LSOF_TMPC_BASE}*
      echo rm -f $LSOF_F $LSOF_HLP $LSOF_MKFC ${LSOF_TMPC_BASE}*
d413 1
a413 1
    if test -r ${AFS_VICE}/etc/ThisCell	# {
d415 5
a419 1
      if test "X$LSOF_SCRIPT_CALL" = "Xno"	# {
d421 1
a421 1
	if test -r ./AFSHeaders -a -r ./AFSVersion	# {
d423 19
a441 1
	  LSOF_AFS="yes"
d443 1
a443 2
      else
	if test ! -x ./AFSConfig	# {
d445 1
a445 19
	  echo "Can't find or execute the AFSConfig script"
	  rm -f $LSOF_HLP
	  exit 1
	fi	# }
	./AFSConfig
	if test $? -eq 0 -a -r ./AFSHeaders -a -r ./AFSVersion	# {
	then
	    LSOF_AFS="yes"
	fi	# }
      fi	# }
      if test "X$LSOF_AFS" = "Xyes"	# {
      then
	LSOF_AFSV=`cat ./AFSVersion | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1 \2/' | awk '{printf "%d%02d\n",\$1,\$2}'`
	LSOF_CFGF="$LSOF_CFGF -DHAS_AFS=$LSOF_AFSV"
	LSOF_DINC="$LSOF_DINC -I`cat ./AFSHeaders`"
	if test -r ${LSOF_INCLUDE}/sys/inttypes.h  # {
	then
	  grep "^typedef.*int16;" ${LSOF_INCLUDE}/sys/inttypes.h > /dev/null
	  if test $? -eq 0      # {
d447 11
a457 4
	    LSOF_CFGF="$LSOF_CFGF -DHASINT16TYPE"
	  fi    # }
	  grep "^typedef.*u_int32;" ${LSOF_INCLUDE}/sys/inttypes.h > /dev/null
	  if test $? -eq 0      # {
d459 29
a487 8
	    LSOF_CFGF="$LSOF_CFGF -DHASUINT16TYPE"
	  fi    # }
	  grep "^typedef.*int32;" ${LSOF_INCLUDE}/sys/inttypes.h > /dev/null
	  if test $? -eq 0      # {
	  then
	    LSOF_CFGF="$LSOF_CFGF -DHASINT32TYPE"
	  fi    # }
	fi      # }
d537 1
a537 1
        uname -a | grep -i ia64 > /dev/null
d555 2
a556 2
        # Quit if gcc was specified as the compiler, since the gcc options to
        # do an ia64 lsof compilation unknown.
d572 2
a573 2
        LSOF_CFGF="$LSOF_CFGF -q64"
        LSOF_CFGL="$LSOF_CFGL -lelf"
d599 1
a599 1
	    echo "FATAL: can't compile test program, ${LSOF_TMPC}.c."
d622 1
a622 1
            LSOF_CFGF="$LSOF_CFGF -maix64"
d624 1
a624 1
            LSOF_CFGF="$LSOF_CFGF -q64"
d628 1
a628 1
	  echo "FATAL: unrecognized kernel bit size: $AIX_KERNBITS"
d648 1
a648 1
        LSOF_TSTDFLG="-DLT_AIXA=$LSOF_TMP1"
d650 1
a650 1
        LSOF_TSTDFLG="$LSOF_TSTDFLG -DLT_AIXA=$LSOF_TMP1"
d659 1
a659 1
        LSOF_TSTDFLG="-DLT_AIXA=0"
d661 1
a661 1
        LSOF_TSTDFLG="$LSOF_TSTDFLG -DLT_AIXA=0"
d812 1
a812 1
        LSOF_CFGF="$LSOF_CFGF -DHASFDESCFS=1"
d814 1
a814 1
        LSOF_CFGF="$LSOF_CFGF -DHASFDESCFS=2"
d819 1
a819 1
        LSOF_CFGF="$LSOF_CFGF -DHASFDLINK"
d1282 4
d1382 1
a1382 1
    400|410|420|430|440|450|460|470|480|500)
d1408 4
a1411 4
		echo "FATAL: lsof cannot locate the devfs.h header file"
		echo "       in ${LSOF_INCLUDE}/fs/devfs/devfs.h or"
		echo "       ${FREEBSD_SYS}/fs/devfs/devfs.h.  Consult"
		echo "       00FAQ for an explanation."
d1473 1
a1473 1
        LSOF_CFGF="$LSOF_CFGF -DHASFDESCFS=1"
d1475 1
a1475 1
        LSOF_CFGF="$LSOF_CFGF -DHASFDESCFS=2"
d1480 1
a1480 1
        LSOF_CFGF="$LSOF_CFGF -DHASFDLINK"
d1494 2
a1495 2
        LSOF_CFGF="$LSOF_CFGF -DHASPROCFS"
        LSOF_DINC_ADD=1
d1500 2
a1501 2
        LSOF_CFGF="$LSOF_CFGF -DHASPSEUDOFS"
        LSOF_DINC_ADD=1
d1510 1
a1510 1
        LSOF_CFGF="$LSOF_CFGF -DHASNULLFS"
d1540 1
a1540 1
        LSOF_DINC="$LSOF_DINC -I${LSOF_INCLUDE} -I$FREEBSD_SYS"
d1675 3
a1677 3
        echo $LSOF_CC | grep -q gcc
        if test $? -ne 0	# {
        then
d1679 1
a1679 1
        fi	# }
d2195 1
a2195 1
        LSOF_CFGF="$LSOF_CFGF -DHASFDESCFS=1"
d2197 1
a2197 1
        LSOF_CFGF="$LSOF_CFGF -DHASFDESCFS=2"
d2202 1
a2202 1
        LSOF_CFGF="$LSOF_CFGF -DHASFDLINK"
d2212 1
a2212 1
        LSOF_CFGF="$LSOF_CFGF -DHASNULLFS"
d2253 6
d2264 1
a2264 1
      grep -q i_e2fs_size ${LSOF_INCLUDE}/ufs/ufs/inode.h
d2267 1
a2267 1
	LSOF_CFGF="$LSOF_CFGF -DHASI_E2FS"
d2313 1
a2313 1
        LSOF_CFGF="$LSOF_CFGF -DHAS_UVM_INCL"
d2319 1
a2319 1
      # Build the netexport.h header file for NetBSD from <sys/mount.h>.
d2327 1
a2327 1
        mkdir dialects/n+obsd/include
d2494 1
a2494 1
      1.2*)
d2496 2
a2498 15
      2.0*)
	LSOF_VERS=2000
	;;
      2.1*)
	LSOF_VERS=2010
	;;
      2.2*)
	LSOF_VERS=2020
	;;
      2.3*)
	LSOF_VERS=2030
	;;
      2.4*)
	LSOF_VERS=2040
	;;
d2506 1
a2506 1
        LSOF_TSTBIGF=" "
d2510 1
a2510 1
        LSOF_TSTBIGF=" "
d2514 1
a2514 1
        LSOF_TSTBIGF=" "
d2517 6
d2524 1
a2524 1
        LSOF_TSTBIGF=" "
d2528 1
a2528 1
        LSOF_TSTBIGF=" "
d2532 1
a2532 1
        LSOF_TSTBIGF=" "
d2535 4
d2540 4
a2543 3
	LSOF_VERS=3010
	echo "!!!WARNING!!!  Unsupported OpenBSD version: $LSOF_VSTR"
	echo "!!!WARNING!!!  Configuring for OpenBSD 3.1"
d2547 2
a2548 2
	echo Assuming OpenBSD 1.2
	LSOF_VERS=1020
d2556 1
a2556 1
    1020|2000|2010|2020|2030|2040|2050|2060|2070|2080|2090|3000|3010|3020)
d2589 1
a2589 1
        LSOF_CFGF="$LSOF_CFGF -DHASFDESCFS=1"
d2591 1
a2591 1
        LSOF_CFGF="$LSOF_CFGF -DHASFDESCFS=2"
d2596 1
a2596 1
        LSOF_CFGF="$LSOF_CFGF -DHASFDLINK"
d2606 1
a2606 1
        LSOF_CFGF="$LSOF_CFGF -DHASNULLFS"
d2642 5
d2673 1
a2673 1
        LSOF_CFGF="$LSOF_CFGF -DHAS_UVM_INCL"
d2676 1
a2676 1
    if test -r ${LSOF_INCLUDE}/sys/mount.h	# {
d2687 1
a2687 1
        mkdir dialects/n+obsd/include
d2776 2
a2777 2
        LSOF_CFGL="-lsocket -lnsl -lelf -lgen"
        LSOF_DINC="$LSOF_DINC -I`pwd`/dialects/ou/ou8"
d2782 1
a2782 1
        LSOF_CFGL="-lsocket -lnsl -lelf -lgen -lcdfs"
d2841 1
a2841 1
        LSOF_TMP1=1
d2897 2
a2898 2
        LSOF_CFGF="$LSOF_CFGF -nointl"
        LSOF_DEBUG="-Ox"
d2906 1
a2906 1
        LSOF_DEBUG="-Ox"
d2914 2
a2915 2
        LSOF_CFGF="$LSOF_CFGF -nointl"
        LSOF_DEBUG="-Ox"
d2923 2
a2924 2
        LSOF_CFGF="$LSOF_CFGF -nointl"
        LSOF_DEBUG="-Ox"
d2931 2
a2932 2
        LSOF_CFGF="$LSOF_CFGF -nointl"
        LSOF_DEBUG="-Ox"
d2939 2
a2940 2
        LSOF_CFGF="$LSOF_CFGF -nointl"
        LSOF_DEBUG="-Ox"
d2947 2
a2948 2
        LSOF_CFGF="$LSOF_CFGF -belf"
        LSOF_DEBUG="-O3 -Kspace"
d3436 1
a3436 1
	echo "FATAL ERROR!!! no $LSOF_TMP3"
d3458 1
a3458 1
        LSOF_CFGF="$LSOF_CFGF -DHASVXFS"
d3463 2
a3464 2
        if test -r ${SOLARIS_VXFSINCL}/sys/fs/vx_fs.h	# {
        then
d3466 3
a3468 3
        fi	# }
        if test -r ${SOLARIS_VXFSINCL}/sys/fs/vx_sol.h	# {
        then
d3470 3
a3472 3
        fi	# }
        if test -r ${SOLARIS_VXFSINCL}/sys/fs/vx_machdep.h	# {
        then
d3474 3
a3476 3
        fi	# }
        if test -r ${SOLARIS_VXFSINCL}/sys/fs/vx_solaris.h	# {
        then
d3493 4
a3496 4
        fi	# }
        egrep "struct[ 	]vx_inode[ 	]\{" ${SOLARIS_VXFSINCL}/sys/fs/vx_inode.h > /dev/null
        if test $? -eq 0	# {
        then
d3498 1
a3498 1
        fi	# }
d3553 1
a3553 1
        LSOF_DINC="$LSOF_DINC -I`pwd`/dialects/uw/uw7"
d3604 1
a3604 1
        # Do UnixWare 7.1.1 and above tests, as required.
@


1.129
log
@Revision 4.67
Set proper flags for HP-UX 11.11 ANSIC compiler.
@
text
@d17 1
a17 1
# $Id: Configure,v 1.128 2003/03/21 17:38:32 abe Exp abe $
d2326 9
@


1.128
log
@Revision 4.67
Update AIX, FreeBSD, and HP-UX stanzas.
@
text
@d17 1
a17 1
# $Id: Configure,v 1.127 2002/12/20 14:28:34 abe Exp abe $
d1635 1
a1635 1
	LSOF_CFGF="$LSOF_CFGF -Ae"
@


1.127
log
@Revision 4.66
@
text
@d17 1
a17 1
# $Id: Configure,v 1.126 2002/12/05 12:19:44 abe Exp abe $
d339 2
a340 2
      LSOF_TMP1=/usr/bin/oslevel
      if test -x $LSOF_TMP1	# {
d342 6
a347 4
	echo "Determining AIX version with $LSOF_TMP1."
	echo "This may take a while, depending on your maintenance level."
	LSOF_VSTR=`$LSOF_TMP1 | sed 's/[^0-9]*\([0-9\.]*\).*/\1/'`
	echo "$LSOF_TMP1 reports the version is $LSOF_VSTR."
d349 20
a368 4
	LSOF_VSTR=`uname -rv | awk '{printf "%d.%d.0.0\n",\$2,\$1}'`
	echo "WARNING: can't execute $LSOF_TMP1; uname -rv reports"
	echo "         the version is $LSOF_VSTR; edit CFGF in Makefile and"
	echo "         lib/Makefile to refine AIXV and LSOF_VSTR."
d487 1
a487 2
    # Do AIX 5L and above actions.  Some depend on the architecture, so
    # establish it first.  Set AIXA accordingly.
d489 12
a539 7
	if test ! -r ${LSOF_INCLUDE}/j2/j2_lock.h	# {
	then

        # Set path to private (hacked) j2_lock.h.

	  LSOF_CFGF="$LSOF_CFGF -I`pwd`/dialects/aix/aix5l"
        fi	# }
d559 1
a559 2
	  echo 'else printf("%#x\\n", _system_configuration.kernel);' \
	       >> ${LSOF_TMPC}.c
d1235 4
d1240 1
a1240 1
	LSOF_VERS=470
d1242 1
a1242 1
	echo "!!!WARNING!!!  Configuring for FreeBSD 4.7"
d1344 1
a1344 1
    400|410|420|430|440|450|460|470|500)
d1636 6
a1642 1
	LSOF_CFGF="$LSOF_CFGF +DD32"
@


1.126
log
@Revision 4.66
@
text
@d17 1
a17 1
# $Id: Configure,v 1.125 2002/10/10 11:20:52 abe Exp abe $
d1093 1
a1093 1
	LSOF_TMP1="-std0"
@


1.125
log
@Revision 4.65
@
text
@d17 1
a17 1
# $Id: Configure,v 1.124 2002/06/17 20:03:21 abe Exp abe $
d492 2
a493 2
        # Quit if gcc was specified as the compiler, since the gcc option to
        # affect a compilation option is not known.
d1087 2
a1088 2
    # Make du5_sys_malloc.h for DU 5.0 and above.  Enable strict ANSI checking.
    # Enable IPv6 handling.
d1090 14
a1103 1
      LSOF_CFGF="$LSOF_CFGF -std1"
d2455 4
d2475 1
a2475 1
    1020|2000|2010|2020|2030|2040|2050|2060|2070|2080|2090|3000|3010)
@


1.124
log
@Revision 4.64
Make another OpenUNIX 8.0.1 adjustment.
@
text
@d9 2
a10 3
# for Linux 2.3 on a machine running 2.4.  Marty Leisner
# <leisner@@sdsp.mc.xerox.com> suggested this support and provided the Linux
# Configure stanza modifications.
d17 1
a17 1
# $Id: Configure,v 1.123 2002/06/17 01:37:30 abe Exp abe $
d201 1
a201 1
    unixware|uw             : SCO UnixWare
d470 1
a470 1
    # establish it first.  Se AIXA accordingly.
d522 5
d545 1
a545 1
	    rm -f $LSOF_HLP
d734 2
a735 2
	echo Assuming BSDI 4.1
	LSOF_VERS=40100
d810 9
d821 2
a822 2
	echo Assuming Darwin 1.4
	LSOF_VERS=140
d833 1
a833 1
    140)
d836 7
d849 1
a849 1
    LSOF_CFGL=""
d886 1
a889 1
    LSOF_DINC="$LSOF_DINC -I`pwd`/dialects/darwin/include"
d1197 4
d1202 1
a1202 1
	LSOF_VERS=460
d1204 1
a1204 1
	echo "!!!WARNING!!!  Configuring for FreeBSD 4.6"
d1306 1
a1306 1
    400|410|420|430|440|450|460|500)
d3412 1
a3412 1
# Configure for SCO UnixWare.
d3445 1
a3445 1
    70000|70001|70100|70101)
d3448 12
a3459 1
      LSOF_DINC="$LSOF_DINC -I`pwd`/dialects/uw/uw7"
@


1.123
log
@Revision 4.64
@
text
@d18 1
a18 1
# $Id: Configure,v 1.122 2002/04/29 17:09:16 abe Exp abe $
d2646 4
d2651 5
a2660 1
      LSOF_CFGL="-lsocket -lnsl -lelf -lgen"
@


1.122
log
@Revision 4.64
Enable LTbigf on HP-UX 10.20.
@
text
@d18 1
a18 1
# $Id: Configure,v 1.121 2002/04/19 20:52:30 abe Exp abe $
d1173 4
d1178 1
a1178 1
	LSOF_VERS=450
d1180 1
a1180 1
	echo "!!!WARNING!!!  Configuring for FreeBSD 4.5"
d1213 1
a1213 1
      LSOF_CFGF=`grep ^CFLAGS= /etc/make.conf | sed 's/CFLAGS=[	 ]*\(.*\)/\1/'`
d1224 1
a1224 1
	  LSOF_CFGF=`echo $LSOF_CFGF | sed 's/\(.*\)-O[^ $]*\(.*\)/\1 \2/' | sed 's/^  *//g' | sed 's/   */ /g' | sed 's/  *$//`
d1282 1
a1282 1
    400|410|420|430|440|450|500)
d1320 1
a1320 1
      echo "Unknown FreeBSD version: $LSOF_VERS"
d1404 10
d1436 6
a1441 1
      LSOF_DINC="$LSOF_DINC -I${LSOF_INCLUDE} -I$FREEBSD_SYS"
d2032 4
d2037 1
a2037 1
	LSOF_VERS=1050
d2039 1
a2039 1
	echo "!!!WARNING!!!  Configuring for NetBSD 1.5"
d2052 1
a2052 1
    1000|1010|1020|1030|1040|1050)
d2101 10
d2419 1
a2419 1
	LSOF_VERS=3000
d2421 1
a2421 1
	echo "!!!WARNING!!!  Configuring for OpenBSD 3.0"
d2478 10
d2643 5
a2647 2
    80000)
      LSOF_DINC="$LSOF_DINC -I`pwd`/dialects/ou/ou8"
@


1.121
log
@Revision 4.63
@
text
@d18 1
a18 1
# $Id: Configure,v 1.120 2002/04/19 12:05:53 abe Exp abe $
d1456 1
a1456 1
    if test $LSOF_VERS -ge 1100	# {
@


1.120
log
@Revision 4.63
@
text
@d18 1
a18 1
# $Id: Configure,v 1.119 2002/03/20 21:01:52 abe Exp abe $
d2243 4
d2560 4
@


1.119
log
@Revision 4.63
@
text
@d18 1
a18 1
# $Id: Configure,v 1.118 2002/03/06 18:47:48 abe Exp abe $
d89 1
d97 11
d153 11
d229 8
d358 4
d488 1
d558 1
d587 6
d598 6
d717 1
d721 1
d725 1
d879 3
d907 1
d1150 1
d1154 1
d1158 1
d1162 1
d1166 1
d1170 1
d1179 1
d1456 4
d1549 2
d1612 1
d1686 1
d1884 2
d2010 1
d2250 2
d2362 1
d2366 1
d2370 1
d2374 1
d2377 4
d2397 1
a2397 1
    1020|2000|2010|2020|2030|2040|2050|2060|2070|2080|2090|3000)
d2564 3
d2661 1
d2691 1
d2847 1
d2851 2
d2856 2
d2861 2
d2999 1
d3329 1
d3360 2
d3521 3
a3523 2
rm -f $LSOF_F $LSOF_MKFC
echo rm -f $LSOF_F $LSOF_MKFC
d3647 55
@


1.118
log
@Revision 4.62
@
text
@d18 1
a18 1
# $Id: Configure,v 1.117 2002/03/05 13:28:55 abe Exp abe $
d1494 4
d1634 1
a1634 1
	      nm -x /stand/vmunix | grep -q nfs_vnodeops3
d1670 2
a1671 2
	      echo "Looking for ipis_s with $LSOF_TMP ... \c"
	      echo "yes\\nfields -c struct ipis_s" | $LSOF_TMP /stand/vmunix > ${LSOF_TMPC}.out 2>&1
@


1.117
log
@Revision 4.62
@
text
@d18 1
a18 1
# $Id: Configure,v 1.116 2002/02/26 15:12:53 abe Exp abe $
d451 1
a451 1
      # This is AIX > 5 on ia64.
d485 1
a485 1
      # This is AIX 5L or 5.1 on Power architecture.
@


1.116
log
@Revision 4.62
@
text
@d18 1
a18 1
# $Id: Configure,v 1.115 2002/01/22 12:41:28 abe Exp abe $
d1485 1
a1485 1
	LSOF_CFGF="$LSOF_CFGF -Ae +DD32"
d1487 1
@


1.115
log
@Revision 4.61
More AIX >=5 changes.
@
text
@d18 1
a18 1
# $Id: Configure,v 1.114 2002/01/18 20:55:45 abe Exp abe $
d670 2
a671 4
      4*)
	LSOF_VERS=40100
	echo "!!!WARNING!!!  Unsupported BSDI version: $LSOF_VSTR"
	echo "!!!WARNING!!!  Configuring for BSDI 4.1"
d673 3
d677 3
a679 3
	echo "Unknown BSDI release: $LSOF_VSTR"
	echo Assuming BSDI 2.0
	LSOF_VERS=20000
d687 1
a687 1
    20000|20100|30000|30100|40000|40100)
d888 1
d1959 11
d2164 1
a2164 2
    LSOF_CFGF="$LSOF_CFGF -DN_UNIXV=/netbsd"
    LSOF_CFGL="-lkvm"
d2316 7
a2322 1
    LSOF_CFGF="-DOPENBSDV=$LSOF_VERS -DN_UNIXV=/bsd"
@


1.114
log
@Revision 4.61
@
text
@d18 1
a18 1
# $Id: Configure,v 1.113 2002/01/14 15:53:06 abe Exp abe $
d292 1
a292 1
  # AIXA stands for AIX architecure.  It is assigned these values in this
d451 1
a451 2
      # This is AIX > 5 on ia64.  Set ia64 compile and load options.
      # Test for j2_lock.h.
d453 19
d473 1
d478 3
d485 1
a485 3
      # This is AIX 5L or 5.1 on power.  Determine the kernel bit size
      # by compiling and executing a test program.  Put the bit size
      # result in $LSOF_CINFO.  Use it to update AIXA.
d489 4
d511 4
d517 1
d521 1
a521 4

        # This is AIX >= 5.0 on a power 64 bit kernel.  Set the appropriate
	# compilation and archiving options.

d523 7
a529 2
          LSOF_CFGF="$LSOF_CFGF -q64"
	  LSOF_AR="ar -X 64 -v -q \${LIB} \${OBJ}"
d536 3
@


1.113
log
@Revision 4.61
@
text
@d18 1
a18 1
# $Id: Configure,v 1.112 2001/11/07 15:43:04 abe Exp abe $
d291 12
d436 1
a436 1
    # establish it first.
a449 7
	LSOF_TMP1=1
      else
	LSOF_TMP1=0
      fi	# }
      LSOF_CFGF="$LSOF_CFGF -DAIXA=$LSOF_TMP1"
      if test $LSOF_TMP1 -eq 1	# {
      then
d451 1
a451 1
      # This is AIX 5L or 5.1 on ia64.  Set ia64 compile and load options.
d454 1
d461 53
d515 1
d517 3
@


1.112
log
@Revision 4.60
@
text
@d18 1
a18 1
# $Id: Configure,v 1.111 2001/10/19 17:17:17 abe Exp abe $
d1009 3
d1013 1
a1013 1
	LSOF_VERS=410
d1015 1
a1015 1
	echo "!!!WARNING!!!  Configuring for FreeBSD 4.1"
d1116 1
a1116 1
    400|410|420|430|440|500)
d1224 13
a1236 4
    if test -d ${FREEBSD_SYS}/${LSOF_TMP1}/procfs	# {
    then
      LSOF_CFGF="$LSOF_CFGF -DHASPROCFS"
      LSOF_DINC_ADD=1
d1353 6
d1796 1
d1899 5
d1962 1
a1962 1
	    grep -q "v_uvm;" ${LSOF_INCLUDE}/sys/vnode.h
a1965 6
	    else
	      grep -q "v_uobj;" ${LSOF_INCLUDE}/sys/vnode.h
	      if test $? -eq 0  # {
	      then
		NETBSD_UVM="Y"
	      fi # }
d2247 5
d2277 1
a2277 2
      nm /bsd | grep -q 'B _uvm$'
      if test $? -eq 0	# {
d2279 9
a2287 1
	OPENBSD_UVM="Y"
d2482 1
a2482 1
      3.2v5.0.*)
d2486 1
a2486 1
	echo Unknown SCO OpenServer release: `uname -X | grep Release`
@


1.111
log
@Revision 4.59
@
text
@d18 1
a18 1
# $Id: Configure,v 1.110 2001/10/15 12:13:42 abe Exp abe $
d84 1
a84 3
#	$LSOF_LOCALSUFFIX   local suffix for Makefile -- e.g., PUCC for
#			    Purdue University Computing Center's special
#			    Makefile
a1289 2
	LSOF_CCV=`$LSOF_CC -v 2>&1 | sed -n 's/.*version \(.*\)/\1/p'`
	LSOF_CFGF="-DHAS_CONST"
d1336 6
a1420 17
	    echo $LSOF_CC | grep gcc > /dev/null
	    if test $? -eq 0	# {
	    then
	      echo ""
	      echo "****************************************************"
	      echo "*                                                  *"
	      echo "* !!!!!!!!!!!!!!!!! FATAL ERROR !!!!!!!!!!!!!!!!!! *"
	      echo "*                                                  *"
	      echo "* NO KNOWN VERSION OF GCC IS CAPABLE OF BUILDING   *"
	      echo "* A 64 BIT LSOF BINARY FOR HP-UX 11.  YOU MUST USE *"
	      echo "* AN HP COMPILER.                                  *"
	      echo "*                                                  *"
	      echo "****************************************************"
	      echo ""
	      rm -f $LSOF_HLP
	      exit 1
	    fi	# }
d1427 66
a1492 4
	    echo ""
	    LSOF_CFGF="$LSOF_CFGF +DD64"
	    LSOF_CFGL="$LSOF_CFGL -lelf"
	    LSOF_CINFO="${LSOF_CINFO}, 64 bit HP-UX"
d1495 5
d1547 1
d2162 5
a2166 2
      2*)
	LSOF_VERS=2080
d2168 1
a2168 1
	echo "!!!WARNING!!!  Configuring for OpenBSD 2.8"
d2181 1
a2181 1
    1020|2000|2010|2020|2030|2040|2050|2060|2070|2080|2090)
d2801 1
a2801 1
	      echo "! 32 BIT echo KERNEL.                                   !"
d3071 1
a3071 1
    # Set PUCC-specific stuff.
d3073 1
a3073 1
    if test "X$LSOF_LOCALSUFFIX" = "XPUCC"	# {
@


1.110
log
@Revision 4.59
@
text
@d18 1
a18 1
# $Id: Configure,v 1.109 2001/09/28 01:13:05 abe Exp abe $
d2306 4
d2337 15
d2413 1
a2413 1
        LSOF_CFGF="-nointl"
d2416 1
a2416 1
      LSOF_CFGL="-lrpc -lsocket -lc_s"
d2424 1
a2424 1
      LSOF_CFGL="-lrpc -lsocket -lc_s"
d2430 1
a2430 1
        LSOF_CFGF="-nointl"
d2433 1
a2433 1
      LSOF_CFGL="-lrpc -lsocket -lc_s"
d2439 1
a2439 1
        LSOF_CFGF="-nointl"
d2442 1
a2442 1
      LSOF_CFGL="-lrpc -lsocket -lc_s"
d2447 1
a2447 1
        LSOF_CFGF="-nointl"
d2450 1
a2450 1
      LSOF_CFGL="-lrpc -lsocket -lc_s"
d2455 1
a2455 1
        LSOF_CFGF="-nointl"
d2458 1
a2458 1
      LSOF_CFGL="-lrpc -lsocket -lc_s"
d2463 1
a2463 1
        LSOF_CFGF="-belf"
d2466 1
a2466 1
      LSOF_CFGL="-lsocket"
d2474 1
a2474 1
    LSOF_CFGF="-DOSRV=$LSOF_VERS $LSOF_CFGF"
@


1.109
log
@Revision 4.59
Delete PTX support.
@
text
@d18 1
a18 1
# $Id: Configure,v 1.108 2001/09/11 18:22:15 abe Exp abe $
d176 1
d649 1
a649 1
      1.2)
d652 1
a652 1
      1.3)
d655 3
d660 2
a661 2
	echo Assuming Darwin 1.3
	LSOF_VERS=130
a669 4
      LSOF_CFGL=""

      # Make sure XNU headers are present.

a670 37
      if test "X$DARWIN_SYSDIR" = "X"	# {
      then
	DARWIN_SYSDIR=/System/Library/Frameworks
      fi	# }
      LSOF_TMP2=0
      LSOF_TMP3=`pwd`/dialects/darwin/include
      for i in $LSOF_TMP1	# {
      do
	if test ! -f ${DARWIN_SYSDIR}/System.framework/PrivateHeaders/$i \
		  -a ! -f ${LSOF_TMP3}/$i	# {
	then
	    LSOF_TMP2=1
	fi	# }
      done	# }
      if test $LSOF_TMP2 -eq 1	# {
      then
	LSOF_TMP3=get-xnu-headers.sh
	LSOF_TMP4=`pwd`/dialects/darwin/$LSOF_TMP3
	if test ! -x $LSOF_TMP4	# {
	then
	    echo "Can't execute: $LSOF_TMP4"
	    rm -f $LSOF_HLP
	    exit 1
	fi	# }
	$LSOF_TMP4 $DARWIN_SYSDIR $LSOF_TMP1
	LSOF_TMP2=$?
	if test $LSOF_TMP2 -ne 0	# {
	then
	  echo "$LSOF_TMP3 exit: $LSOF_TMP2"
	  rm -f $LSOF_HLP
	  exit 1
	fi	# }
      fi	# }
      LSOF_DINC="$LSOF_DINC -I/usr/include"
      LSOF_DINC="$LSOF_DINC -I${DARWIN_SYSDIR}/System.framework/PrivateHeaders"
      LSOF_DINC="$LSOF_DINC -I${DARWIN_SYSDIR}/Kernel.framework/Headers"
      LSOF_DINC="$LSOF_DINC -I`pwd`/dialects/darwin/include"
d672 3
d681 1
d683 39
d1889 6
d2269 57
@


1.108
log
@Revision 4.58
@
text
@d18 1
a18 1
# $Id: Configure,v 1.107 2001/08/09 11:39:23 abe Exp abe $
a177 1
    ptx                     : Sequent PTX
a2256 104
    ;;

# Configure for Sequent PTX.

  ptx)
    LSOF_RANLIB=""
    if test "X$LSOF_VSTR" = "X"	# {
    then
      LSOF_VSTR=`uname -v`
    fi	# }
    if test "X$LSOF_VERS" = "X"	# {
    then

      # If the PTX version isn't predefined, determine it.

      LSOF_VERS=`echo $LSOF_VSTR | awk -F. '{printf "%d%d%d",substr($1,2), $2, $3}'`
    fi	# }
    if test $LSOF_VERS -ge 400	# {
    then

    # PTX 4.x tests

      if test "X$PTX_CONF" = "X"	# {
      then
	PTX_CONF="/usr/conf/uts"
      fi	# }
      if test $LSOF_VERS -lt 410	# {
      then
	LSOF_CFGL="-lrpc -lelf -linet -lnsl -lseq"
      else
	if test $LSOF_VERS -lt 423	# {
	then
	  LSOF_CFGL="-lrpc -lelf -lnsl -lseq -lsocket"
	else
	  LSOF_CFGL="-lelf -lnsl -lseq -lsocket"
	fi	# }
      fi	# }
      if test -r ${PTX_CONF}/nfs/rnode.h	# {
      then
	LSOF_CFGF="-DHAS_NFS"
      fi	# }

      # PTX 4.x TCP version tests.

      if test "X$PTX_TCPV" = "X"	# {
      then
	if test "X$PTX_TCP_NAME" = "X"	# {
	then
	  PTX_TCP_NAME="/usr/options/tcp/tcp.name"
	fi	# }
	if test -r $PTX_TCP_NAME	# {
	then
	  PTX_TCPV=`cat ${PTX_TCP_NAME} | awk '{print $2}' | awk -F. '{printf "%d%d%d",substr($1,2), $2, $3}'`
	fi	# }
      fi	# }
    else

    # PTX 2.x tests

      if test -r ${LSOF_INCLUDE}/nfs/rnode.h	# {
      then
	LSOF_CFGF="-DHAS_NFS"
      fi	# }
      LSOF_CFGL="-lrpc -linet -lnsl -lseq"
    fi	# }

    # Guarantee a TCP version, even if it's zero.  Add the PTX and TCP
    # versions to the Makefile's configuration flags.

    if test "X$PTX_TCPV" = "X"	# {
    then
      PTX_TCPV="0"
    fi	# }
    LSOF_CFGF="-DPTXV=$LSOF_VERS -DTCPV=$PTX_TCPV $LSOF_CFGF"

    # Check for PTX CDROM node header file.

    if test -r ${LSOF_INCLUDE}/sys/cdfsinode.h	# {
    then
	LSOF_CFGF="$LSOF_CFGF -DHAS_CDFS"
    fi	# }

    # Check for PTX inp_addr structure.

    if test -r ${LSOF_INCLUDE}/netinet/in_pcb.h	# {
    then
      grep "inp_laddr;" ${LSOF_INCLUDE}/netinet/in_pcb.h | grep struct > /dev/null
      if test $? -eq 0	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASINADDRSTR"
      fi	# }
    fi	# }

    # Test PTX VxFS status.

    if test -r ${LSOF_INCLUDE}/sys/vx_inode.h	# {
    then
      LSOF_CFGF="$LSOF_CFGF -DHASVXFS"
      if test -r ${LSOF_INCLUDE}/sys/vx_dnlc.h	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASVXFSDNLC"
      fi	# }
    fi	# }
    LSOF_DIALECT_DIR=ptx
@


1.107
log
@Revision 4.58
@
text
@d18 1
a18 1
# $Id: Configure,v 1.106 2001/07/18 18:46:44 abe Exp abe $
d1003 3
d1110 1
a1110 1
    400|410|420|430|500)
d1212 7
a1218 1
    if test -d ${FREEBSD_SYS}/miscfs/procfs	# {
@


1.106
log
@Revision 4.57
@
text
@d18 1
a18 1
# $Id: Configure,v 1.105 2001/07/05 12:30:28 abe Exp abe $
d175 1
a175 1
    openstep|os             : OpenStep
d1968 1
a1968 1
# Configure for NeXTSTEP or OpenStep.
@


1.105
log
@Revision 4.57
@
text
@d18 1
a18 1
# $Id: Configure,v 1.104 2001/06/19 13:25:15 abe Exp abe $
d425 2
a426 2
    # Do AIX 5L actions.  Some depend on the architecture, so establish
    # it first.
d448 2
a449 2
      # This is AIX 5L on ia64.  "Elevate" version number less than 5.2
      # to 5.199.  Set ia64 compile and load options.  Test for j2_lock.h.
a450 4
	if test $LSOF_VERS -lt 5200	# {
	then
	  LSOF_VERS=5199
	fi	# }
d458 2
@


1.104
log
@Revision 4.57
@
text
@d18 1
a18 1
# $Id: Configure,v 1.102 2001/05/14 18:24:22 abe Exp abe $
d2919 1
a2919 1
      if test -d /opt/VRTSvxfs/include/sys/fs	# {
d2930 1
a2930 1
    if test -r ${SOLARIS_VXFSINCL}/sys/fs/vx_libutil.h	# {
d2940 1
a2940 1
	LSOF_TMP2="64"
d2951 1
a2951 1
      LSOF_TMP3="${SOLARIS_VXFSLIB}/libvxfsutil${LSOF_TMP2}.a"
d2965 1
a2965 1
      LSOF_CFGL="-L$SOLARIS_VXFSLIB -lvxfsutil${LSOF_TMP2}"
@


1.103
log
@Revision 4.57
@
text
@d72 1
d1058 16
d1129 13
a1141 1
	    LSOF_CFGF="$LSOF_CFGF -DHASDEVFS"
d1184 1
a1184 2
    LSOF_TMP1=0
    if test "X$FREEBSD_SYS" = "X"	# {
d1186 3
a1188 1
      if test -d /usr/src/sys	# {
d1190 1
a1190 1
	FREEBSD_SYS=/usr/src/sys
d1192 1
a1192 4
	if test -d /sys	# {
	then
	  FREEBSD_SYS="/sys"
	fi	# }
d1195 1
a1195 1
    if test -r ${FREEBSD_SYS}/miscfs/fdesc/fdesc.h	# {
d1197 1
a1197 1
      grep -q Fctty ${FREEBSD_SYS}/miscfs/fdesc/fdesc.h
d1204 1
a1204 1
      grep -q fd_link ${FREEBSD_SYS}/miscfs/fdesc/fdesc.h
d1209 1
a1209 1
      LSOF_TMP1=1
d1214 1
a1214 1
      LSOF_TMP1=1
d1236 1
a1236 1
    if test $LSOF_TMP1 -eq 1	# {
d1238 1
a1238 1
      LSOF_DINC="$LSOF_DINC -I/usr/include -I$FREEBSD_SYS"
d1578 2
a1579 1
	  if test "X$HPUX_HASONLINEJFS" = "XY" -o "X$HPUX_HASONLINEJFS" = "Xy" # {
d1889 4
a1893 4
    if test -d ${LSOF_INCLUDE}/uvm	# {
    then
      LSOF_CFGF="$LSOF_CFGF -DHAS_UVM_INCL"
    fi	# }
d2088 3
d2107 1
a2107 1
    1020|2000|2010|2020|2030|2040|2050|2060|2070|2080)
d2189 4
a2193 4
    if test -d ${LSOF_INCLUDE}/uvm	# {
    then
      LSOF_CFGF="$LSOF_CFGF -DHAS_UVM_INCL"
    fi	# }
d2913 1
a2913 2
    if test "X$SOLARIS_VXFSGE34" = "X" -a -r ${LSOF_INCLUDE}/sys/fs/vx_inode.h
    # {
d2915 5
a2919 4
      LSOF_TMP1=$LSOF_INCLUDE
      LSOF_TMP2=""
    else
      if test "X$SOLARIS_VXFSGE34" = "X"	# {
d2921 2
a2922 7
	SOLARIS_VXFSGE34="/opt/VRTSvxfs/include"
      fi	# }
      if test -r ${SOLARIS_VXFSGE34}/sys/fs/vx_inode.h	# {
      then
	LSOF_TMP1="${SOLARIS_VXFSGE34}"
 	LSOF_TMP2="-I${SOLARIS_VXFSGE34}"
	LSOF_CFGF="$LSOF_CFGF -DHAS_VXFSGE34"
d2924 5
a2928 2
	LSOF_TMP1=""
      fi	# }
d2930 1
a2930 1
    if test "X$LSOF_TMP1" != "X"	# {
d2932 7
a2938 2
      LSOF_CFGF="$LSOF_CFGF -DHASVXFS"
      if test -r ${LSOF_TMP1}/sys/fs/vx_fs.h	# {
d2940 3
a2942 1
	LSOF_CFGF="$LSOF_CFGF -DHASVXFS_FS_H"
d2944 4
a2947 1
      if test -r ${LSOF_TMP1}/sys/fs/vx_sol.h	# {
d2949 1
a2949 1
	LSOF_CFGF="$LSOF_CFGF -DHASVXFS_SOL_H"
d2951 2
a2952 1
      if test -r ${LSOF_TMP1}/sys/fs/vx_machdep.h	# {
d2954 2
a2955 1
	LSOF_CFGF="$LSOF_CFGF -DHASVXFS_MACHDEP_H"
d2957 5
a2961 1
      if test -r ${LSOF_TMP1}/sys/fs/vx_solaris.h	# {
d2963 15
a2977 3
	LSOF_CFGF="$LSOF_CFGF -DHASVXFS_SOLARIS_H"
	grep "off32_t;" ${LSOF_TMP1}/sys/fs/vx_machdep.h > /dev/null
	if test $? -eq 0	# {
d2979 1
a2979 1
	  LSOF_CFGF="$LSOF_CFGF -DHASVXFS_OFF32_T"
d2981 36
a3016 10
	grep "off64_t;" ${LSOF_TMP1}/sys/fs/vx_solaris.h > /dev/null
	if test $? -eq 0	# {
	then
	  LSOF_CFGF="$LSOF_CFGF -DHASVXFS_OFF64_T"
	fi	# }
	grep "vx_u64_t;" ${LSOF_TMP1}/sys/fs/vx_solaris.h > /dev/null
	if test $? -eq 0	# {
	then
	  LSOF_CFGF="$LSOF_CFGF -DHASVXFS_U64_T"
	fi	# }
a3017 9
      egrep "struct[ 	]vx_inode[ 	]\{" ${LSOF_TMP1}/sys/fs/vx_inode.h > /dev/null
      if test $? -eq 0	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASVXFS_VX_INODE"
      fi	# }
      if test "X$LSOF_TMP2" != "X"	# {
      then
	LSOF_CFGF="$LSOF_CFGF $LSOF_TMP2"
      fi	# }
d3022 1
a3022 1
    LSOF_CFGL="-lkvm -lelf -lsocket -lnsl"
@


1.102
log
@Revision 4.57
Correct old Linux kernel test.
@
text
@d18 1
a18 1
# $Id: Configure,v 1.101 2001/05/03 12:26:30 abe Exp abe $
d1470 1
a1470 1
		  echo "ipis exists."
d1537 18
@


1.101
log
@Revision 4.56
@
text
@d18 1
a18 1
# $Id: Configure,v 1.100 2001/05/01 19:50:26 abe Exp abe $
d1598 1
a1598 1
    if test $LSOF_VERS -lt 2172	# {
@


1.100
log
@Revision 4.56
@
text
@d18 1
a18 1
# $Id: Configure,v 1.99 2001/04/19 12:17:08 abe Exp abe $
d1102 14
@


1.99
log
@Revision 4.56, UW NSC support
@
text
@d18 1
a18 1
# $Id: Configure,v 1.98 2001/03/19 12:27:45 abe Exp abe $
d1001 3
d1092 1
a1092 1
    400|410|420|500)
d2850 2
a2851 1
    if test -r ${LSOF_INCLUDE}/sys/fs/vx_inode.h	# {
d2853 18
d2872 1
a2872 1
      if test -r ${LSOF_INCLUDE}/sys/fs/vx_fs.h	# {
d2876 1
a2876 1
      if test -r ${LSOF_INCLUDE}/sys/fs/vx_sol.h	# {
d2880 1
a2880 1
      if test -r ${LSOF_INCLUDE}/sys/fs/vx_machdep.h	# {
d2884 1
a2884 1
      if test -r ${LSOF_INCLUDE}/sys/fs/vx_solaris.h	# {
d2887 1
a2887 1
	grep "off32_t;" ${LSOF_INCLUDE}/sys/fs/vx_machdep.h > /dev/null
d2892 1
a2892 1
	grep "off64_t;" ${LSOF_INCLUDE}/sys/fs/vx_solaris.h > /dev/null
d2897 1
a2897 1
	grep "vx_u64_t;" ${LSOF_INCLUDE}/sys/fs/vx_solaris.h > /dev/null
d2903 1
a2903 1
      egrep "struct[ 	]vx_inode[ 	]\{" ${LSOF_INCLUDE}/sys/fs/vx_inode.h > /dev/null
d2907 4
@


1.98
log
@Revision 4.56
@
text
@d18 1
a18 1
# $Id: Configure,v 1.97 2001/01/14 19:21:57 abe Exp abe $
d2963 35
@


1.97
log
@Revision 4.54
@
text
@d18 1
a18 1
# $Id: Configure,v 1.96 2001/01/12 15:16:04 abe Exp abe $
d653 3
d658 2
a659 2
	echo Assuming Darwin 1.2
	LSOF_VERS=120
d667 1
a667 1
    120)
d681 1
a681 1
	if test ! -f ${DARWIN_SYSDIR}/System.framework/PrivateHeaders/bsd/$i \
d707 1
a707 1
      LSOF_DINC="$LSOF_DINC -I${DARWIN_SYSDIR}/System.framework/PrivateHeaders/bsd"
d2933 1
a2933 1
    70000|70001|70100)
@


1.96
log
@Revision 4.54
@
text
@d18 1
a18 1
# $Id: Configure,v 1.95 2001/01/02 12:44:53 abe Exp abe $
d94 1
d221 2
a222 2
      rm -rf dialects/n+obsd/uvm_include
      echo "rm -rf dialects/n+obsd/uvm_include"
d1816 1
a1816 1
    rm -rf dialects/n+obsd/uvm_include
d1819 4
a1822 4
      mkdir dialects/n+obsd/uvm_include
      touch dialects/n+obsd/uvm_include/opt_uvmhist.h
      touch dialects/n+obsd/uvm_include/opt_lockdebug.h
      LSOF_CFGF="$LSOF_CFGF -DUVM -I`pwd`/dialects/n+obsd/uvm_include"
d1828 47
d2124 47
@


1.95
log
@Revision 4.54
@
text
@d18 1
a18 1
# $Id: Configure,v 1.94 2000/12/06 15:45:25 abe Exp abe $
d906 2
a907 3
    # Make du5_sys_malloc.h for DU 5.0 and above.  Disable some compiler
    # warning  messages to compensate for errors in DU 5 RPC and XDR
    # header files.  Enable IPv6 handling.
d909 1
a909 1
      LSOF_CFGF="$LSOF_CFGF -msg_disable funcredecl,ptrmismatch"
d2590 1
a2590 1
	      echo "! SOLARIS 7 EXECUTABLES.  LSOF WILL BE CONFIGURED FOR A !"
@


1.94
log
@Revision 4.53
@
text
@d18 1
a18 1
# $Id: Configure,v 1.93 2000/11/05 13:45:16 abe Exp abe $
d1593 45
@


1.93
log
@Revision 4.52
@
text
@d9 1
a9 1
# for Linux 2.1.42 on a machine running 2.0.30.  Marty Leisner
d18 1
a18 1
# $Id: Configure,v 1.92 2000/08/08 15:20:57 abe Exp abe $
d20 4
d25 1
a25 1
#	    Sun4 kernel virtual memory type of distrib.cf
d92 2
d164 1
a177 1
    sunos|sunoscc           : SunOS gcc (sunos) or cc (sunoscc)
d214 2
a342 1
    LSOF_CFGF="$LSOF_CFGF -DAIXV=$LSOF_VERS"
d420 2
a421 2
    if test $LSOF_VERS -ge 5000
    then	# {
d423 2
a424 1
    # AIX 5 actions
d426 34
a459 2
      LSOF_CFGF="$LSOF_CFGF -q64"
      LSOF_CFGL="$LSOF_CFGL -lelf"
d461 1
d631 89
d1578 1
a1578 4

    # If the Linux C library type isn't predefined, determine it.

    if test "X$LINUX_CLIB" = "X"	# {
d1580 13
a1592 35
      echo -n "Testing C library type with $LSOF_CC ... "
      rm -f ${LSOF_TMPC}.*
      echo "#include <features.h>" > $LSOF_TMPC.c
      echo "main(){" >> $LSOF_TMPC.c
      echo "#if defined(__GLIBC__) && defined(__GLIBC_MINOR__)" >> $LSOF_TMPC.c
      echo "printf(\"-DGLIBCV=%d\\n\",__GLIBC__*100+__GLIBC_MINOR__);" >> $LSOF_TMPC.c
      echo "#elif defined(__GLIBC__)" >> $LSOF_TMPC.c
      echo "printf(\"-DGLIBCV=%d00\\n\",__GLIBC__);" >> $LSOF_TMPC.c
      echo "#else" >> $LSOF_TMPC.c
      echo "printf(\"\\n\");" >> $LSOF_TMPC.c
      echo "#endif" >> $LSOF_TMPC.c
      echo "return(0); }" >> $LSOF_TMPC.c
      $LSOF_CC ${LSOF_TMPC}.c -I$LSOF_INCLUDE -o ${LSOF_TMPC}.x > /dev/null 2>&1
      if test -x ${LSOF_TMPC}.x	# {
      then
	LINUX_CLIB=`${LSOF_TMPC}.x`
	LSOF_TMP=$?
      else
	LINUX_CLIB=""
	LSOF_TMP=1
      fi	# }
      rm -f ${LSOF_TMPC}.*
      echo "done"
      if test $LSOF_TMP -ne 0	# {
      then
	echo "Cannot determine C library type; assuming it is not glibc."
	LINUX_CLIB=""
      else
	if test "X$LINUX_CLIB" = "X"	# {
	then
	  echo "The C library type is not glibc."
	else
	  echo "The C library type is glibc, version \"$LINUX_CLIB\"."
	fi	# }
      fi	# }
a1593 4
    if test "X$LINUX_CLIB" != "X"	# {
    then
      LSOF_CFGF="$LSOF_CFGF $LINUX_CLIB"
    fi	# }
d1595 1
a1595 1
    # Test the extent of Linux /proc support.
d1597 1
a1597 1
    if test "X$LINUX_BASE" = "X"	# {
d1599 1
a1599 9
      LINUX_BASE="/dev/kmem"
      if test -d /proc/self/fd	# {
      then
	ls -l /proc/self/fd | grep "/proc/[0-9][0-9]*/fd" > /dev/null
	if test $? -eq 0	# {
	then
	  LINUX_BASE="/proc"
	fi	# }
      fi	# }
d1601 1
a1601 261

    # Check for a legal LINUX_BASE value.

    if test "X$LINUX_BASE" != "X/dev/kmem" -a "X$LINUX_BASE" != "X/proc"  # {
    then
      echo "Unknown LINUX_BASE value: $LINUX_BASE"
      rm -f $LSOF_HLP
      exit 1
    fi	# }
    if test "$LINUX_BASE" = "/proc"	# {
    then

    # Configure /proc-based Linux lsof.

      LSOF_DIALECT_DIR="linux/proc"
      echo "Configuring /proc-based Linux lsof"
      LSOF_CINFO="/proc-based"
      if test $LSOF_VERS -lt 2172	# {
      then
	echo ""
	 echo "!!!WARNING!!!==!!!WARNING!!!==!!!WARNING!!!==!!!WARNING!!!"
	 echo "!                                                        !"
	 echo "! THE /PROC-BASED LSOF SOURCES HAVE NOT BEEN TESTED ON   !"
	 echo "! LINUX KERNELS BELOW 2.1.72, AND MAY NOT WORK ON THIS   !"
	 echo "! KERNEL.  IT SHOULD USE A /DEV/KMEM-BASED LSOF.  IF YOU !"
	 echo "! ARE UNCERTAIN ABOUT THE STATUS OF YOUR /PROC, CONTACT  !"
	 echo "! ME FOR ADVICE.                                         !"
	 echo "!                                                        !"
	 echo "! Vic Abell <abe@@purdue.edu>                             !"
	 echo "!                                                        !"
	 echo "!!!WARNING!!!==!!!WARNING!!!==!!!WARNING!!!==!!!WARNING!!!"
	 echo ""
      fi	# }

      # Test for /proc-based IPv6 support.

      if test -r ${LSOF_INCLUDE}/netinet/ip6.h	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASIPv6"
      fi	# }
    fi	# }
    if test "$LINUX_BASE" = "/dev/kmem"	# {
    then

    # Configure /dev/kmem-based Linux lsof.

      LSOF_DIALECT_DIR=linux/kmem
      LSOF_CINFO="/dev/kmem-based"
      echo "Configuring /dev/kmem-based Linux lsof"
      if test $LSOF_VERS -ge 21072	# {
      then
	echo ""
	echo "!!!WARNING!!!===!!!WARNING!!!===!!!WARNING!!!===!!!WARNING!!!"
	echo "!                                                           !"
	echo "! THE /DEV/KMEM-BASED LSOF SOURCES HAVE NOT BEEN TESTED ON  !"
	echo "! LINUX KERNELS ABOVE 2.1.72, AND MAY NOT WORK ON THIS      !"
	echo "! KERNEL.  THIS KERNEL SHOULD USE A /PROC-BASED LSOF.       !"
	echo "! IF FILES IN /PROC/FD/... DON'T HAVE NAMES, BUT A NUMBER   !"
	echo "! FOLLOWING ''-> ['', THE /PROC FILE SYSTEM OF THIS KERNEL  !"
	echo "! MAY BE MISCONFIGURED.  CONTACT ME FOR ASSISTANCE.         !"
	echo "!                                                           !"
	echo "! Vic Abell <abe@@purdue.edu>                                !"
	echo "!                                                           !"
	echo "!!!WARNING!!!===!!!WARNING!!!===!!!WARNING!!!===!!!WARNING!!!"
	echo ""
      fi	# }

      # If the Linux kernel directory isn't pre-defined, set its default.
      # If the Linux kernel include directory isn't pre-defined, set its
      # default.

      if test "X$LINUX_KERNEL" = "X"	# {
      then
	LINUX_KERNEL="/usr/src/linux"
      fi	# }
      LSOF_LINUX_INCL=${LINUX_KERNEL}/include/linux

      # Test Linux socket support.

      if test -r ${LINUX_KERNEL}/net/inet/sock.h	# {
      then
	LSOF_TMP1="net/inet/sock.h"
      else
	if test -r ${LINUX_KERNEL}/include/net/sock.h	# {
	then
	  LSOF_TMP1="include/net/sock.h"
	  LSOF_DINC="$LSOF_DINC -I${LINUX_KERNEL}/include"
	else
	  echo "WARNING: cannot find ${LINUX_KERNEL}/net/inet/sock.c or"
	  echo "         ${LINUX_KERNEL}/include/net/sock.c.  Lsof may fail to"
	  echo "         compile, or it it compiles, it may fail to identify"
	  echo "         socket files correctly.  Does this machine have the"
	  echo "         Linux kernel source and header files in ${LINUX_KERNEL}?"
	  echo "         If it does not, you probably cannot build lsof."
	  LSOF_TMP1=""
	fi	# }
      fi	# }
      if test "X$LSOF_TMP1" != "X"	# {
      then
	grep protinfo ${LINUX_KERNEL}/$LSOF_TMP1 > /dev/null 2>&1
	if test $? -eq 0	# {
	then
	  grep unix_address ${LINUX_KERNEL}/$LSOF_TMP1 > /dev/null 2>&1
	  if test $? -eq 0	# {
	  then
	    LSOF_CFGF="$LSOF_CFGF -DHASUNMINSOCK=1"
	  else
	    LSOF_CFGF="$LSOF_CFGF -DHASUNMINSOCK=0"
	  fi	# }
	fi	# }
	grep "ax25_cb[ 	]*\*ax25;" ${LINUX_KERNEL}/$LSOF_TMP1 > /dev/null 2>&1
	if test $? -eq 0	# {
	then
	  LSOF_CFGF="$LSOF_CFGF -DHASAX25CBPTR"
	fi	# }
      fi	# }
      grep '*sk;' ${LSOF_LINUX_INCL}/net.h > /dev/null 2>&1
      if test $? -eq 0	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHAS_SOCKET_SK"
      fi	# }
      if test -r ${LSOF_LINUX_INCL}/netdevice.h	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASNETDEVICE_H"
      fi	# }

      # Test the Linux kernel loader format.

      if test -r ${LSOF_LINUX_INCL}/autoconf.h	# {
      then
	egrep "^#define[ 	]*CONFIG_KERNEL_ELF" ${LSOF_LINUX_INCL}/autoconf.h > /dev/null
	if test $? -eq 0	# {
	then
	  LSOF_CFGF="$LSOF_CFGF -DKERN_LD_ELF"
	fi	# }
      fi	# }

      # Test Linux lock support.

      if test -r ${LSOF_LINUX_INCL}/fs.h	# {
      then
	grep fl_fd ${LSOF_LINUX_INCL}/fs.h > /dev/null
	if test $? -eq 0	# {
	then
	  LSOF_CFGF="$LSOF_CFGF -DHAS_FL_FD"
	fi	# }
	grep fl_file ${LSOF_LINUX_INCL}/fs.h > /dev/null
	if test $? -eq 0	# {
	then
	  LSOF_CFGF="$LSOF_CFGF -DHAS_FL_FILE"
	fi	# }
	grep fl_whence ${LSOF_LINUX_INCL}/fs.h > /dev/null
	if test $? -eq 0	# {
	then
	  LSOF_CFGF="$LSOF_CFGF -DHAS_FL_WHENCE"
	fi	# }
      fi	# }

      # Test for Linux atomic lock support.

      if test -r ${LINUX_KERNEL}/include/asm/atomic.h	# {
      then
	grep "typedef struct .* atomic_t;" ${LINUX_KERNEL}/include/asm/atomic.h > /dev/null
	if test $? -eq 0	# {
	then
	  LSOF_CFGF="$LSOF_CFGF -DHAS_ATOMIC_T"
	fi	# }
      fi	# }

      # Test for Linux query_module() support.

      if test -r ${LINUX_KERNEL}/include/asm/unistd.h	# {
      then
	grep __NR_query_module ${LINUX_KERNEL}/include/asm/unistd.h > /dev/null
	if test $? -eq 0	# {
	then
	  LSOF_CFGF="$LSOF_CFGF -DHAS_QUERY_MODULE"
	fi	# }
      fi	# }

      # Test Linux kernel lseek(<kernel_address>) support.

      if test $LSOF_VERS -ge 21000	# {
      then
	if test "X$LINUX_LSEEK" = "X"	# {
	then
	  echo "Testing lseek() with $LSOF_CC"
	  rm -f ${LSOF_TMPC}.*
	  echo '#include <stdio.h>' > ${LSOF_TMPC}.c
	  echo '#include <fcntl.h>' >> ${LSOF_TMPC}.c
	  echo '#include <unistd.h>' >> ${LSOF_TMPC}.c
	  echo 'main() { int f;' >> ${LSOF_TMPC}.c
	  echo 'if((f=open("/dev/kmem",O_RDONLY,0600))<0)exit(1);' >> ${LSOF_TMPC}.c
	  echo 'if(lseek(f,(off_t)-4097,SEEK_CUR)==-1)exit(2);' >> ${LSOF_TMPC}.c
	  echo 'exit(0);}' >> ${LSOF_TMPC}.c
	  $LSOF_CC ${LSOF_TMPC}.c -I$LSOF_INCLUDE -o ${LSOF_TMPC}.x
	  ${LSOF_TMPC}.x
	  LSOF_TMP=$?
	  case $LSOF_TMP in	# {
	  0)
	    echo "Lseek() is OK."
	    ;;
	  1)
	    echo "Configure for Linux 2.[12].x needs read permission to"
	    echo "/dev/kmem in order to test lseek() on it."
	    rm -f ${LSOF_TMPC}.* $LSOF_HLP
	    exit 1
	    ;;
	  2)
	    echo "Lseek() is suspect; using private __lseek.s."
	    LSOF_SPMKF="Makefile.lseek"
	    ;;
	  *)
	    echo "Unexpected return of $LSOF_TMP from lseek() test program, ${LSOF_TMPC}.c"
	    rm -f $LSOF_HLP
	    exit 1
	    ;;
	  esac	# }
	  rm -f ${LSOF_TMPC}.*
	else
	  if test "X$LINUX_LSEEK" = "XY" -o "X$LINUX_LSEEK" = "Xy"	# {
	  then
	    LSOF_SPMKF="Makefile.lseek"
	  fi	# }
	fi	# }
      fi	# }

      # Test for Linux PID hashing support.

      grep pidhash_next ${LSOF_LINUX_INCL}/sched.h > /dev/null
      if test $? -eq 0	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASHASHPID"
      fi	# }

      # Test for Linux dcache structure.

      if test -r ${LSOF_LINUX_INCL}/dcache.h	# {
      then
	grep "^struct dentry {" ${LSOF_LINUX_INCL}/dcache.h > /dev/null
	if test $? -eq 0	# {
	then
	  LSOF_CFGF="$LSOF_CFGF -DHASDENTRY"
	fi	# }
      fi	# }

      # Test for Linux __kernel_key_t type.

      grep __kernel_key_t ${LSOF_INCLUDE}/linux/types.h > /dev/null
      if test $? -eq 0	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASKERNELKEYT"
      fi	# }

      # Test for the presence of <asm/termiobits.h> (for Alpha).

      if test -r ${LSOF_INCLUDE}/asm/termiobits.h	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHAS_ASM_TERMIOBITS"
      fi	# }
    fi	# }
a2758 190
# Configure for SunOS 4.1.x, Sun C and gcc.

  sunos|sunoscc)
    echo "!!!WARNING!!!   !!!WARNING!!!   !!!WARNING!!!"
    echo "! Lsof support for SunOS has not been       !"
    echo "! maintained since lsof revision 4.51.      !"
    echo "!!!WARNING!!!   !!!WARNING!!!   !!!WARNING!!!"
    if test "X$LSOF_CC" = "X"	# {
    then

    # See if a compiler is impled by the target name.  If a Sun C compiler
    # is implied, find it.

      if test "X$LSOF_TGT" = "Xsunos"	# {
      then
	LSOF_CC=gcc
	LSOF_CCV=`$LSOF_CC -v 2>&1 | sed -n 's/.*version \(.*\)/\1/p'`
	LSOF_CFGF="-ansi"
      else
	if test "X$SUNOS_ACC" = "X"	# {
	then
	  SUNOS_ACC="/usr/lang"
	fi	# }
	if test -x ${SUNOS_ACC}/acc	# {
	then
	  LSOF_CC=${SUNOS_ACC}/acc
	else
	  LSOF_CC=cc
	fi	# }
      fi	# }
    fi	# }
    LSOF_TGT="sunos"
    echo $LSOF_CC | grep gcc > /dev/null
    if test $? -ne 0	# {
    then

    # See if the Sun C compiler supports the const keyword.

      if test "X$SUNOS_NOCONST" = "X"	# {
      then
	rm -f ${LSOF_TMPC}.*
	echo "main() { const x; }" > ${LSOF_TMPC}.c
	echo "Testing $LSOF_CC for const support"
	echo $LSOF_CC | grep gcc > /dev/null
	if test $? -eq 0	# {
	then
	  $LSOF_CC -c ${LSOF_TMPC}.c -o ${LSOF_TMPC}.o > /dev/null 2>&1
	else
	  $LSOF_CC -c ${LSOF_TMPC}.c -I$LSOF_INCLUDE -o ${LSOF_TMPC}.o > /dev/null 2>&1
	fi	# }
	if test $? -ne 0	# {
	then
	  LSOF_CFGF="-DNOCONST"
	fi	# }
	rm -f ${LSOF_TMPC}.*
      else
	if test "X$SUNOS_NOCONST" = "XY" -o "X$SUNOS_NOCONST" = "Xy"	# {
	then
	  LSOF_CFGF="-DNOCONST"
	fi	# }
      fi	# }
    fi	# }
    if test "X$LSOF_VSTR" = "X"	# {
    then
      LSOF_VSTR=`uname -r`
    fi	# }
    if test "X$LSOF_ARCH" = "X"	# {
    then
      LSOF_ARCH=`uname -m`
    fi	# }
    if test "X$LSOF_VERS" = "X"	# {
    then

      # If SunOS version isn't pre-defined, determine it.

      LSOF_VERS=`echo $LSOF_VSTR | sed 's/\([0-9\.]*\).*/\1/' | awk -F. '{printf "%d%02d%02d", $1, $2, $3}'`
    fi	# }
    LSOF_CFGF="$LSOF_CFGF -DSUNOSV=$LSOF_VERS"
    LSOF_CFGL="-lkvm"
    LSOF_DIALECT_DIR=sun
    if test "X$LSOF_LOCALSUFFIX" = "XPUCC"	# {
    then
      LSOF_DOC="\${DESTDIR}/usr/man"
    fi	# }

    # Do hsnode header file and structure tests.

    if test -r $LSOF_INCLUDE/hsfs/hsnode.h	# {
    then
      grep hs_nodeid $LSOF_INCLUDE/hsfs/hsnode.h > /dev/null
      if test $? -eq 0	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHAS_HS_NODEID"
      fi	# }
    else
      if test -r $LSOF_INCLUDE/hsfs/hsfs_node.h	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHAS_HSFS_NODE"
	grep hs_nodeid $LSOF_INCLUDE/hsfs/hsfs_node.h > /dev/null
	if test $? -eq 0	# {
	then
	  LSOF_CFGF="$LSOF_CFGF -DHAS_HS_NODEID"
	fi	# }
      fi	# }
    fi	# }

    # Test for VSOCK.

    if test "X$SUNOS_VSOCK" = "X"	# {
    then
      rm -f ${LSOF_TMPC}.*
      echo "#include <sys/types.h>" > ${LSOF_TMPC}.c
      echo "#include <sys/time.h>" >> ${LSOF_TMPC}.c
      echo "#include <sys/vnode.h>" >> ${LSOF_TMPC}.c
      echo "main(){" >> ${LSOF_TMPC}.c
      echo "enum vtype p=VSOCK;}" >> ${LSOF_TMPC}.c
      echo "Testing vnode.h for VSOCK, using $LSOF_CC"
      echo $LSOF_CC | grep gcc > /dev/null
      if test $? -eq 0	# {
      then
	$LSOF_CC ${LSOF_TMPC}.c -o ${LSOF_TMPC}.x > /dev/null 2>&1
      else
	$LSOF_CC ${LSOF_TMPC}.c -I$LSOF_INCLUDE -o ${LSOF_TMPC}.x > /dev/null 2>&1
      fi	# }
      if test $? -eq 0	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHAS_VSOCK"
      fi	# }
      rm -f ${LSOF_TMPC}.*
    else
      if test "X$SUNOS_VSOCK" = "XY" -o "X$SUNOS_VSOCK" = "Xy"	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHAS_VSOCK"
      fi	# }
    fi	# }

    # Test for AFS.

    if test -r ${AFS_VICE}/etc/ThisCell	# {
    then
      if test "X$LSOF_SCRIPT_CALL" = "Xno"	# {
      then
	if test -r ./AFSHeaders -a -r ./AFSVersion	# {
	then
	  LSOF_AFS="yes"
	fi	# }
      else
	if test ! -x ./AFSConfig	# {
	then
	  echo "Can't find or execute the AFSConfig script"
	  rm -f $LSOF_HLP
	  exit 1
	fi	# }
	./AFSConfig
	if test $? -eq 0 -a -r ./AFSHeaders -a -r ./AFSVersion	# {
	then
	    LSOF_AFS="yes"
	fi	# }
      fi	# }
      if test "X$LSOF_AFS" = "Xyes"	# {
      then
	LSOF_AFSV=`cat ./AFSVersion | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1 \2/' | awk '{printf "%d%02d\n",\$1,\$2}'`
	LSOF_CFGF="$LSOF_CFGF -DHAS_AFS=$LSOF_AFSV"
	LSOF_DINC="$LSOF_DINC -I`cat ./AFSHeaders`"
      fi	# }
    fi	# }

    # Test for Auspex LFS.

    if test $LSOF_VERS -ge 40104	# {
    then
      if test "X$SUNOS_AUSPEXV" = "X"	# {
      then
	/usr/ucb/strings - /vmunix | grep 'Auspex [0-9\.]*' | grep Sun > /dev/null
	if test $? -eq 0	# {
	then
	  SUNOS_AUSPEXV=`/usr/ucb/strings - /vmunix | grep Auspex | grep Sun | sed -n 's/.*Auspex \([0-9\.]*\).*/\1/p' | awk -F. '{printf "%d%02d%02d\n",$1,$2,$3;}'`
	fi	# }
      fi	# }
      if test "X$SUNOS_AUSPEXV" != "X"	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DAUSPEXV=$SUNOS_AUSPEXV"
      fi	# }
    fi	# }
    echo "!!!WARNING!!!   !!!WARNING!!!   !!!WARNING!!!"
    echo "! Lsof support for SunOS has not been       !"
    echo "! maintained since lsof revision 4.51.      !"
    echo "!!!WARNING!!!   !!!WARNING!!!   !!!WARNING!!!"
    ;;

d2929 1
a2929 1
echo "# $LSOF_TGT Makefile for lsof version $LSOF_VN" > $LSOF_MKFC
d2938 2
a2939 1
echo "CCV=	$LSOF_CCV" >> $LSOF_MKFC
d2943 1
a2945 1
echo "" >> $LSOF_MKFC
d2948 1
a2949 1
  echo "" >> $LSOF_MKFC
d2953 1
a2954 1
  echo "" >> $LSOF_MKFC
d2973 1
d2977 1
d2980 1
a2989 1
echo "" >> $LSOF_MKFC
a2990 1
echo "" >> $LSOF_MKFC
d2993 1
a2994 1
  echo "" >> $LSOF_MKFC
d2998 1
a3000 1
echo "" >> $LSOF_MKFC
d3003 1
a3004 1
  echo "" >> $LSOF_MKFC
a3017 1
  echo "" >> ${LSOF_LIB}/$LSOF_LIBMKF
d3020 1
d3025 1
d3027 7
@


1.92
log
@Revision 4.51
@
text
@d18 1
a18 1
# $Id: Configure,v 1.91 2000/08/01 17:19:35 abe Exp abe $
a168 1
    pyramid|pyr             : Pyramid DC/OSx and Reliant UNIX
a172 1
    ultrix                  : Ultrix
d335 1
a335 1
    LSOF_CFGF="-DAIXV=$LSOF_VERS"
d393 1
a393 1
    if test $? -eq 0 -a $LSOF_VERS -ge 4140	# {
d395 1
a395 1
      LSOF_CFGL="-bnolibpath"
d413 8
d865 3
d956 1
a956 1
    400|410|500)
d1169 2
a1170 2
      LSOF_CINFO="pstat-based"
      echo "Configuring pstat-based HP-UX lsof"
d1307 1
a1307 1
	      echo "fields -c struct ipis_s" | $LSOF_TMP /stand/vmunix > ${LSOF_TMPC}.out 2>&1
d2094 3
d2098 1
a2098 1
	LSOF_VERS=2070
d2100 1
a2100 1
	echo "!!!WARNING!!!  Configuring for OpenBSD 2.7"
d2113 1
a2113 1
    1020|2000|2010|2020|2030|2040|2050|2060|2070)
a2211 74
# Configure for Pyramid DC/OSx and Reliant UNIX.

  pyramid|pyr)

    # Establish C compiler, its version, and its options.

    if /bin/test "X$LSOF_CC" = "X"	# {
    then
      LSOF_CC=/usr/ccs/bin/cc
      LSOF_CCV="`$LSOF_CC -V 2>&1 | head -1`"
    fi	# }
    LSOF_RANLIB=""
    if test "X$LSOF_VSTR" = "X"	# {
    then
      LSOF_VSTR=`uname -r`
    fi	# }
    if /bin/test ! -x dialects/pyramid/MkKernOpts	# {
    then
      /bin/echo "Can't execute dialects/pyramid/MkKernOpts"
      rm -f $LSOF_HLP
      exit 1
    fi	# }
    LSOF_CFGF="`LSOF_CCV=$LSOF_CCV dialects/pyramid/MkKernOpts`"
    /bin/echo $LSOF_CFGF | /usr/bin/egrep -e -Klp64 > /dev/null
    if /bin/test $? -eq 0	# {
    then

      # Compile a test program to see if -Klp64 is supported.

      rm -f ${LSOF_TMPC}.*
      echo "main(){}" > ${LSOF_TMPC}.c
      echo "Testing $LSOF_CC for -Klp64 support"
      $LSOF_CC -Klp64 ${LSOF_TMPC}.c -o ${LSOF_TMPC}.x
      if /bin/test $? -ne 0	# {
      then
	rm -f ${LSOF_TMPC}.*
	echo "$LSOF_CC doesn't support -Klp64.  Consult 00FAQ."
	rm -f $LSOF_HLP
	exit 1
      fi	# }
      rm -f ${LSOF_TMPC}.*
      echo "$LSOF_CC supports -Klp64."
    fi	# }
  
  # Do miscellaneous feature tests, based on their supporting header files.

    if /bin/test -r ${LSOF_INCLUDE}/sys/fs/vx_fs.h -a -r ${LSOF_INCLUDE}/sys/fs/vx_inode.h	# {
    then
      LSOF_CFGF="$LSOF_CFGF -DHASVXFS"
    fi	# }
    if /bin/test -r ${LSOF_INCLUDE}/sys/fs/tfs.h	# {
    then
      LSOF_CFGF="$LSOF_CFGF -DHASTFS"
    fi	# }
    if /bin/test -r ${LSOF_INCLUDE}/fs/objfs/obj_fs.h	# {
    then
      LSOF_CFGF="$LSOF_CFGF -DHASOBJFS"
    fi	# }
    if /bin/test -r ${LSOF_INCLUDE}/sys/mipc.h	# {
    then
      LSOF_CFGF="$LSOF_CFGF -DHASMIPCH"
    fi	# }
    if /bin/test -r ${LSOF_INCLUDE}/sys/dnlc.h	# {
    then
      /bin/grep "name;" ${LSOF_INCLUDE}/sys/dnlc.h > /dev/null
      if /bin/test $? -eq 0	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASDNLCPTR"
      fi	# }
    fi	# }
    LSOF_CFGL="-lsocket -lnsl -lelf"
    LSOF_DIALECT_DIR=pyramid
  ;;

d2929 4
d3110 4
a3115 95
# Configure for DEC Ultrix.

  ultrix)
    LSOF_CFGF="-Olimit 1024"
    if test "X$LSOF_VSTR" = "X"	# {
    then
      LSOF_VSTR=`uname -r`
    fi	# }
    if test "X$LSOF_VERS" = "X"	# {
    then

      # If the Ultrix version isn't pre-defined, determine it.

      case $LSOF_VSTR in	# {
      4.2)
	LSOF_VERS="40200"
	;;
      4.3)
	LSOF_VERS="40300"
	;;
      4.4)
	LSOF_VERS="40400"
	;;
      4.5)
	LSOF_VERS="40500"
	;;
      *)
	echo Unknown Ultrix release: `uname -r`
	rm -f $LSOF_HLP
	exit 1
	;;
      esac	# }
    fi	# }
    
    # Test for a legal Ultrix version.

    case $LSOF_VERS in	# {
    40200|40300|40400|40500)
      ;;
    *)
      echo "Unsupported Ultrix version: $LSOF_VERS"
      rm -f $LSOF_HLP
      exit 1
      ;;
    esac	# }
    LSOF_CFGF="-DULTRIXV=$LSOF_VERS $LSOF_CFGF"
    if test "X$ULTRIX_HWNM" = "X"	# {
    then
      ULTRIX_HWNM=`uname -m`
    fi	# }
    case $ULTRIX_HWNM in	# {
    RISC)
      ;;
    VAX)
      LSOF_CFGF="$LSOF_CFGF -DVAXULTRIX"
      ;;
    *)
      echo Unknown machine hardware name: `uname -m`
      rm -f $LSOF_HLP
      exit 1
      ;;
    esac	# }

    # Test for DECnet

    if test "X$ULTRIX_DECNET" = "X"	# {
    then
      if test "X$ULTRIX_USRLIB" = "X"	# {
      then
	ULTRIX_USRLIB="/usr/lib"
      fi	# }
      if test -r ${ULTRIX_USRLIB}/libdnet.a -a -r ${LSOF_INCLUDE}netdnet/dn.h	# {
      then
	LSOF_TMP1=1
      else
       LSOF_TMP1=0
      fi	# }
    else
      if test "X$ULTRIX_DECNET" = "XY" -o "X$ULTRIX_DECNET" = "Xy"	# {
      then
	LSOF_TMP1=1
      else
	LSOF_TMP1=0
      fi	# }
    fi	# }
    if test $LSOF_TMP1 -eq 1	# {
    then
      LSOF_CFGL="-ldnet"
      LSOF_CFGF="$LSOF_CFGF -DDECnet"
    else
      LSOF_CFGL=""
    fi	# }
    LSOF_DIALECT_DIR=ultrix
    ;;

d3166 12
@


1.91
log
@Revision 4.51
Changes for AIX, BSDI, FreeBSD, NetBSD, OpenBSD, Tru64 UNIX, Solaris
@
text
@d18 1
a18 1
# $Id: Configure,v 1.90 2000/06/29 12:29:54 abe Exp abe $
d1941 8
d2187 8
@


1.90
log
@Revision 4.50
Recognize FreeBSD 3.5
@
text
@d18 1
a18 1
# $Id: Configure,v 1.89 2000/06/27 18:18:19 abe Exp abe $
d468 1
a468 1
      LSOF_CCV=`head -1 ${LSOF_TMPC}.lst | sed 's/\(.**\) ---.*/\1/'`
d471 1
a471 1
      echo $LSOF_CCV | grep "Version 4" > /dev/null
d474 6
a479 2
	LSOF_CFGF="$LSOF_CFGF -qmaxmem=16384"
      fi	# }
d511 1
a511 1
	LSOF_VERS="20000"
d514 1
a514 1
	LSOF_VERS="20100"
d517 1
a517 1
	LSOF_VERS="30000"
d520 1
a520 1
	LSOF_VERS="30100"
d523 1
a523 1
	LSOF_VERS="40000"
d526 1
a526 1
	LSOF_VERS="40100"
d528 5
d534 1
a534 1
	echo Unknown BSDI release: `uname -r`
d536 1
a536 1
	LSOF_VERS="20000"
d617 3
d647 1
a647 1
      50000)
d767 2
a773 2
    if test $LSOF_VERS -ge 50000	# {
    then
d848 5
d856 8
d867 5
d947 1
a947 1
    400|500)
d959 1
a959 1
      echo "Unsupported FreeBSD version: $LSOF_VERS"
d1798 5
d1804 1
a1804 1
	echo Unknown NetBSD release: `uname -r`
d1817 1
a1817 1
      echo "Unsupported NetBSD version: $LSOF_VERS"
d1937 4
d2077 5
d2083 1
a2083 1
	echo Unknown OpenBSD release: `uname -r`
d2096 1
a2096 1
      echo "Unsupported OpenBSD version: $LSOF_VERS"
d2176 4
d2575 3
d2648 1
a2648 1
    20600|70000|80000)
d2823 1
a2823 1
      # Do tests specific to Solaris 8.
d2825 1
a2825 1
      if test $LSOF_VERS -eq 80000	# {
@


1.89
log
@Revision 4.50
Add NetBSD 1.5.
@
text
@d18 1
a18 1
# $Id: Configure,v 1.88 2000/06/09 15:06:46 abe Exp abe $
d833 3
d906 1
a906 1
    300|310|320|330|340)
@


1.88
log
@Revision 4.50
@
text
@d18 1
a18 1
# $Id: Configure,v 1.87 2000/06/01 18:35:03 abe Exp abe $
d1762 3
d1776 1
a1776 1
    1000|1010|1020|1030|1040)
@


1.87
log
@Revision 4.50
@
text
@d18 1
a18 1
# $Id: Configure,v 1.86 2000/05/31 13:31:00 abe Exp abe $
d553 5
d985 5
d1804 5
d2067 1
a2067 1
      grep -q Fctty ${LSOF_INCLUDE}/miscfs/fdesc/fdesc.h
d2073 5
@


1.86
log
@Revision 4.50
@
text
@d18 1
a18 1
# $Id: Configure,v 1.85 2000/03/23 14:26:36 abe Exp abe $
d1118 1
a1118 1
      echo "Configuring pstat-based HP-UX lsof for \c"
@


1.85
log
@Revision 4.49
@
text
@d18 1
a18 1
# $Id: Configure,v 1.84 2000/03/16 15:26:25 abe Exp $
d333 1
d353 1
d407 8
d546 7
a552 1
	LSOF_CFGF="$LSOF_CFGF -DHASFDESCFS"
d971 1
a971 1
    if test -d ${FREEBSD_SYS}/miscfs/fdesc	# {
d973 7
a979 1
      LSOF_CFGF="$LSOF_CFGF -DHASFDESCFS"
d1105 1
a1105 1
      if test -d $LSOF_INCLUDE/sys/pstat	# {
d1120 1
d1122 1
a1122 1
      ls -l $LSOF_CC | grep -q /opt/ansic/bin/cc
d1125 1
a1125 1
	LSOF_CFGF="$LSOF_CFGF -Ae"
a1126 22
      if test "X$HPUX_KERNBITS" = "X"	# {
      then
	HPUX_KERNBITS=`getconf _SC_KERNEL_BITS`
      fi	# }
      LSOF_CFGF="$LSOF_CFGF -DHPUXKERNBITS=${HPUX_KERNBITS} -D_PSTAT64"
      if test $HPUX_KERNBITS -eq 64	# {
      then
	echo "64\c"
	LSOF_CFGF="$LSOF_CFGF +DD64"
	LSOF_CINFO="${LSOF_CINFO}, 64 bit HP-UX"
      else
	echo "32\c"
	LSOF_CFGF="$LSOF_CFGF +DD32"
	LSOF_CINFO="${LSOF_CINFO}, 32 bit HP-UX"
      fi	# }
      echo " bit kernel"
# Disabled 29 Feb 2000 pending further information.
#     if test -r ${LSOF_INCLUDE}/netinet/in6.h	# {
#     then
#	LSOF_CFGF="$LSOF_CFGF -DHASIPv6"
#     fi	# }
# Disabled 29 Feb 2000 pending further information.
d1133 14
d1192 1
d1211 2
a1212 1
	# When HP-UX is less than 10.30, check NFS3 rnode status.
d1214 1
a1214 2
	  LSOF_TMP1=0
	  if test "X$HPUX_RNODE3" = "X"	# {
d1216 2
a1217 2
	    nm -x /stand/vmunix | grep -q nfs_vnodeops3
	    if test $? -eq 0	# {
d1219 2
a1220 1
	      if test -r ${LSOF_INCLUDE}/nfs/rnode.h	# {
d1222 8
a1229 5
		grep -q r_fh3 ${LSOF_INCLUDE}/nfs/rnode.h
		if test $? -ne 0	# {
		then
		  LSOF_TMP1=1
		fi	# }
d1231 5
d1237 1
a1237 2
	  else
	    if test "X$HPUX_RNODE3" = "X1"	# {
d1239 1
a1239 1
	      LSOF_TMP1=1
d1241 1
a1241 5
	  fi	# }
	  if test $LSOF_TMP1 -eq 1	# {
	  then
	    LSOF_CFGF="$LSOF_CFGF -DHASRNODE3"
	  fi	# }
d1304 1
d1314 1
d1369 1
d1462 1
d1785 1
a1785 1
    if test -d ${NETBSD_SYS}/miscfs/fdesc	# {
d1787 7
a1793 1
      LSOF_CFGF="$LSOF_CFGF -DHASFDESCFS"
d2014 3
d2028 1
a2028 1
    1020|2000|2010|2020|2030|2040|2050|2060)
d2050 1
a2050 1
    if test -d ${OPENBSD_SYS}/miscfs/fdesc	# {
d2052 7
a2058 1
      LSOF_CFGF="$LSOF_CFGF -DHASFDESCFS"
d2147 1
@


1.84
log
@Revision 4.49
@
text
@d18 1
a18 1
# $Id: Configure,v 1.83 100/01/14 08:56:23 abe Exp abe $
d477 9
a485 1
    LSOF_LD="shlicc2"
d815 3
d893 1
a893 1
    400)
@


1.83
log
@Revision 4.48
@
text
@d18 1
a18 1
# $Id: Configure,v 1.82 99/11/28 06:52:24 abe Exp Locker: abe $
d1109 6
d1741 1
a1741 1
    if test -r ${LSOF_INCLUDE}/netinet6/in6.h	# {
d2044 12
d2593 5
a2597 2
	    LSOF_TMP1=0
	    $LSOF_CC ${LSOF_TMPC}.c -mcpu=v9 -o ${LSOF_TMPC}.x > /dev/null 2>&1
d2603 1
a2603 1
		LSOF_TMP1=1
d2607 1
a2607 1
	    if test $LSOF_TMP1 -eq 1	# {
d2609 17
a2625 8
	     echo ""
	     echo "*********************************"
	     echo "* Configuring for 64 bit kernel *"
	     echo "*********************************"
	     echo ""
	     LSOF_CFGF="$LSOF_CFGF -mcpu=v9"
	     LSOF_CINFO="64 bit kernel"
	    else
d2636 8
@


1.82
log
@Revision 4.47
@
text
@d18 1
a18 1
# $Id: Configure,v 1.81 99/10/23 09:27:38 abe Exp Locker: abe $
d294 2
a295 2
	echo "Determining AIX version with $LSOF_TMP1;"
	echo "this may take a while, depending on your maintenance level."
d365 18
d456 1
a456 1
      echo "Getting version number of ${LSOF_CC};"
d460 1
a460 1
      echo "the version is \"${LSOF_CCV}\"."
d801 4
a804 1
      4.0*)
d871 1
a871 1
    300|310|320|330)
d957 1
a957 1
      grep -q "^#ifdef KERNEL" ${FREEBSD_SYS}/isofs/cd9660/cd9660_node.h
d986 5
d1146 16
d2736 1
a2736 1
	      SUN_AFSAPATHDEF=`ls /usr/vice/etc/modload/libafs*`
@


1.81
log
@Revision 4.46
@
text
@d18 1
a18 1
# $Id: Configure,v 1.80 99/07/28 09:31:44 abe Exp Locker: abe $
d167 2
a168 1
    osr|sco                 : SCO OpenServer
d517 7
d1134 29
d2179 1
a2179 1
  osr|sco)
d2181 20
d2241 5
a2245 1
      LSOF_CFGF="-nointl"
a2246 1
      LSOF_DEBUG="-Ox"
d2250 4
a2254 1
      LSOF_DEBUG="-Ox"
d2258 5
a2262 1
      LSOF_CFGF="-nointl"
a2263 1
      LSOF_DEBUG="-Ox"
d2267 5
a2271 1
      LSOF_CFGF="-nointl"
a2272 1
      LSOF_DEBUG="-Ox"
d2275 5
a2279 1
      LSOF_CFGF="-nointl"
a2280 1
      LSOF_DEBUG="-Ox"
d2283 5
a2287 1
      LSOF_CFGF="-nointl"
a2288 1
      LSOF_DEBUG="-Ox"
d2291 5
a2295 1
      LSOF_CFGF="-belf"
a2296 1
      LSOF_DEBUG="-O3 -Kspace"
d2527 9
a2535 2
	    LSOF_TMP1=`echo "$LSOF_CCV" | sed 's/\([^ ]*\) .*/\1/' | awk -F. '{printf "%d%03d\n",\$1,\$2}'`
	    if test $LSOF_TMP1 -lt 2095
d2537 17
d2564 1
a2564 9
	    else
	     echo ""
	     echo "*********************************"
	     echo "* Configuring for 64 bit kernel *"
	     echo "*********************************"
	     echo ""
	     LSOF_CFGF="$LSOF_CFGF -mcpu=v9"
	     LSOF_CINFO="64 bit kernel"
	  fi
d2566 9
a2574 2
	    LSOF_TMP1=`echo $LSOF_CCV | sed -n 's/[^0-9]*\([0-9]\)\..*/\1/p'`
	    if test "X$LSOF_TMP1" = "X"	# {
d2576 5
a2580 1
	      LSOF_TMP1="0"
d2582 2
a2583 1
	    if test $LSOF_TMP1 -ge 5	# {
@


1.80
log
@Revision 4.45
Add /proc-based Linux IPv6 test.
@
text
@d18 1
a18 1
# $Id: Configure,v 1.79 99/07/19 14:00:41 abe Exp Locker: abe $
d484 3
d498 1
a498 1
    20000|20100|30000|30100|40000)
d772 3
d842 1
a842 1
    300|310|320)
d854 8
d1614 1
a1614 1
      # If the NetBSD version isn't pre-defined, determine it.
d1630 1
a1630 1
	LSOF_VERS="1030"
d1885 3
a1887 1

d1899 1
a1899 1
    1020|2000|2010|2020|2030|2040|2050)
d2309 3
d2382 1
a2382 1
    20600|70000)
d2434 1
a2434 1
      if test $LSOF_VERS -eq 70000	# {
d2436 4
a2439 1
	if test "X$SOLARIS_7KERNBITS" = "X"	# {
d2441 1
a2441 1
	  SOLARIS_7KERNBITS=`/bin/isainfo -kv`
d2443 1
a2443 1
	echo $SOLARIS_7KERNBITS  | grep 64 > /dev/null
d2449 22
a2470 10
	    echo ""
	    echo "!!!WARNING!!!=========!!!WARNING!!!=========!!!WARNING!!!"
	    echo "!                                                       !"
	    echo "! LSOF NEEDS TO BE CONFIGURED FOR A 64 BIT KERNEL, BUT  !"
	    echo "! GCC DOESN'T SUPPORT THE BUILDING OF 64 BIT SOLARIS 7  !"
	    echo "! EXECUTABLES.  LSOF WILL BE CONFIGURED FOR A 32 BIT    !"
	    echo "! KERNEL.                                               !"
	    echo "!                                                       !"
	    echo "!!!WARNING!!!=========!!!WARNING!!!=========!!!WARNING!!!"
	    echo ""
d2507 10
@


1.79
log
@Revision 4.45
@
text
@d18 1
a18 1
# $Id: Configure,v 1.78 99/06/22 16:04:20 abe Exp Locker: abe $
d1355 7
d1366 1
a1366 1
      # Configure /dev/kmem-based Linux lsof.
@


1.78
log
@Revision 4.44
NetBSD 1.4C additions
@
text
@d18 1
a18 1
# $Id: Configure,v 1.77 99/06/22 10:37:42 abe Exp Locker: abe $
d1264 45
a1391 45
      # If the Linux C library type isn't predefined, determine it.

      if test "X$LINUX_CLIB" = "X"	# {
      then
	echo -n "Testing C library type with $LSOF_CC ... "
	rm -f ${LSOF_TMPC}.*
	echo "#include <features.h>" > $LSOF_TMPC.c
	echo "main(){" >> $LSOF_TMPC.c
	echo "#if defined(__GLIBC__) && defined(__GLIBC_MINOR__)" >> $LSOF_TMPC.c
	echo "printf(\"-DGLIBCV=%d\\n\",__GLIBC__*100+__GLIBC_MINOR__);" >> $LSOF_TMPC.c
	echo "#elif defined(__GLIBC__)" >> $LSOF_TMPC.c
	echo "printf(\"-DGLIBCV=%d00\\n\",__GLIBC__);" >> $LSOF_TMPC.c
	echo "#else" >> $LSOF_TMPC.c
	echo "printf(\"\\n\");" >> $LSOF_TMPC.c
	echo "#endif" >> $LSOF_TMPC.c
	echo "return(0); }" >> $LSOF_TMPC.c
	$LSOF_CC ${LSOF_TMPC}.c -I$LSOF_INCLUDE -o ${LSOF_TMPC}.x > /dev/null 2>&1
	if test -x ${LSOF_TMPC}.x	# {
	then
	  LINUX_CLIB=`${LSOF_TMPC}.x`
	  LSOF_TMP=$?
	else
	  LINUX_CLIB=""
	  LSOF_TMP=1
	fi	# }
	rm -f ${LSOF_TMPC}.*
	echo "done"
	if test $LSOF_TMP -ne 0	# {
	then
	  echo "Cannot determine C library type; assuming it is not glibc."
	  LINUX_CLIB=""
	else
	  if test "X$LINUX_CLIB" = "X"	# {
	  then
	    echo "The C library type is not glibc."
	  else
	    echo "The C library type is glibc, version \"$LINUX_CLIB\"."
	  fi	# }
	fi	# }
      fi	# }
      if test "X$LINUX_CLIB" != "X"	# {
      then
	LSOF_CFGF="$LSOF_CFGF $LINUX_CLIB"
      fi	# }

d1635 4
d1785 1
d1889 4
d2767 18
@


1.77
log
@Revision 4.44
@
text
@d18 1
a18 1
# $Id: Configure,v 1.76 99/05/19 06:45:47 abe Exp Locker: abe $
d1736 8
@


1.76
log
@Revision 4.44
@
text
@d18 1
a18 1
# $Id: Configure,v 1.75 99/05/11 06:40:08 abe Exp Locker: abe $
d211 2
a212 2
      rm -f dialects/hpux/kmem/hpux_mount.h dialects/hpux/pstat/hpux_mount.h
      echo "rm -f dialects/hpux/kmem/hpux_mount.h dialects/hpux/pstat/hpux_mount.h"
d962 3
a971 1
	LSOF_DEBUG="-O"
d997 1
a1014 2
	else
	  LSOF_DEBUG="-O"
d1020 1
a1020 1
    # Establish pstat #include base.
d1022 1
a1022 1
    if test "${HPUX_PSTAT_INCLUDE}X" = "X"	# {
d1024 6
a1029 1
	HPUX_PSTAT_INCLUDE="${LSOF_INCLUDE}/sys/pstat"
d1031 1
a1031 4

    # Test HP-UX base.

    if test -d ${HPUX_PSTAT_INCLUDE}	# {
d1037 1
a1037 1
      echo="Configuring pstat-based HP-UX lsof"
d1039 22
d1062 2
d1065 1
a1065 1
      # Configure for /dev/kmem-based HP-UX lsof.
d1067 5
a1071 7
      LSOF_CFGF="$LSOF_CFGF -DHPUXV=$LSOF_VERS"
      LSOF_CINFO="/dev/kmem-based"
      LSOF_DIALECT_DIR=hpux/kmem
      echo "Configuring /dev/kmem-based HP-UX lsof"
      if test $LSOF_VERS -lt 1000	# {
      then
	if test "X$HPUX_X25DIR" = "X"	# {
d1073 11
a1083 3
	  HPUX_X25DIR="/etc/conf"
	else
	  HPUX_X25DIR=$HPUX_X25DIR
d1085 1
a1085 1
	if test -r ${HPUX_X25DIR}/x25/x25addrstr.h	# {
d1087 1
a1087 2
	  LSOF_CFGF="$LSOF_CFGF -DHPUX_CCITT"
	  LSOF_DINC="$LSOF_DINC -I$HPUX_X25DIR"
d1089 1
a1089 8
      fi	# }
      if test -r ${LSOF_INCLUDE}/sys/fs/vx_inode.h -a -r ${LSOF_INCLUDE}/sys/fs/vx_hpux.h	# {
      then
	LSOF_CFGF="$LSOF_CFGF -DHASVXFS"
      fi	# }
      if test $LSOF_VERS -ge 1030	# {
      then
	if test "X$HPUX_KERNBITS" = "X"	# {
d1091 21
a1111 1
	  HPUX_KERNBITS=`getconf _SC_KERNEL_BITS`
a1112 18
	LSOF_CFGF="$LSOF_CFGF -DHPUXKERNBITS=${HPUX_KERNBITS} -I`pwd`/dialects/hpux/kmem/hpux11"
	if test $HPUX_KERNBITS -eq 64	# {
	then
	  echo ""
	  echo "*****************************************"
	  echo "*                                       *"
	  echo "* NOTICE!  Configuring for 64 bit HP-UX *"
	  echo "*                                       *"
	  echo "*****************************************"
	  echo ""
	  LSOF_CFGF="$LSOF_CFGF +DD64"
	  LSOF_CFGL="$LSOF_CFGL -lelf"
	  LSOF_CINFO="${LSOF_CINFO}, 64 bit HP-UX"
	else
	  LSOF_CINFO="${LSOF_CINFO}, 32 bit HP-UX"
	fi	# }
	LSOF_CFGL="$LSOF_CFGL -lnsl"
      fi	# }
d1114 1
a1114 1
      # Test for the ipis_s structure.  If it is present, set HAS_IPC_S_PATCH.
d1116 1
a1116 4
      if test $LSOF_VERS -eq 1100	# {
      then
	LSOF_TMP=/usr/contrib/bin/q4
	if test "X$HPUX_IPC_S_PATCH" = "X"	# {
d1118 2
a1119 1
	  if test -x $LSOF_TMP	# {
d1121 1
a1121 4
	    rm -f ${LSOF_TMPC}.out
	    echo "Looking for ipis_s with $LSOF_TMP ... \c"
	    echo "fields -c struct ipis_s" | $LSOF_TMP /stand/vmunix > ${LSOF_TMPC}.out 2>&1
	    if test $? -ne 0	# {
d1123 4
a1126 9
	      echo ""
	      echo ""
	      echo "!!!ERROR!!! $LSOF_TMP failed and produced the following output."
	      echo ""
	      cat ${LSOF_TMPC}.out
	      HPUX_IPC_S_PATCH=fail
	    else
	      grep ipis_s ${LSOF_TMPC}.out > /dev/null 2>&1
	      if test $? -eq 0	# {
d1128 11
a1138 2
	        HPUX_IPC_S_PATCH=1
	        echo "ipis exists."
d1140 1
a1140 1
	      # See if ipis_msgsqueued is present.
d1142 10
a1151 4
	        grep ipis_msgsqueued ${LSOF_TMPC}.out > /dev/null 2>&1
		if test $? -eq 0	# {
		then
		  HPUX_IPC_S_PATCH=2
a1152 2
	      else
	        echo "ipis_s doesn't exist."
d1154 6
a1160 6
	    rm -f ${LSOF_TMPC}.out
	  else
	    echo "Can't locate or execute $LSOF_TMP"
	    echo "ls says: \c"
	    ls -ld $LSOF_TMP
	    HPUX_IPC_S_PATCH=fail
d1162 1
a1162 20
	fi	# }
	if test "X$HPUX_IPC_S_PATCH" = "Xfail"	# {
	then
	  echo ""
	  echo "!!!ERROR!!!     !!!ERROR!!!     !!!ERROR!!!     !!!ERROR!!!"
	  echo "Configure can't use $LSOF_TMP to examine the ipis_s"
	  echo "structure.  You must do that yourself, report the result in"
	  echo "the HPUX_IPC_S_PATCH environment variable, then repeat the"
	  echo "Configure step.  Consult the Configure script's use of"
	  echo "$LSOF_TMP and the 00XCONFIG file for information"
	  echo "on ipis_s testing and the setting of HPUX_IPC_S_PATCH."
	  echo "!!!ERROR!!!     !!!ERROR!!!     !!!ERROR!!!     !!!ERROR!!!"
	  echo ""
	  exit 1
	fi	# }
	if test "X$HPUX_IPC_S_PATCH" = "X1" -o "X$HPUX_IPC_S_PATCH" = "X2" # {
	then
	  LSOF_CFGF="$LSOF_CFGF -DHAS_IPC_S_PATCH=$HPUX_IPC_S_PATCH"
	else
	  if test "X$HPUX_IPC_S_PATCH" != "Xn" -a "X$HPUX_IPC_S_PATCH" != "XN" # {
d1164 10
a1173 1
	    echo "Illegal value for HPUX_IPC_S_PATCH: $HPUX_IPC_S_PATCH"
d1176 11
a1186 2
	fi	# }
      fi	#}
d1188 2
a1189 2
      # Manufacture an hpux_mount.h header file with a mount struct in it, as
      # required.
d1191 13
a1203 13
      if test -r ${LSOF_INCLUDE}/sys/mount.h	# {
      then
	LSOF_TMP1="dialects/${LSOF_DIALECT_DIR}/hpux_mount.h"
	rm -f $LSOF_TMP1
	echo "#if !defined(MANUFACTURED_HPUX_SYS_MOUNT_H)" > $LSOF_TMP1
	echo "#define MANUFACTURED_HPUX_SYS_MOUNT_H" >> $LSOF_TMP1
	echo "/* By lsof Configure:" `date` " */" >> $LSOF_TMP1
	echo "struct mount" >> $LSOF_TMP1
	sed '1,/struct mount/d' ${LSOF_INCLUDE}/sys/mount.h | sed -n '1,/m_dev/p' >> $LSOF_TMP1
	echo "};" >> $LSOF_TMP1
	echo "#endif" >> $LSOF_TMP1
	LSOF_CFGF="$LSOF_CFGF -I`pwd`/dialects/${LSOF_DIALECT_DIR}"
      fi	# }
d1205 1
a1205 1
      # Test for AFS.
d1207 1
a1207 3
      if test -r ${AFS_VICE}/etc/ThisCell	# {
      then
	if test "X$LSOF_SCRIPT_CALL" = "Xno"	# {
d1209 1
a1209 1
	  if test -r ./AFSHeaders -a -r ./AFSVersion	# {
d1211 16
a1226 1
	    LSOF_AFS="yes"
d1228 1
a1228 2
	else
	  if test ! -x ./AFSConfig	# {
d1230 3
a1232 3
	    echo "Can't find or execute the AFSConfig script"
	    rm -f $LSOF_HLP
	    exit 1
a1233 5
	  ./AFSConfig
	  if test $? -eq 0 -a -r ./AFSHeaders -a -r ./AFSVersion	# {
	  then
	    LSOF_AFS="yes"
	  fi	# }
d1235 3
a1237 6
	if test "X$LSOF_AFS" = "Xyes"	# {
	then
	  LSOF_AFSV=`cat ./AFSVersion | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1 \2/' | awk '{printf "%d%02d\n",\$1,\$2}'`
	  LSOF_CFGF="$LSOF_CFGF -DHAS_AFS=$LSOF_AFSV"
	  LSOF_DINC="$LSOF_DINC -I`cat ./AFSHeaders`"
	fi	# }
d2881 1
a2881 1
    70000|70001)
d3058 5
@


1.75
log
@Revision 4.43
Add FreeBSD 3.2.
@
text
@d18 1
a18 1
# $Id: Configure,v 1.74 99/05/09 14:49:59 abe Exp Locker: abe $
d2636 21
@


1.74
log
@Revision 4.43
@
text
@d18 1
a18 1
# $Id: Configure,v 1.73 99/05/04 08:46:05 abe Exp Locker: abe $
d766 3
d836 1
a836 1
    300|310)
@


1.73
log
@Revision 4.43
@
text
@d18 1
a18 1
# $Id: Configure,v 1.72 99/04/15 08:14:38 abe Exp Locker: abe $
d1572 3
d1586 1
a1586 1
    1000|1010|1020|1030)
@


1.72
log
@Revision 4.43
@
text
@d18 1
a18 1
# $Id: Configure,v 1.71 99/03/29 15:06:40 abe Exp Locker: abe $
d203 6
a208 8
      rm -rf AFSHeaders AFSVersion version.h dialects/aix/aix41*
      echo rm -rf AFSHeaders AFSVersion version.h dialects/aix/aix41*
      rm -f ${LSOF_HLP_BASE}* cd9660_node.h dialects/uw/uw21/vm/swap.h
      echo "rm -rf dialects/n+obsd/uvm_include"
      rm -rf dialects/n+obsd/uvm_include
      echo "rm -f ${LSOF_HLP_BASE}* cd9660_node.h dialects/uw/uw21/vm/swap.h"
      rm -f dialects/uw/uw7/vm/swap.h dialects/hpux/hpux_mount.h
      echo "rm -f dialects/uw/uw7/vm/swap.h dialects/hpux/hpux_mount.h"
d211 6
d1014 5
a1018 3
    LSOF_TGT="hpux"
    LSOF_CFGF="$LSOF_CFGF -DHPUXV=$LSOF_VERS"
    if test $LSOF_VERS -lt 1000	# {
d1020 22
a1041 1
      if test "X$HPUX_X25DIR" = "X"	# {
d1043 11
a1053 3
	HPUX_X25DIR="/etc/conf"
      else
	HPUX_X25DIR=$HPUX_X25DIR
d1055 1
a1055 1
      if test -r ${HPUX_X25DIR}/x25/x25addrstr.h	# {
d1057 1
a1057 2
	LSOF_CFGF="$LSOF_CFGF -DHPUX_CCITT"
	LSOF_DINC="$LSOF_DINC -I$HPUX_X25DIR"
d1059 1
a1059 8
    fi	# }
    if test -r ${LSOF_INCLUDE}/sys/fs/vx_inode.h -a -r ${LSOF_INCLUDE}/sys/fs/vx_hpux.h	# {
    then
      LSOF_CFGF="$LSOF_CFGF -DHASVXFS"
    fi	# }
    if test $LSOF_VERS -ge 1030	# {
    then
      if test "X$HPUX_KERNBITS" = "X"	# {
d1061 21
a1081 1
	HPUX_KERNBITS=`getconf _SC_KERNEL_BITS`
a1082 18
      LSOF_CFGF="$LSOF_CFGF -DHPUXKERNBITS=${HPUX_KERNBITS} -I`pwd`/dialects/hpux/hpux11"
      if test $HPUX_KERNBITS -eq 64	# {
      then
	echo ""
	echo "*****************************************"
	echo "*                                       *"
	echo "* NOTICE!  Configuring for 64 bit HP-UX *"
	echo "*                                       *"
	echo "*****************************************"
	echo ""
	LSOF_CFGF="$LSOF_CFGF +DD64"
	LSOF_CFGL="$LSOF_CFGL -lelf"
	LSOF_CINFO="64 bit HP-UX"
      else
	LSOF_CINFO="32 bit HP-UX"
      fi	# }
      LSOF_CFGL="$LSOF_CFGL -lnsl"
    fi	# }
d1084 1
a1084 2
    # Test for the ipc_ipis member in the ipc_s structure.  If it is present,
    # set HAS_IPC_S_PATCH.
d1086 1
a1086 3
    if test $LSOF_VERS -eq 1100	# {
    then
      if test "X$HPUX_IPC_S_PATCH" = "X"	# {
d1089 1
a1089 1
	if test -x $LSOF_TMP	# {
d1091 1
a1091 4
	  rm -f ${LSOF_TMPC}.out
	  echo "Looking for ipc_ipis with $LSOF_TMP ... \c"
	  echo "fields -c struct ipc_s" | $LSOF_TMP /stand/vmunix > ${LSOF_TMPC}.out 2>&1
	  if test $? -ne 0	# {
d1093 4
a1096 9
	    echo ""
	    echo ""
	    echo "!!!ERROR!!! $LSOF_TMP failed and produced the following output."
	    echo ""
	    cat ${LSOF_TMPC}.out
	    HPUX_IPC_S_PATCH=fail
	  else
	    grep ipc_ipis ${LSOF_TMPC}.out > /dev/null 2>&1
	    if test $? -eq 0	# {
d1098 6
a1103 2
	      HPUX_IPC_S_PATCH="Y"
	      echo "ipc_s has it."
d1105 16
a1120 1
	      echo "ipc_s doesn't have it."
d1122 6
a1128 5
	else
	  echo "Can't locate or execute $LSOF_TMP"
	  echo "ls says: \c"
	  ls -ld $LSOF_TMP
	  HPUX_IPC_S_PATCH=fail
d1134 6
a1139 6
	  echo "Configure can't use $LSOF_TMP to test the ipc_s"
	  echo "structure for an ipc_ipis member.  You must determine that"
	  echo "yourself, report the result as Y or N in the HPUX_IPC_S_PATCH"
	  echo "environment variable, and repeat the Configure step.  Consult"
	  echo "the Configure script's use of $LSOF_TMP and the"
	  echo "00XCONFIG file for more information on testing for ipc_ipis."
d1144 16
a1159 2
      fi	# }
      if test "X$HPUX_IPC_S_PATCH" = "XY" -o "X$HPUX_IPC_S_PATCH" = "Xy"  # {
d1161 10
a1170 1
	LSOF_CFGF="$LSOF_CFGF -DHAS_IPC_S_PATCH"
a1171 1
    fi	#}
d1173 1
a1173 2
    # Manufacture an hpux_mount.h header file with a mount struct in it, as
    # required.
d1175 1
a1175 19
    if test -r ${LSOF_INCLUDE}/sys/mount.h	# {
    then
      LSOF_TMP1=dialects/hpux/hpux_mount.h
      rm -f $LSOF_TMP1
      echo "#if !defined(MANUFACTURED_HPUX_SYS_MOUNT_H)" > $LSOF_TMP1
      echo "#define MANUFACTURED_HPUX_SYS_MOUNT_H" >> $LSOF_TMP1
      echo "/* By lsof Configure:" `date` " */" >> $LSOF_TMP1
      echo "struct mount" >> $LSOF_TMP1
      sed '1,/struct mount/d' ${LSOF_INCLUDE}/sys/mount.h | sed -n '1,/m_dev/p' >> $LSOF_TMP1
      echo "};" >> $LSOF_TMP1
      echo "#endif" >> $LSOF_TMP1
      LSOF_CFGF="$LSOF_CFGF -I`pwd`/dialects/hpux"
    fi	# }

    # Test for AFS.

    if test -r ${AFS_VICE}/etc/ThisCell	# {
    then
      if test "X$LSOF_SCRIPT_CALL" = "Xno"	# {
d1177 1
a1177 1
	if test -r ./AFSHeaders -a -r ./AFSVersion	# {
d1179 16
a1194 1
	  LSOF_AFS="yes"
d1196 1
a1196 2
      else
	if test ! -x ./AFSConfig	# {
d1198 3
a1200 3
	  echo "Can't find or execute the AFSConfig script"
	  rm -f $LSOF_HLP
	  exit 1
a1201 5
	./AFSConfig
	if test $? -eq 0 -a -r ./AFSHeaders -a -r ./AFSVersion	# {
	then
	    LSOF_AFS="yes"
	fi	# }
a1202 6
      if test "X$LSOF_AFS" = "Xyes"	# {
      then
	LSOF_AFSV=`cat ./AFSVersion | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1 \2/' | awk '{printf "%d%02d\n",\$1,\$2}'`
	LSOF_CFGF="$LSOF_CFGF -DHAS_AFS=$LSOF_AFSV"
	LSOF_DINC="$LSOF_DINC -I`cat ./AFSHeaders`"
      fi	# }
a1203 1
    LSOF_DIALECT_DIR=hpux
d2354 1
a2354 1
	if test "X$SOLARIS_27KERNBITS" = "X"	# {
d2356 1
a2356 1
	  SOLARIS_27KERNBITS=`/bin/isainfo -kv`
d2358 1
a2358 1
	echo $SOLARIS_27KERNBITS  | grep 64 > /dev/null
d2365 8
a2372 8
	    echo "!!!WARNING!!!==========!!!WARNING!!!==========!!!WARNING!!!"
	    echo "!                                                         !"
	    echo "! LSOF NEEDS TO BE CONFIGURED FOR A 64 BIT KERNEL, BUT    |"
	    echo "! GCC DOESN'T SUPPORT THE BUILDING OF 64 BIT SOLARIS 2.7  !"
	    echo "! EXECUTABLES.  LSOF WILL BE CONFIGURED FOR A 32 BIT      !"
	    echo "! KERNEL.                                                 !"
	    echo "!                                                         !"
	    echo "!!!WARNING!!!==========!!!WARNING!!!==========!!!WARNING!!!"
@


1.71
log
@Revision 4.42
@
text
@d18 1
a18 1
# $Id: Configure,v 1.70 99/02/27 10:40:27 abe Exp Locker: abe $
d158 2
a159 1
    digital_unix|du|decosf  : Digital UNIX (nee DEC OSF/1)
d166 1
a166 1
    openstep|os		    : OpenStep
d172 1
d513 1
a513 1
# Configure for Digital UNIX.
d515 1
a515 1
  digital_unix|du|decosf)
d527 2
a528 1
      # If the Digital UNIX version isn't predefined, determine it.
d547 1
a547 1
	echo "WARNING: unknown Digital UNIX version; assuming version is 2.0"
d553 1
a553 1
    # Do Digital UNIX version specific stuff.
d577 1
a577 1
	echo "WARNING: unknown Digital UNIX version: $LSOF_VERS"
d716 1
a716 1
    # Enable IPv6 for DU 5; check for gethostbyname2().
a718 8
      if test -r ${LSOF_INCLUDE}/netdb.h	# {
      then
	grep -q "gethostbyname2(" ${LSOF_INCLUDE}/netdb.h
	if test $? -ne 0	# {
	then
	  LSOF_CFGF="$LSOF_CFGF -DHASNOBYNAME2"
	fi	# }
      fi	# }
d1101 1
a1101 1
	  echo "00XPORTING file for more information on testing for ipc_ipis."
@


1.70
log
@Revision 4.41
@
text
@d18 1
a18 1
# $Id: Configure,v 1.69 99/02/25 20:05:58 abe Exp Locker: abe $
d204 2
d693 1
a693 1
    # header files.
d712 12
d1060 2
a1061 2
    # Test for the HP-UX patch bundle that changes the HP-UX 11 ipc_s
    # structure, and set HAS_IPC_S_PATCH if it is installed.
d1067 24
a1090 6
	echo "Checking for ipc_s patch ... \c"
        /usr/sbin/swlist -l fileset | grep "B\.11\.00\.43" > /dev/null 2>&1
        if test $? -eq 0	# {
        then
	  HPUX_IPC_S_PATCH="Y"
	  echo "this system appears to have it."
d1092 19
a1110 2
	  echo "this system apparently doesn't have it."
        fi	# }
d1629 15
d1771 3
d1786 1
a1786 1
    1020|2000|2010|2020|2030|2040)
d2487 5
d3017 1
a3017 1
  ./Customize
@


1.69
log
@Revision 4.41
@
text
@d18 1
a18 1
# $Id: Configure,v 1.68 99/01/25 15:50:51 abe Exp Locker: abe $
d1045 23
@


1.68
log
@Revision 4.40
@
text
@d18 1
a18 1
# $Id: Configure,v 1.67 98/12/28 10:10:37 abe Exp Locker: abe $
d58 2
a59 2
#	$LSOF_CC	    C compiler name (default = none)
#	$LSOF_CCV	    C compiler version (default = none)
d65 1
a105 2
LSOF_CC=""
LSOF_CCV=""
d111 1
d191 1
a191 1
	else	# }{
d300 1
a300 1
    if test "X$LSOF_TGT" = "Xaixgcc"	# {
d302 15
d319 5
a323 5
	echo "*****************************************************************"
	echo "* Sorry, but gcc can't be used to compile lsof for AIX versions *"
	echo "* less than 4.1, because of possible kernel structure alignment *"
	echo "* differences between it and xlc.                               *"
	echo "*****************************************************************"
a325 4
      LSOF_CC=gcc
      LSOF_TGT="aix"
    else
      LSOF_CC=cc
d365 2
a366 1
    if test "X$LSOF_CC" = "Xcc" -a $LSOF_VERS -ge 4140	# {
d379 2
a380 1
    if test "X$LSOF_CC" = "Xgcc"	# {
d382 3
d405 1
a405 1
	else	# }{
d445 5
a449 1
    LSOF_CC="gcc"
d634 1
a634 1
    else	# }{
d699 10
a708 10
        LSOF_TMP2=dialects/du/du5_sys_malloc.h
        rm -f $LSOF_TMP2
        echo "#if !defined(MANUFACTURED_DU5_SYS_MALLOC_H)" > $LSOF_TMP2
        echo "/* By lsof Configure:" `date` " */" >> $LSOF_TMP2
        echo "#define MANUFACTURED_DU5_SYS_MALLOC_H" >> $LSOF_TMP2
        grep "^#define[ 	]MALLOC_NUM_BUCKETS" $LSOF_TMP1 >> $LSOF_TMP2
        echo "struct percpukmembuckets {" >> $LSOF_TMP2
        sed '1,/^struct percpukmembuckets/d' $LSOF_TMP1 | sed -n '1,/^};/p' >> $LSOF_TMP2
        echo "#endif" >> $LSOF_TMP2
        LSOF_CFGF="$LSOF_CFGF -I`pwd`/dialects/du"
d717 5
a721 1
    LSOF_CC="gcc"
d729 1
a729 1
      # If the FreeBSD version isn't pre-defined, determine it.
d750 6
d770 26
d800 1
a800 1
      LSOF_CFGF="-DHASPROCFS"
d817 1
a817 1
	LSOF_CFGF="-DHASVMLOCKH"
d820 1
a820 1
    300)
d824 1
a824 1
	LSOF_CFGF="-DHASRPCV2H"
d831 3
d840 1
a840 1
    LSOF_CFGF="-DFREEBSDV=$LSOF_VERS $LSOF_CFGF"
d878 1
a878 1
      else	# }{
d881 1
a881 1
          FREEBSD_SYS="/sys"
d946 1
a946 1
    if test "X$LSOF_TGT" = "Xhpuxgcc"	# {
d948 1
a948 6
      LSOF_CC=gcc
      LSOF_CFGF="-DHAS_CONST"
      LSOF_DEBUG="-O"
      LSOF_TGT="hpux"
    else
      if test "X$HPUX_CCDIR1" = "X"	# {
d950 4
a953 9
	HPUX_CCDIR1="/bin"
      fi	# }
      if test "X$HPUX_CCDIR2" = "X"	# {
      then
	HPUX_CCDIR2="/usr/ccs/bin"
      fi	# }
      if test -x ${HPUX_CCDIR1}/cc	# {
      then
	LSOF_CC=${HPUX_CCDIR1}/cc
d955 1
a955 1
	if test -x ${HPUX_CCDIR2}/cc	# {
d957 1
a957 5
	  LSOF_CC=${HPUX_CCDIR2}/cc
	else	# }{
	  echo "No executable cc in $HPUX_CCDIR1 or $HPUX_CCDIR2"
	  rm -f $LSOF_HLP
	  exit 1
d959 1
a959 5
      fi	# }
      what $LSOF_CC | grep -q Bundled
      if test $? -eq 0	# {
      then
	if test "X$HPUX_LIBC1" = "X"	# {
d961 1
a961 1
	  HPUX_LIBC1="/usr/lib"
d963 1
a963 1
	if test -r ${HPUX_LIBC1}/libc.sl	# {
d965 3
a967 3
	  LSOF_FCFGL="-L$HPUX_LIBC -lc"
	else	# }{
	  if test "X$HPUX_LIBC2" = "X"	# {
d969 5
a973 1
	    HPUX_LIBC2="/usr/lib"
d975 5
a979 1
	  if test -r ${HPUX_LIBC2}/libc.sl	# {
d981 1
a981 1
	    LSOF_FCFGL="-L$HPUX_LIBC2 -lc"
d983 15
a998 2
      else
	LSOF_DEBUG="-O"
d1001 1
d1031 5
a1035 5
	echo "********************************************"
	echo "*                                          *"
	echo "* NOTICE!  Configuring for 64 bit HP-UX 11 *"
	echo "*                                          *"
	echo "********************************************"
d1039 3
d1099 5
a1103 1
    LSOF_CC="gcc"
d1125 3
a1127 3
        ls -l /proc/self/fd | grep "/proc/[0-9][0-9]*/fd" > /dev/null
        if test $? -eq 0	# {
        then
d1132 4
a1135 1
    if test "X$LINUX_BASE" = "X/proc"	# {
d1137 8
d1147 1
d1165 2
d1168 1
a1168 3
    # If the Linux /proc directory's file descriptors have names, then no
    # further tests are necessary, because lsof can obtain all necessary
    # information from /proc files.
a1169 2
    if test "X$LSOF_DIALECT_DIR" = "X"	# {
    then
d1171 1
d1222 1
a1222 1
	else	# }{
d1232 1
a1232 1
	else	# }{
d1256 1
a1256 1
	else	# }{
d1388 1
a1388 1
	else	# }{
d1435 5
a1439 1
    LSOF_CC="gcc"
d1551 2
a1552 2
        grep -q "^UVM[ 	]*=" /etc/mk.conf
        if test $? -eq 0	# {
d1594 1
a1594 1
    if test -x /usr/local/bin/gcc	# {
d1596 12
a1607 2
      LSOF_CC=/usr/local/bin/gcc
      LSOF_CCV=`$LSOF_CC -v 2>&1 | sed -n 's/.*version \(.*\)/\1/p'`
a1609 1
      LSOF_CCV=`cc -v 2>&1 | sed -n 's/.*version \(.*\)/\1/p'`
d1651 5
a1655 1
    LSOF_CC="gcc"
d1759 8
a1766 2
    LSOF_CC=/usr/ccs/bin/cc
    LSOF_CCV="`$LSOF_CC -V 2>&1 | head -1`"
d1779 22
d1857 1
a1857 1
	if test $LSOF_VERS -lt 423
d1862 1
a1862 1
	fi
d1882 1
a1882 1
    else	# } {
d2049 1
a2049 1
    if test "X$LSOF_TGT" = "Xsolariscc"	# {
d2051 1
a2051 1
      if test "X$SOLARIS_CCDIR" = "X"	# {
d2053 12
a2064 5
	SOLARIS_CCDIR="/opt/SUNWspro/bin"
      fi	# }
      if test -x ${SOLARIS_CCDIR}/cc	# {
      then
	LSOF_CC=${SOLARIS_CCDIR}/cc
d2066 2
a2067 2
	echo "WARNING: no cc in ${SOLARIS_CCDIR}; using cc without path."
	LSOF_CC=cc
a2068 4
      LSOF_TGT="solaris"
      LSOF_CCV=`$LSOF_CC -V 2>&1 | sed -n 's/^cc: \(.*\)/\1/p'`
    else
      LSOF_CC=gcc
d2070 1
d2155 1
a2155 1
	else	# }{
d2181 2
a2182 1
	if test "X$LSOF_CC" = "Xgcc"	# {
d2185 1
a2185 1
	else	# }{
d2206 2
a2207 1
	if test "X$LSOF_CC" = "Xgcc"	# {
d2210 1
a2210 1
	else	# }{
d2233 2
a2234 1
	  if test "X$LSOF_CC" = "Xgcc"	# {
d2260 1
d2274 1
a2274 1
	else	# }{
d2280 1
d2301 2
a2302 1
      if test "X$LSOF_CC" = "Xgcc"	# {
d2421 1
a2421 1
    if test "X$LSOF_TGT" = "Xsunos"	# {
d2423 5
a2427 5
      LSOF_CC=gcc
      LSOF_CFGF="-ansi"
    else
      LSOF_TGT="sunos"
      if test "X$SUNOS_ACC" = "X"	# {
d2429 3
a2431 5
	SUNOS_ACC="/usr/lang"
      fi	# }
      if test -x ${SUNOS_ACC}/acc	# {
      then
	LSOF_CC=${SUNOS_ACC}/acc
d2433 10
a2442 1
	LSOF_CC=cc
d2444 5
d2450 1
a2450 1
      # See if C compiler supports the const keyword.
d2457 2
a2458 1
	if test "X$LSOF_CC" = "Xgcc"	# {
d2461 1
a2461 1
	else	# }{
d2510 2
a2511 1
      if test "X$LSOF_CC" = "Xgcc"	# {
d2823 1
a2823 7
  echo "CCV=	$LSOF_CCV" >> $LSOF_MKFC
else
  if test "X$LSOF_CC" = "Xgcc"	# {
  then
    LSOF_CCV=`gcc -v 2>&1 | sed -n 's/.*version \(.*\)/\1/p'`
    echo "CCV=	$LSOF_CCV" >> $LSOF_MKFC
  fi	# }
d2835 5
d2854 2
a2855 1
  LSOF_CFGF="$LSOF_CFGF -DLSOF_VSTR=\\\"$LSOF_VSTR\\\""
d2862 1
a2862 1
if test "X$LSOF_DEBUG" != "X"	# {
d2864 1
a2864 2
  echo "" >> $LSOF_MKFC
  echo "DEBUG=	$LSOF_DEBUG" >> $LSOF_MKFC
d2866 2
@


1.67
log
@Revision 4.39
@
text
@d18 1
a18 1
# $Id: Configure,v 1.66 98/11/23 07:34:57 abe Exp Locker: abe $
d1050 1
a1050 1
    if test -d /proc/self/fd	# {
d1052 2
a1053 2
      ls -l /proc/self/fd | grep "/proc/[0-9][0-9]*/fd" > /dev/null
      if test $? -eq 0	# {
d1055 4
a1058 18
	LSOF_LIB_NO="N"
	LSOF_DIALECT_DIR="linux/proc"
	echo "Configuring /proc-based Linux lsof"
	if test $LSOF_VERS -lt 2172	# {
	then
	  echo ""
	  echo "!!!WARNING!!!==!!!WARNING!!!==!!!WARNING!!!==!!!WARNING!!!"
	  echo "!                                                        !"
	  echo "! THE /PROC-BASED LSOF SOURCES HAVE NOT BEEN TESTED ON   !"
	  echo "! LINUX KERNELS BELOW 2.1.72, AND MAY NOT WORK ON THIS   !"
	  echo "! KERNEL.  IT SHOULD USE A /DEV/KMEM-BASED LSOF.  IF YOU !"
	  echo "! ARE UNCERTAIN ABOUT THE STATUS OF YOUR /PROC, CONTACT  !"
	  echo "! ME FOR ADVICE.                                         !"
	  echo "!                                                        !"
	  echo "! Vic Abell <abe@@purdue.edu>                             !"
	  echo "!                                                        !"
	  echo "!!!WARNING!!!==!!!WARNING!!!==!!!WARNING!!!==!!!WARNING!!!"
	  echo ""
d1062 21
d1128 4
a1131 2
	echo "#if defined(__GLIBC__)" >> $LSOF_TMPC.c
	echo "printf(\"-DGLIBCV=%d\\n\", __GLIBC__);" >> $LSOF_TMPC.c
d1291 2
a1292 2
	    echo "Configure for Linux 2.1.x needs read permission to /dev/kmem"
	    echo "in order to test lseek() on it."
d1341 7
d1662 1
d1674 1
a1674 1
    LSOF_CFGF="`dialects/pyramid/MkKernOpts`"
d1687 4
a1698 1
    LSOF_CFGF="$LSOF_CFGF -Xa"
a1699 1
    LSOF_CCV="`$LSOF_CC -V 2>&1 | head -1`"
d1731 6
a1736 1
	LSOF_CFGL="-lrpc -lelf -lnsl -lseq -lsocket"
a1741 1
    else
d1743 15
d1766 12
a1777 1
    LSOF_CFGF="-DPTXV=$LSOF_VERS $LSOF_CFGF"
d1782 3
d1793 3
d2262 1
a2262 1
      egrep "struct[ 	]vx_inode[ 	]{" ${LSOF_INCLUDE}/sys/fs/vx_inode.h > /dev/null
@


1.66
log
@Revision 4.38
@
text
@d18 1
a18 1
# $Id: Configure,v 1.65 98/09/14 19:56:17 abe Exp Locker: abe $
d816 9
a824 1
      FREEBSD_SYS="/sys"
d858 1
a858 1
      LSOF_DINC="$LSOF_DINC -I$FREEBSD_SYS"
@


1.65
log
@Revision 4.37
Add UnixWare 7.0.1 support.
@
text
@d18 1
a18 1
# $Id: Configure,v 1.64 98/09/14 13:56:18 abe Exp Locker: abe $
d165 1
d207 2
d518 3
d532 1
d536 1
d541 1
d548 3
d614 1
a614 23
      case $LSOF_ADVFSV in	# {
      1*)
	LSOF_ADVFSV=100
	echo "The ADVFS version is 1."
	;;
      2*)
	LSOF_ADVFSV=200
	echo "The ADVFS version is 2."
	;;
      3*)
	LSOF_ADVFSV=300
	echo "The ADVFS version is 3."
	;;
      4*)
	LSOF_ADVFSV=400
	echo "The ADVFS version is 4."
	;;
      *)
	echo "The ADVFS version is unknown; it will be assumed to be 1."
	LSOF_ADVFSV=100
	;;
      esac	# }
    else
d617 27
a643 1
    LSOF_CFGF="-Olimit 1024 -DDUV=$LSOF_VERS -DADVFSV=$LSOF_ADVFSV $LSOF_TMP2"
d668 23
d1470 1
a1470 1
# Configure for NeXTSTEP.
d1472 2
a1473 1
  nextstep|next|ns|nxt)
d1494 2
a1495 2
    LSOF_CFGF="-DNEXTSTEPV=$LSOF_VERS"
    LSOF_DIALECT_DIR=ns
d1559 4
d1574 1
a1574 1
    1020|2000|2010|2020|2030)
d1907 1
a1907 1
	LSOF_VERS="20700"
d1979 1
a1979 1
    20600|20700)
d2029 1
a2029 1
      if test $LSOF_VERS -eq 20700	# {
d2463 1
a2463 1
    20100|20101|20102)
d2486 9
@


1.64
log
@Revision 4.37
@
text
@d18 1
a18 1
# $Id: Configure,v 1.63 98/08/03 08:02:24 abe Exp Locker: abe $
d2431 1
a2431 1
    70000)
d2449 4
@


1.63
log
@Revision 4.36
@
text
@d18 1
a18 1
# $Id: Configure,v 1.62 98/07/17 08:25:44 abe Exp Locker: abe $
d24 2
a25 1
LSOF_HLP=/tmp/cfghlp.$$
d37 1
a37 1
if test "X$LSOF_MKFC" = "X"
d40 1
a40 1
fi
d88 1
a88 1
#	$LSOF_TMPC	    /tmp temporary C source file base name
d94 1
a94 1
if test "X$AFS_VICE" = "X"
d97 1
a97 1
fi
d101 1
a101 1
if test "X$LSOF_ARCH" = "X"
d104 1
a104 1
fi
d117 1
a117 1
if test "X$LSOF_INCLUDE" = "X"
d123 1
a123 1
fi
d135 1
a135 1
if test "X$LSOF_VERS" = "X"
d138 2
a139 2
fi
if test "X$LSOF_VSTR" = "X"
d142 1
a142 1
fi
a160 1
    irix                    : SGI IRIX
d177 1
a177 1
while test $args -gt 0
d179 1
a179 1
  case $1 in
d181 1
a181 1
      if test -r $LSOF_MKFC
d186 1
a186 1
	if test -r ${LSOF_LIB}/${LSOF_LIBMKF}
d190 2
a191 2
	else
	  if test -r ${LSOF_LIB}/${LSOF_LIBMKF}.skel
d195 3
a197 3
	  fi
	fi
      fi
d202 4
a205 2
      rm -f cd9660_node.h dialects/uw/uw21/vm/swap.h dialects/uw/uw7/vm/swap.h
      echo "rm -f cd9660_node.h dialects/uw/uw21/vm/swap.h dialects/uw/uw7/vm/swap.h"
d212 1
a212 1
      if test -r ./00DIALECTS -a -r ./version
d223 1
a223 1
	if test ! -r ./00DIALECTS
d226 2
a227 2
	fi
	if test ! -r ./version
d230 1
a230 1
	fi
d233 1
a233 1
      fi
d246 1
a246 1
      if test $LSOF_TGT != no-target
d255 1
a255 1
      fi
d257 1
a257 1
  esac
d260 1
a260 1
done
d262 1
a262 1
case $LSOF_TGT in
d273 2
a274 1
    if test "X$LSOF_VSTR" = "X"
d279 2
a280 1
      if test -x /usr/bin/oslevel
d282 4
a285 4
	echo "Determining AIX version with /usr/bin/oslevel"
	echo "This may take a while, depending on your maintenance level."
	LSOF_VSTR=`/usr/bin/oslevel | sed 's/[^0-9]*\([0-9\.]*\).*/\1/'`
	echo "Oslevel reports the version is $LSOF_VSTR."
d288 1
a288 1
	echo "WARNING: can't execute /usr/bin/oslevel; uname -rv reports"
d291 3
a293 3
      fi
    fi
    if test "X$LSOF_VERS" = "X"
d296 2
a297 2
    fi
    if test "X$LSOF_TGT" = "Xaixgcc"
d299 1
a299 1
      if test $LSOF_VERS -lt 4100
d307 1
a307 1
      fi
d312 1
a312 1
    fi
d317 1
a317 1
    if test -r ${AFS_VICE}/etc/ThisCell
d319 1
a319 1
      if test "X$LSOF_SCRIPT_CALL" = "Xno"
d321 1
a321 1
	if test -r ./AFSHeaders -a -r ./AFSVersion
d324 1
a324 1
	fi
d326 1
a326 1
	if test ! -x ./AFSConfig
d330 1
a330 1
	fi
d332 1
a332 1
	if test $? -eq 0 -a -r ./AFSHeaders -a -r ./AFSVersion
d335 3
a337 3
	fi
      fi
      if test "X$LSOF_AFS" = "Xyes"
d342 2
a343 2
      fi
    fi
d347 1
a347 1
    if test -d ${LSOF_INCLUDE}/nfs
d350 2
a351 2
    fi
    if test "X$LSOF_CC" = "Xcc" -a $LSOF_VERS -ge 4140
d354 2
a355 2
    fi
    if test -r ${LSOF_INCLUDE}/sys/socket.h
d358 1
a358 1
      if test $? -eq 0
d361 2
a362 2
      fi
    fi
d364 1
a364 1
    if test "X$LSOF_CC" = "Xgcc"
d366 1
a366 1
      if test $LSOF_VERS -ge 4100 -a $LSOF_VERS -lt 4200
d368 1
a368 1
	if test "X$AIX_USHACK" = "X"
d379 1
a379 1
	  if ! ${LSOF_TMPC}.x
d384 1
a384 1
	  fi
d386 2
a387 2
	else
	  if test "$AIX_USHACK" = "Y" -o "$AIX_USHACK" = "y"
d392 3
a394 3
	  fi
	fi
	if test ${LSOF_TMP1} -eq 1
d402 2
a403 2
	fi
      fi
d410 1
a410 1
      echo "Getting version number of $LSOF_CC"
d414 1
d416 1
a416 1
      if test $? -eq 0
d419 2
a420 2
      fi
    fi
d428 1
a428 1
    if test "X$LSOF_VSTR" = "X"
d431 2
a432 2
    fi
    if test "X$LSOF_VERS" = "X"
d437 1
a437 1
      case $LSOF_VSTR in
d458 2
a459 2
      esac
    fi
d463 1
a463 1
    case $LSOF_VERS in
d471 1
a471 1
    esac
d473 1
a473 1
    if test -r ${LSOF_INCLUDE}/miscfs/fdesc/fdesc.h
d476 1
a476 1
    fi
d478 1
a478 1
    if test $? -eq 0
d481 1
a481 1
    fi
d489 1
a489 1
    if test "X$LSOF_DINC" = "X"
d492 2
a493 2
    fi
    if test "X$LSOF_VSTR" = "X"
d496 2
a497 2
    fi
    if test "X$LSOF_VERS" = "X"
d502 1
a502 1
      case $LSOF_VSTR in
d519 2
a520 2
      esac
    fi
d524 1
a524 1
    case $LSOF_VERS in
d544 2
a545 2
    esac
    if test "X$DU_SYSDIR" = "X"
d548 1
a548 1
    fi
d550 1
a550 1
    if test "X$DU_CDIR" = "X"
d553 1
a553 1
      if test "X$LSOF_CDIR" = "X"
d556 1
a556 1
      fi
d560 1
a560 1
    fi
d562 1
a562 1
    while test $LSOF_LOOP = 1
d564 1
a564 1
      if test -d ${DU_SYSDIR}/$LSOF_CDIR
d588 1
a588 1
	if test "X$LSOF_CDIR" = "X" -o ! -d ${DU_SYSDIR}/$LSOF_CDIR
d592 3
a594 3
	fi
      fi
    done
d598 1
a598 1
    if test "X$DU_ADVFSV" = "X"
d602 1
a602 1
      case $LSOF_ADVFSV in
d623 1
a623 1
      esac
d626 1
a626 1
    fi
d628 1
a628 1
    if test "X$DU_SYSINC" = "X"
d631 1
a631 1
    fi
d634 1
a634 1
    if test "X${DU_SHLIB}" = "X"
d637 2
a638 2
    fi
    if test -r ${DU_SHLIB}/libmsfs.so
d641 1
a641 1
      if test $? -eq 0
d645 2
a646 2
      fi
    fi
d648 1
a648 1
    if test $? -eq 0
d651 1
a651 1
    fi
d659 1
a659 1
    if test "X$LSOF_VSTR" = "X"
d662 2
a663 2
    fi
    if test "X$LSOF_VERS" = "X"
d668 1
a668 1
      case $LSOF_VSTR in
d693 1
a693 1
	if test "X$LSOF_N_UNIXV" = "X"
d696 1
a696 1
	fi
d698 2
a699 2
      esac
    fi
d703 1
a703 1
    case $LSOF_VERS in
d708 1
a708 1
      if test "X$FREEBSD_KERNEL" = "X"
d713 1
a713 1
      fi
d720 1
a720 1
      if test -r ${LSOF_INCLUDE}/vm/lock.h
d723 1
a723 1
      fi
d727 1
a727 1
      if test -r ${LSOF_INCLUDE}/nfs/rpcv2.h
d730 2
a731 2
      fi
      if test -r ${LSOF_INCLUDE}/vm/lock.h
d734 1
a734 1
      fi
d741 1
a741 1
    esac
d743 1
a743 1
    if test $LSOF_VERS -lt 200 -a "X$FREEBSD_KERNEL" = "X"
d745 1
a745 1
      if test ! -x $LSOF_N_UNIXV
d752 1
a752 1
	while test $LSOF_LOOP = 1
d762 1
a762 1
	  if test ! -d $LSOF_N_UNIXV -a -x $LSOF_N_UNIXV
d768 3
a770 3
	  fi
	done
      fi
d773 1
a773 1
    fi
d775 1
a775 1
    if test "X$FREEBSD_SYS" = "X"
d778 2
a779 2
    fi
    if test -d ${FREEBSD_SYS}/miscfs/fdesc
d783 2
a784 2
    fi
    if test -d ${FREEBSD_SYS}/miscfs/procfs
d788 2
a789 2
    fi
    if test -r ${FREEBSD_SYS}/isofs/cd9660/cd9660_node.h
d793 1
a793 1
      if test $? -eq 0
d801 1
a801 1
      fi
d803 1
a803 1
    fi
d805 1
a805 1
    if test $? -eq 0
d808 2
a809 2
    fi
    if test $LSOF_TMP1 -eq 1
d812 2
a813 2
    fi
    if test -r ${LSOF_INCLUDE}/netinet/in.h
d816 1
a816 1
      if test $? -eq 0
d819 2
a820 2
      fi
    fi
d829 1
a829 1
    if test "X$LSOF_VSTR" = "X"
d832 2
a833 2
    fi
    if test "X$LSOF_VERS" = "X"
d839 2
a840 2
    fi
    if test "X$LSOF_TGT" = "Xhpuxgcc"
d847 1
a847 1
      if test "X$HPUX_CCDIR1" = "X"
d850 2
a851 2
      fi
      if test "X$HPUX_CCDIR2" = "X"
d854 2
a855 2
      fi
      if test -x ${HPUX_CCDIR1}/cc
d859 1
a859 1
	if test -x ${HPUX_CCDIR2}/cc
d862 1
a862 1
	else
d866 2
a867 2
	fi
      fi
d869 1
a869 1
      if test $? -eq 0
d871 1
a871 1
	if test "X$HPUX_LIBC1" = "X"
d874 2
a875 2
	fi
	if test -r ${HPUX_LIBC1}/libc.sl
d878 2
a879 2
	else
	  if test "X$HPUX_LIBC2" = "X"
d882 2
a883 2
	  fi
	  if test -r ${HPUX_LIBC2}/libc.sl
d886 2
a887 2
	  fi
	fi
d890 2
a891 2
      fi
    fi
d893 1
a893 1
    if test $LSOF_VERS -lt 1000
d895 1
a895 1
      if test "X$HPUX_X25DIR" = "X"
d900 2
a901 2
      fi
      if test -r ${HPUX_X25DIR}/x25/x25addrstr.h
d905 3
a907 3
      fi
    fi
    if test -r ${LSOF_INCLUDE}/sys/fs/vx_inode.h -a -r ${LSOF_INCLUDE}/sys/fs/vx_hpux.h
d910 2
a911 2
    fi
    if test $LSOF_VERS -ge 1030
d913 1
a913 1
      if test "X$HPUX_KERNBITS" = "X"
d916 1
a916 1
      fi
d918 1
a918 1
      if test $HPUX_KERNBITS -eq 64
d929 1
a929 1
      fi
d931 1
a931 1
    fi
d933 17
d952 1
a952 1
    if test -r ${AFS_VICE}/etc/ThisCell
d954 1
a954 1
      if test "X$LSOF_SCRIPT_CALL" = "Xno"
d956 1
a956 1
	if test -r ./AFSHeaders -a -r ./AFSVersion
d959 1
a959 1
	fi
d961 1
a961 1
	if test ! -x ./AFSConfig
d966 1
a966 1
	fi
d968 1
a968 1
	if test $? -eq 0 -a -r ./AFSHeaders -a -r ./AFSVersion
d971 3
a973 3
	fi
      fi
      if test "X$LSOF_AFS" = "Xyes"
d978 2
a979 2
      fi
    fi
a982 198
# Configure for SGI IRIX.

  irix)
    LSOF_RANLIB=""
    if test ! -x dialects/irix/MkKernOpts
    then
      echo "Can't execute dialects/irix/MkKernOpts"
      rm -f $LSOF_HLP
      exit 1
    fi
    if test "X$LSOF_VSTR" = "X"
    then
      LSOF_VSTR=`uname -r`
    fi
    if test "X$LSOF_VERS" = "X"
    then

      # If the IRIX version isn't predefined, determine it.

      case $LSOF_VSTR in
      5.2*)
	LSOF_VERS="50200"
	;;
      5.3*)
	LSOF_VERS="50300"
	;;
      6.0)
	LSOF_VERS="60000"
	;;
      6.0.1)
	LSOF_VERS="60001"
	;;
      6.1*)
	LSOF_VERS="60100"
	;;
      6.2*)
	LSOF_VERS="60200"
	;;
      6.3*)
	LSOF_VERS="60300"
	;;
      6.4*)
	LSOF_VERS="60400"
	;;
      *)
	echo Unknown IRIX release: `uname -r`
	rm -f $LSOF_HLP
	exit 1
	;;
      esac
    fi

    # Do IRIX version-specific stuff.

    if test "X$IRIX_BITS" = "X"
    then
      IRIX_BITS=`uname -s`
    fi
    case $LSOF_VERS in
    50200)
      LSOF_CFGF="-DIRIXV=$LSOF_VERS"
      LSOF_CFGL="-lmld"
      LSOF_DINC="$LSOF_DINC -I`pwd`/dialects/irix/irix5hdr"
      ;;
    50300)
      LSOF_CFGF="-xansi -DIRIXV=$LSOF_VERS `dialects/irix/MkKernOpts $LSOF_VERS`"
      LSOF_CFGL="-lmld"
      LSOF_DINC="$LSOF_DINC -I`pwd`/dialects/irix/irix5hdr"
      if test "X$IRIX_53NFSROLLUP" = "X"
      then
	/usr/sbin/showprods | grep "NFS kernel rollup patch" > /dev/null
	if test $? -eq 0
	then
	  LSOF_CFGF="$LSOF_CFGF -DHAS53NFSROLLUP"
	fi
      else
	if test "X$IRIX_53NFSROLLUP" = "XY" -o "X$IRIX_53NFSROLLUP" = "Xy"
	then
	  LSOF_CFGF="$LSOF_CFGF -DHAS53NFSROLLUP"
	fi
      fi
      ;;
    60000)
      LSOF_CFGF="-DIRIXV=$LSOF_VERS -woff 1411,1174,1107"
      LSOF_CFGF="$LSOF_CFGF `dialects/irix/MkKernOpts $LSOF_VERS`"
      LSOF_CFGL="-lelf"
      LSOF_DINC="$LSOF_DINC -I`pwd`/dialects/irix/irix6hdr"
      ;;
    60001)
      LSOF_CFGF="-DIRIXV=$LSOF_VERS -woff 1411,1174,1107"
      LSOF_CFGF="$LSOF_CFGF `dialects/irix/MkKernOpts $LSOF_VERS`"
      LSOF_CFGL="-lelf"
      LSOF_DINC="$LSOF_DINC -I`pwd`/dialects/irix/irix6hdr"
      ;;
    60100)
      LSOF_CFGF="-DIRIXV=$LSOF_VERS"
      if test "X$IRIX_BITS" = "XIRIX64"
      then
	LSOF_CFGF="$LSOF_CFGF -mips3"
      fi
      LSOF_CFGF="$LSOF_CFGF `dialects/irix/MkKernOpts $LSOF_VERS`"
      LSOF_CFGL="-lelf"
      LSOF_DINC="$LSOF_DINC -I`pwd`/dialects/irix/irix61hdr -I${LSOF_INCLUDE}/sys/fs"
      ;;
    60200)
      LSOF_CFGF="-xansi -DIRIXV=$LSOF_VERS"
      if test "X$IRIX_BITS" = "XIRIX64"
      then
	LSOF_CFGF="$LSOF_CFGF -mips3"
      fi
      if test -r ${LSOF_INCLUDE}/cachefs/cachefs_fs.h
      then
	grep c_metadata ${LSOF_INCLUDE}/cachefs/cachefs_fs.h > /dev/null
	LSOF_CFGF="$LSOF_CFGF -DHASCACHEFS=$?"
      fi
      LSOF_CFGF="$LSOF_CFGF `dialects/irix/MkKernOpts $LSOF_VERS`"
      LSOF_CFGL="-lelf"
      if test "X$IRIX_XFSROLLUP" = "X"
      then
	/usr/sbin/showprods | grep "patchSG0001768" > /dev/null
	if test $? -eq 0
	then
	  LSOF_CFGF="$LSOF_CFGF -DHASXFSROLLUP=1768"
	fi
      else
	LSOF_CFGF="$LSOF_CFGF -DHASXFSROLLUP=$IRIX_XFSROLLUP"
      fi
      ;;
    60300)
      LSOF_CFGF="-xansi -DIRIXV=$LSOF_VERS"
      if test "X$IRIX_BITS" = "XIRIX64"
      then
	LSOF_CFGF="$LSOF_CFGF -mips3"
      fi
      if test -r ${LSOF_INCLUDE}/cachefs/cachefs_fs.h
      then
	LSOF_CFGF="$LSOF_CFGF -DHASCACHEFS"
      fi
      LSOF_CFGF="$LSOF_CFGF `dialects/irix/MkKernOpts $LSOF_VERS`"
      LSOF_CFGL="-lelf"
      ;;
    60400)
      LSOF_CFGF="-xansi -DIRIXV=$LSOF_VERS"
      if test "X$IRIX_BITS" = "XIRIX64"
      then
	LSOF_CFGF="$LSOF_CFGF -mips3"
      fi
      if test -r ${LSOF_INCLUDE}/cachefs/cachefs_fs.h
      then
	LSOF_CFGF="$LSOF_CFGF -DHASCACHEFS"
      fi
      if test "X$IRIX_XFSROLLUP" = "X"
      then
	/usr/sbin/showprods | grep "patchSG0002970" > /dev/null
	if test $? -eq 0
	then
	  LSOF_CFGF="$LSOF_CFGF -DHASXFSROLLUP=2970"
	else
	  /usr/sbin/showprods | grep "patchSG0002372" > /dev/null
	  if test $? -eq 0
	  then
	    LSOF_CFGF="$LSOF_CFGF -DHASXFSROLLUP=2372"
	  fi
        fi
      else
	LSOF_CFGF="$LSOF_CFGF -DHASXFSROLLUP=$IRIX_XFSROLLUP"
      fi
      LSOF_CFGF="$LSOF_CFGF `dialects/irix/MkKernOpts $LSOF_VERS`"
      LSOF_CFGL="-lelf"
      LSOF_DINC="$LSOF_DINC -I`pwd`/dialects/irix/irix64hdr"
      ;;
    *)
      echo "Unsupported IRIX version: $LSOF_VERS"
      rm -f $LSOF_HLP
      exit 1
      ;;
    esac
    if test "X$IRIX_BITS" = "XIRIX64"
    then
      LSOF_CFGF="$LSOF_CFGF -64"
    else
      LSOF_CFGF="$LSOF_CFGF -DIRIX32BITS"
    fi
    if test "X$IRIX_HW" = "X"
    then
      if test -r /hw
      then
	LSOF_CFGF="$LSOF_CFGF -DUSE_STAT"
      fi
    else
      if test "X$IRIX_HW" = "XY" -o "X$IRIX_HW" = "Xy"
      then
	LSOF_CFGF="$LSOF_CFGF -DUSE_STAT"
      fi
    fi
    LSOF_DIALECT_DIR=irix
    ;;

d988 1
a988 1
    if test "X$LSOF_VSTR" = "X"
d991 2
a992 2
    fi
    if test "X$LSOF_VERS" = "X"
d998 1
a998 1
    fi
d1003 1
a1003 1
    if test -d /proc/self/fd
d1006 1
a1006 1
      if test $? -eq 0
d1011 1
a1011 1
	if test $LSOF_VERS -lt 2172
d1026 3
a1028 3
	fi
      fi
    fi
d1034 1
a1034 1
    if test "X$LSOF_DIALECT_DIR" = "X"
d1038 1
a1038 1
      if test $LSOF_VERS -ge 21072
d1054 1
a1054 1
      fi
d1060 1
a1060 1
      if test "X$LINUX_KERNEL" = "X"
d1063 1
a1063 1
      fi
d1068 1
a1068 1
      if test "X$LINUX_CLIB" = "X"
d1081 1
a1081 1
	if test -x ${LSOF_TMPC}.x
d1085 1
a1085 1
	else
d1088 1
a1088 1
	fi
d1091 1
a1091 1
	if test $LSOF_TMP -ne 0
d1095 2
a1096 2
	else
	  if test "X$LINUX_CLIB" = "X"
d1101 4
a1104 4
	  fi
	fi
      fi
      if test "X$LINUX_CLIB" != "X"
d1107 1
a1107 1
      fi
d1111 1
a1111 1
      if test -r ${LINUX_KERNEL}/net/inet/sock.h
d1115 1
a1115 1
	if test -r ${LINUX_KERNEL}/include/net/sock.h
d1119 1
a1119 1
	else
d1127 3
a1129 3
	fi
      fi
      if test "X$LSOF_TMP1" != "X"
d1132 1
a1132 1
	if test $? -eq 0
d1135 1
a1135 1
	  if test $? -eq 0
d1140 2
a1141 2
	  fi
	fi
d1143 1
a1143 1
	if test $? -eq 0
d1146 2
a1147 2
	fi
      fi
d1149 1
a1149 1
      if test $? -eq 0
d1152 2
a1153 2
      fi
      if test -r ${LSOF_LINUX_INCL}/netdevice.h
d1156 1
a1156 1
      fi
d1160 1
a1160 1
      if test -r ${LSOF_LINUX_INCL}/autoconf.h
d1163 1
a1163 1
	if test $? -eq 0
d1166 2
a1167 2
	fi
      fi
d1171 1
a1171 1
      if test -r ${LSOF_LINUX_INCL}/fs.h
d1174 1
a1174 1
	if test $? -eq 0
d1177 1
a1177 1
	fi
d1179 1
a1179 1
	if test $? -eq 0
d1182 1
a1182 1
	fi
d1184 1
a1184 1
	if test $? -eq 0
d1187 2
a1188 2
	fi
      fi
d1192 1
a1192 1
      if test -r ${LINUX_KERNEL}/include/asm/atomic.h
d1195 1
a1195 1
	if test $? -eq 0
d1198 2
a1199 2
	fi
      fi
d1203 1
a1203 1
      if test -r ${LINUX_KERNEL}/include/asm/unistd.h
d1206 1
a1206 1
	if test $? -eq 0
d1209 2
a1210 2
	fi
      fi
d1214 1
a1214 1
      if test $LSOF_VERS -ge 21000
d1216 1
a1216 1
	if test "X$LINUX_LSEEK" = "X"
d1230 1
a1230 1
	  case $LSOF_TMP in
d1249 1
a1249 1
	  esac
d1251 2
a1252 2
	else
	  if test "X$LINUX_LSEEK" = "XY" -o "X$LINUX_LSEEK" = "Xy"
d1255 3
a1257 3
	  fi
	fi
      fi
d1262 1
a1262 1
      if test $? -eq 0
d1265 1
a1265 1
      fi
d1269 1
a1269 1
      if test -r ${LSOF_LINUX_INCL}/dcache.h
d1272 1
a1272 1
	if test $? -eq 0
d1275 2
a1276 2
	fi
      fi
d1281 1
a1281 1
      if test $? -eq 0
d1284 2
a1285 2
      fi
    fi
d1292 1
a1292 1
    if test "X$LSOF_VSTR" = "X"
d1295 2
a1296 2
    fi
    if test "X$LSOF_VERS" = "X"
d1301 1
a1301 1
      case $LSOF_VSTR in
d1319 2
a1320 2
      esac
    fi
d1324 1
a1324 1
    case $LSOF_VERS in
d1332 1
a1332 1
    esac
d1334 1
a1334 1
    if test -r ${LSOF_INCLUDE}/nfs/nfsproto.h
d1337 1
a1337 1
    fi
d1339 1
a1339 1
    if test "X$NETBSD_SYS" = "X"
d1342 2
a1343 2
    fi
    if test -d ${NETBSD_SYS}/miscfs/fdesc
d1347 2
a1348 2
    fi
    if test -d ${NETBSD_SYS}/miscfs/procfs
d1352 2
a1353 2
    fi
    if test -d ${NETBSD_SYS}/isofs/cd9660
d1357 2
a1358 2
    fi
    if test -r ${NETBSD_SYS}/miscfs/kernfs/kernfs.h
d1361 1
a1361 1
      if test $? -eq 0
d1365 3
a1367 3
      fi
    fi
    if test $LSOF_TMP1 -eq 1
d1370 1
a1370 1
    fi
d1372 1
a1372 1
    if test $? -eq 0
d1375 1
a1375 1
    fi
d1377 1
a1377 1
    if test $? -eq 0
d1380 1
a1380 1
    fi
d1382 1
a1382 1
    if test $? -eq 0
d1386 1
a1386 1
      if test $? -eq 0
d1389 3
a1391 3
      fi
    fi
    if test -r ${LSOF_INCLUDE}/nfs/nfsnode.h
d1394 1
a1394 1
      if test $? -eq 0
d1397 3
a1399 3
      fi
    fi
    if test "X$NETBSD_UVM" = "X"
d1401 1
a1401 1
      if test -r /etc/mk.conf
d1404 1
a1404 1
        if test $? -eq 0
d1407 3
a1409 3
	fi
      fi
    fi
d1411 1
a1411 1
    if test "X$NETBSD_UVM" = "XY" -o "X$NETBSD_UVM" = "Xy"
d1417 2
a1418 2
    fi
    if test -r ${LSOF_INCLUDE}/netinet/in.h
d1421 1
a1421 1
      if test $? -eq 0
d1424 2
a1425 2
      fi
    fi
d1434 1
a1434 1
    if test "X$LSOF_VSTR" = "X"
d1437 2
a1438 2
    fi
    if test "X$LSOF_VERS" = "X"
d1444 2
a1445 2
    fi
    if test -x /usr/local/bin/gcc
d1453 1
a1453 1
    fi
d1459 1
a1459 1
    if test -r ${AFS_VICE}/etc/ThisCell
d1461 1
a1461 1
      if test "X$LSOF_SCRIPT_CALL" = "Xno"
d1463 1
a1463 1
	if test -r ./AFSHeaders -a -r ./AFSVersion
d1466 1
a1466 1
	fi
d1468 1
a1468 1
	if test ! -x ./AFSConfig
d1473 1
a1473 1
	fi
d1475 1
a1475 1
	if test $? -eq 0 -a -r ./AFSHeaders -a -r ./AFSVersion
d1478 3
a1480 3
	fi
      fi
      if test "X$LSOF_AFS" = "Xyes"
d1485 2
a1486 2
      fi
    fi
d1494 1
a1494 1
    if test "X$LSOF_VSTR" = "X"
d1497 2
a1498 2
    fi
    if test "X$LSOF_VERS" = "X"
d1503 1
a1503 1
      case $LSOF_VSTR in
d1524 2
a1525 2
      esac
    fi
d1529 1
a1529 1
    case $LSOF_VERS in
d1537 1
a1537 1
    esac
d1539 1
a1539 1
    if test -r ${LSOF_INCLUDE}/nfs/nfsproto.h
d1542 1
a1542 1
    fi
d1544 1
a1544 1
    if test "X$OPENBSD_SYS" = "X"
d1547 2
a1548 2
    fi
    if test -d ${OPENBSD_SYS}/miscfs/fdesc
d1552 2
a1553 2
    fi
    if test -d ${OPENBSD_SYS}/miscfs/procfs
d1557 2
a1558 2
    fi
    if test -d ${OPENBSD_SYS}/isofs/cd9660
d1562 2
a1563 2
    fi
    if test -r ${OPENBSD_SYS}/miscfs/kernfs/kernfs.h
d1566 1
a1566 1
      if test $? -eq 0
d1570 3
a1572 3
      fi
    fi
    if test $LSOF_TMP1 -eq 1
d1575 1
a1575 1
    fi
d1577 1
a1577 1
    if test $? -eq 0
d1580 1
a1580 1
    fi
d1582 1
a1582 1
    if test $? -eq 0
d1585 1
a1585 1
    fi
d1595 1
a1595 1
    if test "X$LSOF_VSTR" = "X"
d1598 2
a1599 2
    fi
    if /bin/test ! -x dialects/pyramid/MkKernOpts
d1604 1
a1604 1
    fi
d1606 1
a1606 1
    if /bin/test -r ${LSOF_INCLUDE}/sys/fs/vx_fs.h -a -r ${LSOF_INCLUDE}/sys/fs/vx_inode.h
d1609 2
a1610 2
    fi
    if /bin/test -r ${LSOF_INCLUDE}/sys/fs/tfs.h
d1613 2
a1614 2
    fi
    if /bin/test -r ${LSOF_INCLUDE}/fs/objfs/obj_fs.h
d1617 2
a1618 2
    fi
    if /bin/test -r ${LSOF_INCLUDE}/sys/dnlc.h
d1621 1
a1621 1
      if /bin/test $? -eq 0
d1624 2
a1625 2
      fi
    fi
d1636 1
a1636 1
    if test "X$LSOF_VSTR" = "X"
d1639 2
a1640 2
    fi
    if test "X$LSOF_VERS" = "X"
d1646 2
a1647 2
    fi
    if test $LSOF_VERS -ge 400
d1652 1
a1652 1
      if test "X$PTX_CONF" = "X"
d1655 2
a1656 2
      fi
      if test $LSOF_VERS -lt 410
d1661 2
a1662 2
      fi
      if test -r ${PTX_CONF}/nfs/rnode.h
d1665 1
a1665 1
      fi
d1670 1
a1670 1
      if test -r ${LSOF_INCLUDE}/nfs/rnode.h
d1673 1
a1673 1
      fi
d1675 1
a1675 1
    fi
d1677 1
a1677 1
    if test -r ${LSOF_INCLUDE}/sys/cdfsinode.h
d1680 2
a1681 2
    fi
    if test -r ${LSOF_INCLUDE}/netinet/in_pcb.h
d1684 1
a1684 1
      if test $? -eq 0
d1687 3
a1689 3
      fi
    fi
    if test -r ${LSOF_INCLUDE}/sys/vx_inode.h
d1692 1
a1692 1
      if test -r ${LSOF_INCLUDE}/sys/vx_dnlc.h
d1695 2
a1696 2
      fi
    fi
d1704 1
a1704 1
    if test "X$LSOF_VSTR" = "X"
d1707 2
a1708 2
    fi
    if test "X$LSOF_VERS" = "X"
d1713 1
a1713 1
      case $LSOF_VSTR in
d1737 2
a1738 2
      esac
    fi
d1742 1
a1742 1
    case $LSOF_VERS in
d1785 1
a1785 1
    esac
d1787 1
a1787 1
    if test "X$OSR_STATLSTAT" = "X"
d1791 1
a1791 1
      if test $? -eq 0
d1794 1
a1794 1
      fi
d1796 1
a1796 1
      if test "X$OSR_STATLSTAT" = "XY" -o "X$OSR_STATLSTAT" = "Xy"
d1799 3
a1801 3
      fi
    fi
    if test -r ${LSOF_INCLUDE}/sys/fs/nfs/rnode.h
d1804 2
a1805 2
    fi
    if test ! -r ${LSOF_INCLUDE}/netdb.h
d1808 1
a1808 1
    fi
d1815 2
a1816 1
    if test "X$LSOF_TGT" = "Xsolariscc"
d1818 1
a1818 1
      if test "X$SOLARIS_CCDIR" = "X"
d1821 2
a1822 2
      fi
      if test -x ${SOLARIS_CCDIR}/cc
d1828 1
a1828 1
      fi
d1833 2
a1834 2
    fi
    if test "X$LSOF_VSTR" = "X"
d1837 2
a1838 2
    fi
    if test "X$LSOF_VERS" = "X"
d1843 1
a1843 1
      case $LSOF_VSTR in
d1869 2
a1870 2
      esac
    fi
d1874 1
a1874 1
    case $LSOF_VERS in
a1875 1
      LSOF_RANLIB=""
d1883 1
a1883 1
      if test "X$SOLARIS_23P101318" = "X"
d1886 1
a1886 1
	if test "X$LSOF_PL" = "X"
d1889 1
a1889 1
	fi
d1892 2
a1893 2
      fi
      if test $LSOF_PL -gt 0
d1896 1
a1896 1
      fi
d1899 1
a1899 2
      LSOF_RANLIB=""
      if test "X$SOLARIS_24P101945" = "X"
d1902 1
a1902 1
	if test "X$LSOF_PL" = "X"
d1905 1
a1905 1
	fi
d1908 2
a1909 2
      fi
      if test $LSOF_PL -ge 32
d1911 1
a1911 1
	if test "X$SOLARIS_24P102303" = "X"
d1914 1
a1914 1
	  if test "X$LSOF_PL" = "X"
d1917 2
a1918 2
	  fi
	else
d1920 2
a1921 2
	fi
	if test $LSOF_PL -ge 2
d1930 2
a1931 2
	fi
      fi
d1936 1
a1936 1
      if test "X$SOLARIS_26PR_GWINDOWS" = "X"
d1944 1
a1944 1
	if test "X$LSOF_CC" = "Xgcc"
d1947 1
a1947 1
	else
d1949 2
a1950 2
	fi
	if test $? -eq 0
d1953 1
a1953 1
	fi
d1955 1
a1955 1
	if test "X$SOLARIS_26PR_GWINDOWS" = "XY" -o "X$SOLARIS_26PR_GWINDOWS" = "Xy"
d1958 3
a1960 3
	fi
      fi
      if test "X$SOLARIS_26PR_LDT" = "X"
d1968 1
a1968 1
	if test "X$LSOF_CC" = "Xgcc"
d1971 1
a1971 1
	else
d1973 2
a1974 2
	fi
	if test $? -eq 0
d1977 1
a1977 1
	fi
d1980 1
a1980 1
	if test "X$SOLARIS_26PR_LDT" = "XY" -o "X$SOLARIS_26PR_LDT" = "Xy"
d1983 3
a1985 3
	fi
      fi
      if test $LSOF_VERS -eq 20700
d1987 1
a1987 1
	if test "X$SOLARIS_27KERNBITS" = "X"
d1990 1
a1990 1
	fi
d1992 1
a1992 1
	if test $? -eq 0
d1994 1
a1994 1
	  if test "X$LSOF_CC" = "Xgcc"
d2008 1
a2008 1
	    if test "X$LSOF_TMP1" = "X"
d2011 2
a2012 2
	    fi
	    if test $LSOF_TMP1 -ge 5
d2031 3
a2033 3
	    fi
	  fi
	else
d2039 2
a2040 2
	fi
      fi
d2047 1
a2047 1
    esac
d2052 1
a2052 1
    if test "X$SOLARIS_VSOCK" = "X"
d2059 1
a2059 1
      if test "X$LSOF_CC" = "Xgcc"
d2064 2
a2065 2
      fi
      if test $? -eq 0
d2068 1
a2068 1
      fi
d2071 1
a2071 1
      if test "X$SOLARIS_VSOCK" = "XY" -o "X$SOLARIS_VSOCK" = "Xy"
d2074 2
a2075 2
      fi
    fi
d2079 1
a2079 1
    if test -r ${AFS_VICE}/etc/ThisCell
d2081 1
a2081 1
      if test "X$LSOF_SCRIPT_CALL" = "Xno"
d2083 1
a2083 1
	if test -r ./AFSHeaders -a -r ./AFSVersion
d2086 1
a2086 1
	fi
d2088 1
a2088 1
	if test ! -x ./AFSConfig
d2093 1
a2093 1
	fi
d2095 1
a2095 1
	if test $? -eq 0 -a -r ./AFSHeaders -a -r ./AFSVersion
d2098 3
a2100 3
	fi
      fi
      if test "X$LSOF_AFS" = "Xyes"
d2102 1
a2102 1
	if test "X$SUN_AFSAPATHDEF" = "X"
d2105 1
a2105 1
	  if test $? -ne 0
d2108 1
a2108 1
	    if test $LSOF_TMP1 -ne 0
d2111 4
a2114 4
	    fi
	  fi
	fi
	if test "X$SUN_AFSAPATHDEF" != "X"
d2117 1
a2117 1
	fi
d2121 2
a2122 2
      fi
    fi
d2126 1
a2126 1
    if test -r ${LSOF_INCLUDE}/sys/fs/vx_inode.h
d2129 1
a2129 1
      if test -r ${LSOF_INCLUDE}/sys/fs/vx_fs.h
d2132 2
a2133 2
      fi
      if test -r ${LSOF_INCLUDE}/sys/fs/vx_sol.h
d2136 2
a2137 2
      fi
      if test -r ${LSOF_INCLUDE}/sys/fs/vx_machdep.h
d2140 2
a2141 2
      fi
      if test -r ${LSOF_INCLUDE}/sys/fs/vx_solaris.h
d2145 1
a2145 1
	if test $? -eq 0
d2148 1
a2148 1
	fi
d2150 1
a2150 1
	if test $? -eq 0
d2153 2
a2154 2
	fi
      fi
d2156 1
a2156 1
      if test $? -eq 0
d2159 2
a2160 2
      fi
    fi
d2169 1
a2169 1
    if test "X$LSOF_LOCALSUFFIX" = "XPUCC"
d2172 1
a2172 1
    fi
d2178 1
a2178 1
    if test "X$LSOF_TGT" = "Xsunos"
d2184 1
a2184 1
      if test "X$SUNOS_ACC" = "X"
d2187 2
a2188 2
      fi
      if test -x ${SUNOS_ACC}/acc
d2193 1
a2193 1
      fi
d2197 1
a2197 1
      if test "X$SUNOS_NOCONST" = "X"
d2202 1
a2202 1
	if test "X$LSOF_CC" = "Xgcc"
d2205 1
a2205 1
	else
d2207 2
a2208 2
	fi
	if test $? -ne 0
d2211 1
a2211 1
	fi
d2214 1
a2214 1
	if test "X$SUNOS_NOCONST" = "XY" -o "X$SUNOS_NOCONST" = "Xy"
d2217 4
a2220 4
	fi
      fi
    fi
    if test "X$LSOF_VSTR" = "X"
d2223 2
a2224 2
    fi
    if test "X$LSOF_ARCH" = "X"
d2227 2
a2228 2
    fi
    if test "X$LSOF_VERS" = "X"
d2234 1
a2234 1
    fi
d2238 1
a2238 1
    if test "X$LSOF_LOCALSUFFIX" = "XPUCC"
d2241 1
a2241 1
    fi
d2245 1
a2245 1
    if test "X$SUNOS_VSOCK" = "X"
d2254 1
a2254 1
      if test "X$LSOF_CC" = "Xgcc"
d2259 2
a2260 2
      fi
      if test $? -eq 0
d2263 1
a2263 1
      fi
d2266 1
a2266 1
      if test "X$SUNOS_VSOCK" = "XY" -o "X$SUNOS_VSOCK" = "Xy"
d2269 2
a2270 2
      fi
    fi
d2274 1
a2274 1
    if test -r ${AFS_VICE}/etc/ThisCell
d2276 1
a2276 1
      if test "X$LSOF_SCRIPT_CALL" = "Xno"
d2278 1
a2278 1
	if test -r ./AFSHeaders -a -r ./AFSVersion
d2281 1
a2281 1
	fi
d2283 1
a2283 1
	if test ! -x ./AFSConfig
d2288 1
a2288 1
	fi
d2290 1
a2290 1
	if test $? -eq 0 -a -r ./AFSHeaders -a -r ./AFSVersion
d2293 3
a2295 3
	fi
      fi
      if test "X$LSOF_AFS" = "Xyes"
d2300 2
a2301 2
      fi
    fi
d2308 1
a2308 1
    if test "X$LSOF_VSTR" = "X"
d2311 2
a2312 2
    fi
    if test "X$LSOF_VERS" = "X"
d2317 1
a2317 1
      case $LSOF_VSTR in
d2335 2
a2336 2
      esac
    fi
d2340 1
a2340 1
    case $LSOF_VERS in
d2348 1
a2348 1
    esac
d2350 1
a2350 1
    if test "X$ULTRIX_HWNM" = "X"
d2353 2
a2354 2
    fi
    case $ULTRIX_HWNM in
d2365 1
a2365 1
    esac
d2369 1
a2369 1
    if test "X$ULTRIX_DECNET" = "X"
d2371 1
a2371 1
      if test "X$ULTRIX_USRLIB" = "X"
d2374 2
a2375 2
      fi
      if test -r ${ULTRIX_USRLIB}/libdnet.a -a -r ${LSOF_INCLUDE}netdnet/dn.h
d2380 1
a2380 1
      fi
d2382 1
a2382 1
      if test "X$ULTRIX_DECNET" = "XY" -o "X$ULTRIX_DECNET" = "Xy"
d2387 3
a2389 3
      fi
    fi
    if test $LSOF_TMP1 -eq 1
d2395 1
a2395 1
    fi
d2403 1
a2403 1
    if test "X$LSOF_VSTR" = "X"
d2406 2
a2407 2
    fi
    if test "X$LSOF_VERS" = "X"
d2413 1
a2413 1
    fi
d2418 1
a2418 1
    case $LSOF_VERS in
d2421 1
a2421 1
      if test ! -r ${LSOF_INCLUDE}/vm/swap.h -a -r ${LSOF_INCLUDE}/sys/swap.h
d2424 2
a2425 2
      fi
      if test -r ${LSOF_INCLUDE}/sys/fs/vx_inode.h
d2428 1
a2428 1
      fi
d2433 1
a2433 1
      if test ! -r ${LSOF_INCLUDE}/vm/swap.h -a -r ${LSOF_INCLUDE}/sys/swap.h
d2436 2
a2437 2
      fi
      if test -r ${LSOF_INCLUDE}/sys/fs/vx_gemini.h
d2440 1
a2440 1
      fi
d2448 1
a2448 1
    esac
d2463 1
a2463 1
esac
d2467 1
a2467 1
if test "X$LSOF_SCRIPT_CALL" = "Xyes" -a ! -r ./.neverInv
d2469 1
a2469 1
  if test ! -f ./Inventory	# Want -x, but Ultrix doesn't grok it.
d2474 1
a2474 1
  fi
d2476 1
a2476 1
fi
d2480 1
a2480 1
if test ! -d ./dialects/$LSOF_DIALECT_DIR
d2485 1
a2485 1
fi
d2489 1
a2489 1
if test ! -r ./dialects/$LSOF_DIALECT_DIR/$LSOF_MK
d2494 1
a2494 1
fi
d2499 1
a2499 1
if test "X$LSOF_SPMKF" != "X"
d2504 2
a2505 2
fi
if test "X$LSOF_LOCALSUFFIX" != "X"
d2510 2
a2511 2
fi
if test ! -r ./dialects/$LSOF_DIALECT_DIR/$LSOF_REST
d2516 1
a2516 1
fi
d2520 1
a2520 1
if test ! -r $LSOF_VF
d2522 1
a2522 1
  echo "Version number file, ./$LSOF_VF, does not exist."
d2527 1
a2527 1
fi
d2536 1
a2536 1
if test "X$LSOF_MKC" = "X"
d2539 1
a2539 1
fi
d2546 1
a2546 1
if test "X$LSOF_CC" = "X"
d2549 1
a2549 1
fi
d2551 1
a2551 1
if test "X$LSOF_CCV" != "X"
d2555 1
a2555 1
  if test "X$LSOF_CC" = "Xgcc"
d2559 3
a2561 3
  fi
fi
if test "X$LSOF_LIB_NO" = "X"
d2564 1
a2564 1
fi
d2566 1
a2566 1
if test "X$LSOF_LD" != "X"
d2570 2
a2571 2
fi
if test "X$LSOF_CFGD" != "X"
d2574 2
a2575 2
fi
if test "X$LSOF_CFGDN" != "X"
d2578 2
a2579 2
fi
if test "X$LSOF_ARCH" != "X"
d2582 2
a2583 2
fi
if test "X$LSOF_VSTR" != "X"
d2586 1
a2586 1
fi
d2588 1
a2588 1
if test "X$LSOF_LIB_NO" = "X"
d2591 2
a2592 2
fi
if test "X$LSOF_DEBUG" != "X"
d2596 1
a2596 1
fi
d2598 1
a2598 1
if test "X$LSOF_DINC" != "X"
d2602 2
a2603 2
fi
if test "X$LSOF_DOC" != "X"
d2606 1
a2606 1
fi
d2608 1
a2608 1
if test "X$LSOF_DISTRIBKVM" != "X" -a "X$LSOF_DISTRIBKVM" != "XKVM"
d2612 1
a2612 1
fi
d2614 1
a2614 1
if test "X$LSOF_LIB_NO" = "X"
d2617 1
a2617 1
fi
d2619 1
a2619 1
if test "X$LSOF_LIB_NO" = "X"
d2626 1
a2626 1
  if test "X$LSOF_AR" != "X"
d2629 2
a2630 2
  fi
  if test "X$LSOF_RANLIB" != "X"
d2633 1
a2633 1
  fi
d2639 1
a2639 1
fi
d2644 1
a2644 1
if test "X$LSOF_SCRIPT_CALL" = "Xyes" -a ! -r ./.neverCust
d2646 1
a2646 1
  if test ! -f ./Customize	# Want -x, but Ultrix doesn't grok it.
d2650 1
a2650 1
  fi
d2652 1
a2652 1
fi
@


1.62
log
@Revision 4.35
@
text
@d18 1
a18 1
# $Id: Configure,v 1.61 98/06/26 08:08:17 abe Exp Locker: abe $
d808 8
d1593 8
@


1.61
log
@Revision 4.34
@
text
@d18 1
a18 1
# $Id: Configure,v 1.60 98/06/19 08:31:03 abe Exp Locker: abe $
d908 5
a912 9
	echo "!!!WARNING!!!===!!!WARNING!!!===!!!WARNING!!!===!!!WARNING!!!"
	echo "!                                                           !"
	echo "! LSOF HASN'T BEEN PORTED TO 64 BIT HP_UX 11 KERNELS YET.   !"
	echo "!                                                           !"
	echo "! IF YOU WANT SUCH A VERSION, PLEASE CONTACT ME VIA E-MAIL. !"
	echo "!                                                           !"
	echo "! Vic Abell <abe@@purdue.edu>                                !"
	echo "!                                                           !"
	echo "!!!WARNING!!!===!!!WARNING!!!===!!!WARNING!!!===!!!WARNING!!!"
d914 2
@


1.60
log
@Revision 4.34
@
text
@d18 1
a18 1
# $Id: Configure,v 1.59 98/05/22 13:58:02 abe Exp $
d55 2
d88 3
a90 1
#	$LSOF_VERS	    Unix dialect version -- may be supplied
d100 4
d138 4
d271 1
a271 1
    if test "X$LSOF_VERS" = "X"
d280 2
a281 2
	LSOF_VERS=`/usr/bin/oslevel | sed 's/[^0-9]*\(.*\)/\1/' | sed 's/\.//g'`
	echo "Oslevel reports the version is $LSOF_VERS."
d283 4
a286 5
	LSOF_VERS=`uname -rv | awk '{printf "%d%d00\n",\$2,\$1}'`
	echo "WARNING: can't execute /usr/bin/oslevel; uname -rv reports the"
	echo "         version is $LSOF_VERS; edit CFGF in the Makefile to correct"
	echo "         the terminating 00; it should be 10 X the last AIX "
	echo "         version component -- e.g., 40 for AIX 3.2.4."
d289 4
d423 4
d432 1
a432 1
      case "`uname -r`" in
d488 4
d497 1
a497 1
      case "`uname -r`" in
d654 4
d663 1
a663 1
      case "`uname -r`" in
d816 4
d825 1
a825 1
      LSOF_VERS=`uname -r | awk -F. '{printf "%d%02d",\$2,\$3}'`
d965 4
d974 1
a974 1
      case "`uname -r`" in
d1158 4
d1167 1
a1167 1
      LSOF_VERS=`uname -r|sed 's/\./ /g'|awk '{printf "%d%d%03d",\$1,\$2,\$3}'`
d1462 4
d1471 1
a1471 1
      case "`uname -r`" in
d1596 4
d1605 1
a1605 1
      LSOF_VERS=`hostinfo | sed -n 's/.*NeXT Mach \([0-9]*\)\.\([0-9]*\).*/\1\2/p'`
d1656 4
d1665 1
a1665 1
      case "`uname -r`" in
d1757 4
d1798 4
d1807 1
a1807 1
      LSOF_VERS=`uname -v|awk -F. '{printf "%d%d%d",substr($1,2), $2, $3}'`
d1866 4
d1875 1
a1875 2
      LSOF_TMP1="`LANG=C_C.C uname -X 2>/dev/null | grep Release | sed 's/Release = \(.*\)/\1/'`"
      case $LSOF_TMP1 in
d1892 1
a1892 1
	LSOF_VERS="`echo $LSOF_TMP1 | sed 's/3\.2v//; s/\.//g'`"
d1995 4
d2004 1
a2004 1
      case "`uname -r`" in
d2027 1
a2027 1
	echo Unknown Solaris version: `uname -r`
d2383 8
d2396 1
a2396 1
      LSOF_VERS=`uname -r | sed 's/\([0-9\.]*\).*/\1/' | awk -F. '{printf "%d%02d%02d", $1, $2, $3}'`
d2471 4
d2480 1
a2480 1
      case "`uname -r`" in
d2566 4
d2575 1
a2575 1
      LSOF_VERS=`uname -v | sed 's/\([0-9\.]*\).*/\1/; s/\./ /g' | awk '{printf "%d%02d%02d\n", $1, $2, $3;}'`
d2741 8
@


1.59
log
@Revision 4.33
@
text
@d18 1
a18 1
# $Id: Configure,v 1.58 98/05/13 06:57:22 abe Exp Locker: abe $
d360 1
a360 1
	  if ! ${LSOF_TMPX}.x
d2199 16
@


1.58
log
@Revision 4.32
@
text
@d18 1
a18 1
# $Id: Configure,v 1.57 98/05/11 14:21:26 abe Exp Locker: abe $
d336 8
d1128 1
a1128 1
      LSOF_VERS=`uname -r|sed 's/\./ /g'|awk '{printf "%d%d%02d",\$1,\$2,\$3}'`
d1169 1
a1169 1
      if test $LSOF_VERS -ge 2172
d1345 1
a1345 1
      if test $LSOF_VERS -ge 2100
d1525 19
@


1.57
log
@Revision 4.32
Check for Linux ax25_cb in sock struct.
@
text
@d18 1
a18 1
# $Id: Configure,v 1.56 98/05/07 09:04:41 abe Exp Locker: abe $
d1708 1
a1708 1
    LSOF_CCV="`$LSOF_CC -V 2>&1`"
@


1.56
log
@Revision 4.32
Add -qmaxmem to AIX CFLAGS when appropriate.
@
text
@d18 1
a18 1
# $Id: Configure,v 1.55 98/04/21 10:25:23 abe Exp Locker: abe $
d1264 5
@


1.55
log
@Revision 4.31
@
text
@d18 1
a18 1
# $Id: Configure,v 1.54 98/04/08 21:46:46 abe Exp $
d387 5
@


1.54
log
@Revision 4.30
Solaris VxFS additions; IRIX XFS patch tests
@
text
@d18 1
a18 1
# $Id: Configure,v 1.53 98/04/03 16:59:23 abe Exp Locker: abe $
d752 4
a755 4
        sed -e '/^ \* Prototypes for ISOFS vnode operations/,$c\
        \ The ISOFS prototypes were removed by Configure. */' \
        < ${FREEBSD_SYS}/isofs/cd9660/cd9660_node.h > cd9660_node.h
        echo "" >> cd9660_node.h
d858 1
a858 1
        HPUX_KERNBITS=`getconf _SC_KERNEL_BITS`
d864 1
a864 1
	echo "!!!WARNING!!!   !!!WARNING!!!   !!!WARNING!!!   !!!WARNING!!!"
d872 1
a872 1
	echo "!!!WARNING!!!   !!!WARNING!!!   !!!WARNING!!!   !!!WARNING!!!"
d959 1
a959 1
    # DO IRIX version-specific stuff.
d1060 1
a1060 1
	/usr/sbin/showprods | grep "patchSG0002372" > /dev/null
d1063 8
a1070 2
	  LSOF_CFGF="$LSOF_CFGF -DHASXFSROLLUP=2372"
	fi
a1073 1
      rm -f dialects/irix/irix64hdr/sys/proc.h
d1129 2
a1130 2
        if test $LSOF_VERS -lt 2172
        then
d1132 1
a1132 1
	  echo "!!!WARNING!!!  !!!WARNING!!!  !!!WARNING!!!  !!!WARNING!!!"
d1142 1
a1142 1
	  echo "!!!WARNING!!!   !!!WARNING!!!   !!!WARNING!!!   !!!WARNING!!!"
d1144 1
a1144 1
        fi
d1159 1
a1159 1
	echo "!!!WARNING!!!   !!!WARNING!!!   !!!WARNING!!!   !!!WARNING!!!"
d1170 1
a1170 1
	echo "!!!WARNING!!!   !!!WARNING!!!   !!!WARNING!!!   !!!WARNING!!!"
d1882 1
a1882 1
	SOLARIS_CCDIR="/opt/SUNWspro"
d1884 1
a1884 1
      if test -x ${SOLARIS_CCDIR}/bin/cc
d1886 1
a1886 1
	LSOF_CC=${SOLARIS_CCDIR}/bin/cc
d1888 1
a1888 1
	echo "WARNING: can't find cc in ${LSOF_CCDIR}/bin"
d1920 3
d1995 1
a1995 1
    20600)
d2045 56
d2188 5
@


1.53
log
@Revision 4.30
Drop IRIX 6.4 patch 2536 and 2839 test; allow workaround in
irix/dproc.c to do the job.
@
text
@d18 1
a18 1
# $Id: Configure,v 1.52 98/04/03 13:30:39 abe Exp Locker: abe $
d1026 1
a1026 1
	/usr/sbin/showprods | grep "XFS rollup" > /dev/null
d1029 1
a1029 1
	  LSOF_CFGF="$LSOF_CFGF -DHASXFSROLLUP"
d1032 1
a1032 4
	if test "X$IRIX_XFSROLLUP" = "XY" -o "X$IRIX_XFSROLLUP" = "Xy"
	then
	  LSOF_CFGF="$LSOF_CFGF -DHASXFSROLLUP"
	fi
d1060 1
a1060 1
	/usr/sbin/showprods | grep "XFS rollup #6" > /dev/null
d1063 1
a1063 1
	  LSOF_CFGF="$LSOF_CFGF -DHASXFSROLLUP"
d1066 1
a1066 4
	if test "X$IRIX_XFSROLLUP" = "XY" -o "X$IRIX_XFSROLLUP" = "Xy"
	then
	  LSOF_CFGF="$LSOF_CFGF -DHASXFSROLLUP"
	fi
d2116 13
@


1.52
log
@Revision 4.29
@
text
@d18 1
a18 1
# $Id: Configure,v 1.51 98/03/26 09:39:50 abe Exp Locker: abe $
a1074 14
      /usr/sbin/showprods | grep "Patch SG000" | egrep "2536:|2839:" > /dev/null
      if test $? -eq 0
      then
        if test -r ${LSOF_INCLUDE}/sys/proc.h
        then
	  grep p_glastrun ${LSOF_INCLUDE}/sys/proc.h > /dev/null
	  if test $? -ne 0
	  then
	    sed 's#^} proc_t;#	cpuid_t		p_glastrun;	/* for patches 2536 and 2839 */\
} proc_t;#' < ${LSOF_INCLUDE}/sys/proc.h > dialects/irix/irix64hdr/sys/proc.h
	    echo "Created private <sys/proc.h> for patch 2536 compensation."
	  fi
        fi
      fi
@


1.51
log
@Revision 4.29
Correct AIX C compiler version test.
@
text
@d18 1
a18 1
# $Id: Configure,v 1.50 98/03/24 13:55:42 abe Exp Locker: abe $
d190 2
a191 2
      rm -f cd9660_node.h dialects/uw/uw21/vm/swap.h
      echo "rm -f cd9660_node.h dialects/uw/uw21/vm/swap.h"
d1075 1
a1075 1
      /usr/sbin/showprods | grep "Patch SG0002536:" > /dev/null
d1083 1
a1083 1
	    sed 's#^} proc_t;#	cpuid_t		p_glastrun;	/* for patch 2536 */\
d1406 1
a1406 1
      # Test for Linux __kernel_key_t tupe.
d2392 12
@


1.50
log
@Revision 4.29
Recognize OpenBSD 2.3
@
text
@d18 1
a18 1
# $Id: Configure,v 1.49 98/03/24 07:24:37 abe Exp Locker: abe $
d384 1
a384 1
      cc -c ${LSOF_TMPC}.c -I${LSOF_INCLUDE} -o ${LSOF_TMPC}.o -qlist > /dev/null 2>&1
@


1.49
log
@Revision 4.29
Change Linux /proc test.
@
text
@d18 1
a18 1
# $Id: Configure,v 1.48 98/03/18 14:36:34 abe Exp Locker: abe $
d1605 3
d1619 1
a1619 1
    1020|2000|2010|2020)
@


1.48
log
@Revision 4.29
Add Digital UNIX test for spec_node structure.
@
text
@d18 1
a18 1
# $Id: Configure,v 1.47 98/03/10 07:00:19 abe Exp Locker: abe $
d1136 1
a1136 1
    if test -d /proc/$$/fd
d1138 3
a1140 3
     ls -l /proc/$$/fd | grep -e "-> \[" > /dev/null
     if test $? -ne 0
     then
d1144 17
a1160 1
     fi
@


1.47
log
@Revision 4.28
Add IRIX 6.4 patch 2536 work-around.
@
text
@d18 1
a18 1
# $Id: Configure,v 1.48 98/03/10 06:40:33 abe Exp $
d605 5
@


1.46
log
@Revision 4.27
@
text
@d18 1
a18 1
# $Id: Configure,v 1.45 98/02/16 15:56:26 abe Exp Locker: abe $
d1068 15
@


1.45
log
@Revison 4.26
Add -Olimit for DU.  Change HASPROCFS definitions.
@
text
@d18 1
a18 1
# $Id: Configure,v 1.44 98/02/06 22:00:06 abe Exp Locker: abe $
a155 1
    riscos                  : MIPS RISCos
d769 1
d849 23
a902 1
    LSOF_CFGL=""
d1135 17
a1739 36
    ;;

# Configure for MIPS RISCos.

  riscos)
    if test "X$LSOF_VERS" = "X"
    then

      # If the RISCos version isn't pre-defined, determine it.

      case "`uname -r`" in
      4_52)
	LSOF_VERS=452
	;;
      *)
	echo Unknown RISCos version: `uname -r`
	echo Assuming version is 4_52.
	LSOF_VERS=452
	;;
      esac
    fi

    # Test for a legal RISCos version.

    case $LSOF_VERS in
    452)
      ;;
    *)
      echo "Unsupported RISCos version: $LSOF_VERS"
      rm -f $LSOF_HLP
      exit 1
      ;;
    esac
    LSOF_CFGF="-Olimit 1024 -DRISCOSV=$LSOF_VERS"
    LSOF_CFGL="-lmld -lsun"
    LSOF_DIALECT_DIR=riscos
@


1.44
log
@Revision 4.25
Change FreeBSD method for generating cd9660_node.h.
@
text
@d18 1
a18 1
# $Id: Configure,v 1.43 98/02/06 14:28:06 abe Exp Locker: abe $
d587 1
a587 1
    LSOF_CFGF="-DDUV=$LSOF_VERS -DADVFSV=$LSOF_ADVFSV $LSOF_TMP2"
d656 1
a656 1
      LSOF_CFGF="-DHASPROCFS=proc"
d737 1
a737 1
      LSOF_CFGF="$LSOF_CFGF -DHASPROCFS=proc"
d1399 1
a1399 1
      LSOF_CFGF="$LSOF_CFGF -DHASPROCFS=proc"
d1566 1
a1566 1
      LSOF_CFGF="$LSOF_CFGF -DHASPROCFS=proc"
@


1.43
log
@Revision 4.25
Add RISC/os optimization to C flags.
@
text
@d18 1
a18 1
# $Id: Configure,v 1.42 98/02/06 07:18:44 abe Exp Locker: abe $
d743 10
a752 4
      sed -e '/^ \* Prototypes for ISOFS vnode operations/,$c\
      \ The ISOFS prototypes were removed by Configure. */' \
      < ${FREEBSD_SYS}/isofs/cd9660/cd9660_node.h > cd9660_node.h
      echo "" >> cd9660_node.h
@


1.42
log
@Revision 4.25
Add Ultrix optimization request to C flags.
@
text
@d18 1
a18 1
# $Id: Configure,v 1.41 98/02/05 23:47:02 abe Exp Locker: abe $
d1728 1
a1728 1
    LSOF_CFGF="-DRISCOSV=$LSOF_VERS"
@


1.41
log
@Revision 4.25
Selfish NeXSTEP customization for gcc 2.8.0 on vic.cc.purdue.edu.
@
text
@d18 1
a18 1
# $Id: Configure,v 1.40 98/01/20 08:25:06 abe Exp Locker: abe $
d2233 1
@


1.40
log
@Revision 4.24
Change "Illegal ... version" to "Unsupported ... version".
@
text
@d18 1
a18 1
# $Id: Configure,v 1.39 98/01/16 14:46:15 abe Exp Locker: abe $
d1457 9
a1465 1
    LSOF_CCV=`cc -v 2>&1 | sed -n 's/.*version \(.*\)/\1/p'`
a1466 1
    LSOF_CFGL=""
@


1.39
log
@Revision 4.23
Add Linux base echo.
@
text
@d18 1
a18 1
# $Id: Configure,v 1.38 97/12/30 14:29:56 abe Exp Locker: abe $
d431 1
a431 1
      echo "Illegal BSDI version: $LSOF_VERS"
d688 1
a688 1
      echo "Illegal FreeBSD version: $LSOF_VERS"
d1046 1
a1046 1
      echo "Illegal IRIX version: $LSOF_VERS"
d1371 1
a1371 1
      echo "Illegal NetBSD version: $LSOF_VERS"
d1531 1
a1531 1
      echo "Illegal OpenBSD version: $LSOF_VERS"
d1716 1
a1716 1
      echo "Illegal RISCos version: $LSOF_VERS"
d1804 1
a1804 1
      echo "Illegal SCO OpenServer release: $LSOF_VERS"
d2004 1
a2004 1
      echo "Illegal Solaris version: $LSOF_VERS"
d2258 1
a2258 1
      echo "Illegal Ultrix version: $LSOF_VERS"
@


1.38
log
@Revision 4.23
@
text
@d18 1
a18 1
# $Id: Configure,v 1.37 97/12/15 07:44:43 abe Exp Locker: abe $
d1095 1
d1106 1
@


1.37
log
@Revision 4.22
Add Linux __kernel_key_t test.
@
text
@d18 1
a18 1
# $Id: Configure,v 1.36 97/12/11 15:40:33 abe Exp Locker: abe $
d72 1
d116 1
d1028 13
d1076 1
d1086 1
a1086 1
    # If the Linux C library type isn't predefined, determine it.
d1088 1
a1088 1
    if test "X$LINUX_CLIB" = "X"
d1090 21
a1110 12
      echo -n "Testing C library type with $LSOF_CC ... "
      rm -f ${LSOF_TMPC}.*
      echo "#include <features.h>" > $LSOF_TMPC.c
      echo "main(){" >> $LSOF_TMPC.c
      echo "#if defined(__GLIBC__)" >> $LSOF_TMPC.c
      echo "printf(\"-DGLIBCV=%d\\n\", __GLIBC__);" >> $LSOF_TMPC.c
      echo "#else" >> $LSOF_TMPC.c
      echo "printf(\"\\n\");" >> $LSOF_TMPC.c
      echo "#endif" >> $LSOF_TMPC.c
      echo "return(0); }" >> $LSOF_TMPC.c
      $LSOF_CC ${LSOF_TMPC}.c -I$LSOF_INCLUDE -o ${LSOF_TMPC}.x > /dev/null 2>&1
      if test -x ${LSOF_TMPC}.x
d1112 1
a1112 5
        LINUX_CLIB=`${LSOF_TMPC}.x`
        LSOF_TMP=$?
      else
	LINUX_CLIB=""
        LSOF_TMP=1
d1114 5
a1118 3
      rm -f ${LSOF_TMPC}.*
      echo "done"
      if test $LSOF_TMP -ne 0
d1120 33
a1152 9
	echo "Cannot determine C library type; assuming it is not glibc."
	LINUX_CLIB=""
      else
        if test "X$LINUX_CLIB" = "X"
        then
          echo "The C library type is not glibc."
        else
          echo "The C library type is glibc, version \"$LINUX_CLIB\"."
        fi
d1154 4
a1157 5
    fi
    if test "X$LINUX_CLIB" != "X"
    then
      LSOF_CFGF="$LSOF_CFGF $LINUX_CLIB"
    fi
d1159 1
a1159 2
    # If the Linux kernel directory isn't pre-defined, set its default.
    # If the Linux kernel include directory isn't pre-defined, set its default.
d1161 1
a1161 10
    if test "X$LINUX_KERNEL" = "X"
    then
      LINUX_KERNEL="/usr/src/linux"
    fi
    LSOF_LINUX_INCL=${LINUX_KERNEL}/include/linux
    if test -r ${LINUX_KERNEL}/net/inet/sock.h
    then
      LSOF_TMP1="net/inet/sock.h"
    else
      if test -r ${LINUX_KERNEL}/include/net/sock.h
d1163 1
a1163 2
	LSOF_TMP1="include/net/sock.h"
	LSOF_DINC="$LSOF_DINC -I${LINUX_KERNEL}/include"
d1165 13
a1177 7
	echo "WARNING: cannot find ${LINUX_KERNEL}/net/inet/sock.c or"
	echo "         ${LINUX_KERNEL}/include/net/sock.c.  Lsof may fail to"
	echo "         compile, or it it compiles, it may fail to identify"
	echo "         socket files correctly.  Does this machine have the"
	echo "         Linux kernel source and header files in ${LINUX_KERNEL}?"
	echo "         If it does not, you probably cannot build lsof."
	LSOF_TMP1=""
d1179 1
a1179 5
    fi
    if test "X$LSOF_TMP1" != "X"
    then
      grep protinfo ${LINUX_KERNEL}/$LSOF_TMP1 > /dev/null 2>&1
      if test $? -eq 0
d1181 1
a1181 1
	grep unix_address ${LINUX_KERNEL}/$LSOF_TMP1 > /dev/null 2>&1
d1184 7
a1190 3
	  LSOF_CFGF="$LSOF_CFGF -DHASUNMINSOCK=1"
	else
	  LSOF_CFGF="$LSOF_CFGF -DHASUNMINSOCK=0"
d1193 1
a1193 13
    fi
    grep '*sk;' ${LSOF_LINUX_INCL}/net.h > /dev/null 2>&1
    if test $? -eq 0
    then
      LSOF_CFGF="$LSOF_CFGF -DHAS_SOCKET_SK"
    fi
    if test -r ${LSOF_LINUX_INCL}/netdevice.h
    then
      LSOF_CFGF="$LSOF_CFGF -DHASNETDEVICE_H"
    fi
    if test -r ${LSOF_LINUX_INCL}/autoconf.h
    then
      egrep "^#define[ 	]*CONFIG_KERNEL_ELF" ${LSOF_LINUX_INCL}/autoconf.h > /dev/null
d1196 1
a1196 1
	LSOF_CFGF="$LSOF_CFGF -DKERN_LD_ELF"
d1198 1
a1198 5
    fi
    if test -r ${LSOF_LINUX_INCL}/fs.h
    then
      grep fl_fd ${LSOF_LINUX_INCL}/fs.h > /dev/null
      if test $? -eq 0
d1200 1
a1200 1
	LSOF_CFGF="$LSOF_CFGF -DHAS_FL_FD"
d1202 4
a1205 2
      grep fl_file ${LSOF_LINUX_INCL}/fs.h > /dev/null
      if test $? -eq 0
d1207 5
a1211 1
	LSOF_CFGF="$LSOF_CFGF -DHAS_FL_FILE"
d1213 4
a1216 2
      grep fl_whence ${LSOF_LINUX_INCL}/fs.h > /dev/null
      if test $? -eq 0
d1218 15
a1232 1
	LSOF_CFGF="$LSOF_CFGF -DHAS_FL_WHENCE"
d1234 4
a1237 5
    fi
    if test -r ${LINUX_KERNEL}/include/asm/atomic.h
    then
      grep "typedef struct .* atomic_t;" ${LINUX_KERNEL}/include/asm/atomic.h > /dev/null
      if test $? -eq 0
d1239 5
a1243 1
	LSOF_CFGF="$LSOF_CFGF -DHAS_ATOMIC_T"
d1245 62
a1306 4
    fi
    if test -r ${LINUX_KERNEL}/include/asm/unistd.h
    then
      grep __NR_query_module ${LINUX_KERNEL}/include/asm/unistd.h > /dev/null
d1309 1
a1309 1
	LSOF_CFGF="$LSOF_CFGF -DHAS_QUERY_MODULE"
d1311 4
a1314 4
    fi
    if test $LSOF_VERS -ge 2100
    then
      if test "X$LINUX_LSEEK" = "X"
d1316 2
a1317 35
	echo "Testing lseek() with $LSOF_CC"
	rm -f ${LSOF_TMPC}.*
	echo '#include <stdio.h>' > ${LSOF_TMPC}.c
	echo '#include <fcntl.h>' >> ${LSOF_TMPC}.c
	echo '#include <unistd.h>' >> ${LSOF_TMPC}.c
	echo 'main() { int f;' >> ${LSOF_TMPC}.c
	echo 'if((f=open("/dev/kmem",O_RDONLY,0600))<0)exit(1);' >> ${LSOF_TMPC}.c
	echo 'if(lseek(f,(off_t)-4097,SEEK_CUR)==-1)exit(2);' >> ${LSOF_TMPC}.c
	echo 'exit(0);}' >> ${LSOF_TMPC}.c
	$LSOF_CC ${LSOF_TMPC}.c -I$LSOF_INCLUDE -o ${LSOF_TMPC}.x
	${LSOF_TMPC}.x
	LSOF_TMP=$?
	case $LSOF_TMP in
	0)
	  echo "Lseek() is OK."
	  ;;
	1)
	  echo "Configure for Linux 2.1.x needs read permission to /dev/kmem"
	  echo "in order to test lseek() on it."
	  rm -f ${LSOF_TMPC}.* $LSOF_HLP
	  exit 1
	  ;;
	2)
	  echo "Lseek() is suspect; using private __lseek.s."
	  LSOF_SPMKF="Makefile.lseek"
	  ;;
	*)
	  echo "Unexpected return of $LSOF_TMP from lseek() test program, ${LSOF_TMPC}.c"
	  rm -f $LSOF_HLP
	  exit 1
	  ;;
	esac
	rm -f ${LSOF_TMPC}.*
      else
	if test "X$LINUX_LSEEK" = "XY" -o "X$LINUX_LSEEK" = "Xy"
d1319 1
a1319 1
	  LSOF_SPMKF="Makefile.lseek"
d1322 4
a1325 9
    fi
    grep pidhash_next ${LSOF_LINUX_INCL}/sched.h > /dev/null
    if test $? -eq 0
    then
      LSOF_CFGF="$LSOF_CFGF -DHASHASHPID"
    fi
    if test -r ${LSOF_LINUX_INCL}/dcache.h
    then
      grep "^struct dentry {" ${LSOF_LINUX_INCL}/dcache.h > /dev/null
d1328 1
a1328 1
	LSOF_CFGF="$LSOF_CFGF -DHASDENTRY"
a1330 6
    grep __kernel_key_t ${LSOF_INCLUDE}/linux/types.h > /dev/null
    if test $? -eq 0
    then
      LSOF_CFGF="$LSOF_CFGF -DHASKERNELKEYT"
    fi
    LSOF_DIALECT_DIR=linux
d1432 8
d2457 4
a2460 1
echo "LIB=	${LSOF_LIB}/liblsof.a" >> $LSOF_MKFC
d2476 4
a2479 1
echo "CFGL=	$LSOF_FCFGL -L./$LSOF_LIB -llsof $LSOF_CFGL" >> $LSOF_MKFC
d2502 4
a2505 1
cp $LSOF_MKFC ${LSOF_LIB}/$LSOF_LIBMKF
d2507 2
d2510 2
a2511 2
# Put optional archiver and randomizing strings in ${LSOF_LIB}/$LSOF_LIBMKF.
# Add its skeleton section.
d2513 14
a2526 4
echo "" >> ${LSOF_LIB}/$LSOF_LIBMKF
if test "X$LSOF_AR" != "X"
then
  echo "AR=	$LSOF_AR" >> ${LSOF_LIB}/$LSOF_LIBMKF
a2527 7
if test "X$LSOF_RANLIB" != "X"
then
  echo "RANLIB=	$LSOF_RANLIB" >> ${LSOF_LIB}/$LSOF_LIBMKF
fi
echo "" >> ${LSOF_LIB}/$LSOF_LIBMKF
cat ${LSOF_LIB}/$LSOF_LIBMKFSKEL >> ${LSOF_LIB}/$LSOF_LIBMKF
echo $LSOF_MKFC and ${LSOF_LIB}/$LSOF_LIBMKF created.
@


1.36
log
@Revision 4.22
@
text
@d18 1
a18 1
# $Id: Configure,v 1.35 97/12/01 13:04:19 abe Exp Locker: abe $
d1255 1
a1255 1
      grep "^struct dentry {" ${LSOF_LINUX_INCL}/dcache.h
d1260 5
@


1.35
log
@Revision 4.21
Recognize NetBSD 1.3
@
text
@d18 1
a18 1
# $Id: Configure,v 1.34 97/11/24 15:37:15 abe Exp Locker: abe $
d444 1
a444 1
    LSOF_CFGL="-lkvm"
d451 4
d1543 1
a1543 1
    LSOF_CCV="`cc -V 2>&1`"
d1569 1
a1569 1
	LSOF_CFGL="-lelf -linet -lnsl -lseq"
d1571 1
a1571 1
	LSOF_CFGL="-lelf -lnsl -lseq -lsocket"
d1585 1
a1585 1
      LSOF_CFGL="-linet -lnsl -lseq"
d1689 1
a1689 1
      LSOF_CFGL="-lsocket -lc_s"
d1694 1
a1694 1
      LSOF_CFGL="-lsocket -lc_s"
d1700 1
a1700 1
      LSOF_CFGL="-lsocket -lc_s"
d1706 1
a1706 1
      LSOF_CFGL="-lsocket -lc_s"
d1711 1
a1711 1
      LSOF_CFGL="-lsocket -lc_s"
d1716 1
a1716 1
      LSOF_CFGL="-lsocket -lc_s"
@


1.34
log
@Revision 4.21
Add IRIX 5.3 NFS kernel patch rollup test.
@
text
@d18 1
a18 1
# $Id: Configure,v 1.33 97/11/17 15:29:07 abe Exp Locker: abe $
d1279 3
d1293 1
a1293 1
    1000|1010|1020)
@


1.33
log
@Revision 4.21
Add BSDI 4.0 recognition.
@
text
@d18 1
a18 1
# $Id: Configure,v 1.32 97/11/10 08:20:32 abe Exp Locker: abe $
d936 13
@


1.32
log
@Revision 4.20
Refine DU tag_to_path() test fir AdvFS.
@
text
@d18 1
a18 1
# $Id: Configure,v 1.31 97/11/06 09:45:30 abe Exp Locker: abe $
d412 3
d426 1
a426 1
    20000|20100|30000|30100)
@


1.31
log
@Revision 4.20
@
text
@d18 1
a18 1
# $Id: Configure,v 1.30 97/11/03 10:37:27 abe Exp Locker: abe $
d585 1
a585 1
    if test $LSOF_VERS -ge 40000 -a $LSOF_ADVFSV -ge 400
d587 6
a592 1
      if test -r /usr/shlib/libmsfs.so
d594 1
a595 1
	LSOF_CFGF="$LSOF_CFGF -DHASLIBMSFS"
@


1.30
log
@Revision 4.20
@
text
@d18 1
a18 1
# $Id: Configure,v 1.29 97/10/24 19:01:03 abe Exp Locker: abe $
d585 8
@


1.29
log
@Revision 4.18
Accept OpenBSD 2.2.  Revise Pyramid configuration for RM600.
@
text
@d18 1
a18 1
# $Id: Configure,v 1.28 97/10/14 08:10:56 abe Exp Locker: abe $
d406 1
a406 1
      3.*)
d409 3
d423 1
a423 1
    20000|20100|30000)
@


1.28
log
@Revision 4.17
Add Linux dentry struct test.
@
text
@d18 1
a18 1
# $Id: Configure,v 1.27 97/09/23 09:21:49 abe Exp Locker: abe $
d1396 3
d1410 1
a1410 1
    1020|2000|2010)
d1413 1
a1413 1
      echo "Illegal OpenBSD versio: $LSOF_VERS"
d1454 1
a1454 1
      LSOF_DINC="$LSOF_DINC -I$OPENBSD_SYS"
d1494 8
d2326 1
a2326 1
if test "X$LSOF_CC" != "X"
d2328 1
a2328 3
  echo "CC=	$LSOF_CC" >> $LSOF_MKFC
else
  echo "CC=	cc" >> $LSOF_MKFC
d2330 1
@


1.27
log
@Revision 4.16
Add Linux C library test.
@
text
@d18 1
a18 1
# $Id: Configure,v 1.26 97/08/15 08:13:45 abe Exp Locker: abe $
d1216 8
@


1.26
log
@Revision 4.15
@
text
@d18 1
a18 1
# $Id: Configure,v 1.25 97/07/28 08:15:26 abe Exp Locker: abe $
d1034 43
d1462 1
@


1.25
log
@Revision 4.15
Align -help display.
@
text
@d18 1
a18 1
# $Id: Configure,v 1.24 97/07/22 10:53:03 abe Exp Locker: abe $
d1772 1
a1772 1
      if test "X$SOLARIS_26VERS" = "X"
d1774 7
a1780 5
	SOLARIS_26VERS=`uname -v`
      fi
      case $SOLARIS_26VERS in
      Beta_Update)
	if test "X$SOLARIS_26PR_GWINDOWS" = "X"
d1782 1
a1782 16
	  rm -f ${LSOF_TMPC}.*
	  echo "#define _KMEMUSER" > ${LSOF_TMPC}.c
	  echo "#include <sys/proc/prdata.h>" >> ${LSOF_TMPC}.c
	  echo "main(){" >> ${LSOF_TMPC}.c
	  echo "enum prnodetype p=PR_GWINDOWS;}" >> ${LSOF_TMPC}.c
	  echo "Testing prdata.h for PR_GWINDOWS, using $LSOF_CC"
	  if test "X$LSOF_CC" = "Xgcc"
	  then
	    $LSOF_CC ${LSOF_TMPC}.c -o ${LSOF_TMPC}.x  > /dev/null 2>&1
	  else
	    $LSOF_CC ${LSOF_TMPC}.c -I$LSOF_INCLUDE -o ${LSOF_TMPC}.x  > /dev/null 2>&1
	  fi
	  if test $? -eq 0
	  then
	    LSOF_CFGF="$LSOF_CFGF -DHASPR_GWINDOWS"
	  fi
d1784 1
a1784 4
	  if test "X$SOLARIS_26PR_GWINDOWS" = "XY" -o "X$SOLARIS_26PR_GWINDOWS" = "Xy"
	  then
	    LSOF_CFGF="$LSOF_CFGF -DHASPR_GWINDOWS"
	  fi
d1786 1
a1786 1
	if test "X$SOLARIS_26PR_LDT" = "X"
d1788 19
a1806 17
	  rm -f ${LSOF_TMPC}.*
	  echo "#define _KMEMUSER" > ${LSOF_TMPC}.c
	  echo "#include <sys/proc/prdata.h>" >> ${LSOF_TMPC}.c
	  echo "main(){" >> ${LSOF_TMPC}.c
	  echo "enum prnodetype p=PR_LDT;}" >> ${LSOF_TMPC}.c
	  echo "Testing prdata.h for PR_LDT, using $LSOF_CC"
	  if test "X$LSOF_CC" = "Xgcc"
	  then
	    $LSOF_CC ${LSOF_TMPC}.c -o ${LSOF_TMPC}.x > /dev/null 2>&1
	  else
	    $LSOF_CC ${LSOF_TMPC}.c -I$LSOF_INCLUDE -o ${LSOF_TMPC}.x > /dev/null 2>&1
	  fi
	  if test $? -eq 0
	  then
	    LSOF_CFGF="$LSOF_CFGF -DHASPR_LDT"
	  fi
	  rm -f ${LSOF_TMPC}.*
d1808 1
a1808 4
	  if test "X$SOLARIS_26PR_LDT" = "XY" -o "X$SOLARIS_26PR_LDT" = "Xy"
	  then
	    LSOF_CFGF="$LSOF_CFGF -DHASPR_LDT"
	  fi
d1810 11
a1820 7
	;;
      *)
	echo Unknown Solaris 2.6 release: $SOLARIS_26VERS
	 rm -f $LSOF_HLP
	 exit 1
	 ;;
      esac
d1892 5
d1899 6
a1904 3
	LSOF_CFGF="$LSOF_CFGF -DHASVXFS=200"
      else
	LSOF_CFGF="$LSOF_CFGF -DHASVXFS=100"
@


1.24
log
@Revision 4.14
Add -d option to Configure.
@
text
@d18 1
a18 1
# $Id: Configure,v 1.23 97/07/09 19:54:52 abe Exp Locker: abe $
d136 4
a139 4
  <options>:  -clean       : clean up previous configuration
              -d|-dialects : display a list of supported dialect versions
              -h|-help     : display help information
              -n           : avoid AFS, customization, and inventory checks
d141 18
a158 18
    aix|aixgcc                : IBM AIX xlc (aix) or gcc (aixgcc)
    bsdi                      : BSDI BSD/OS
    digital_unix|du|decosf    : Digital UNIX (nee DEC OSF/1)
    freebsd                   : FreeBSD
    hpux|hpuxgcc              : HP-UX cc (hpux) or gcc (hpuxgcc)
    irix                      : SGI IRIX
    linux                     : Linux
    netbsd                    : NetBSD
    nextstep|next|ns|nxt      : NEXTSTEP
    openbsd                   : OpenBSD
    osr|sco                   : SCO OpenServer
    pyramid|pyr               : Pyramid DC/OSx and Reliant UNIX
    ptx                       : Sequent PTX
    riscos                    : MIPS RISCos
    solaris|solariscc         : Solaris gcc (solaris) or cc (solariscc)
    sunos|sunoscc             : SunOS gcc (sunos) or cc (sunoscc)
    ultrix                    : Ultrix
    unixware|uw               : SCO UnixWare
@


1.23
log
@Revision 4.13
Improve DU configuration subdirectory handling.
@
text
@d18 1
a18 1
# $Id: Configure,v 1.22 97/07/09 17:12:33 abe Exp $
d136 5
a140 5
  <options> may be:
    -clean     : clean up previous configuration
    -h|-help   : display help information
    -n         : avoid AFS, customization, and inventory checks
  <target-dialect> may be:
d145 1
a145 1
    hpux|hpuxgcc              : HP-UX 8 cc (hpux) or gcc (hpuxgcc)
d196 25
@


1.22
log
@Revision 4.13
@
text
@d18 1
a18 1
# $Id: Configure,v 1.21 97/06/27 07:59:56 abe Exp Locker: abe $
d497 5
a501 3
files specific to this machine's configuration found in that directory.  Lsof
may be able to use the BINARY subdirectory, if it exists; you can tell lsof
to use BINARY if you can't find anything else appropriate.
@


1.21
log
@Revision 4.13
Eliminate -lucb for Pyramid.
@
text
@d18 1
a18 1
# $Id: Configure,v 1.20 97/06/23 17:28:53 abe Exp Locker: abe $
d141 18
a158 23
    aix        : IBM AIX, using IBM's xlc
    aixgcc     : IBM AIX 4.1 and above, using gcc
    bsdi       : BSDI BSD/OS 2.0, 2.0.1, 2.1, and 3.0
    decosf     : DEC OSF/1 2.0, 3.0, 3.2, and 4.0-BETA
    freebsd    : FreeBSD 1.1.5.1, 2.0, 2.0.5, 2.1, 2.1.5, 2.2, and 3.0
    hpux       : HP-UX 8, 9, 10.01, 10.10, or 10.20, using HP C compiler
    hpuxgcc    : HP-UX 8, 9, 10.01, 10.10, or 10.20, using gcc
    irix       : SGI IRIX 5.3, 6.0, 6.0.1, and 6.[1234]
    linux      : Linux 2.0.27, 2.1.2[89], and 2.1.3[45]
    netbsd     : NetBSD 1.0, 1.1, and 1.2 for Intel and Sparc-based systems
    next3      : NEXTSTEP 3.[0123], all architectures
    openbsd    : OpenBSD 1.2, 2.0, and 2.1
    pyramid    : Pyramid DC/OSx 1.1 and Reliant UNIX 1.1
    ptx        : Sequent PTX 2.1.[1569], 4.0.[23], 4.1.[024], 4.2[.1], and
	         4.[34]
    riscos     : RISCos 4.52 for RS2030
    sco        : SCO OpenServer 1.1, 3.0, and 5.0.[024]
    solaris    : Solaris 2.[12345] and 2.5.1, using gcc
    solariscc  : Solaris 2.[12345] and 2.5.1, using Sun's cc
    sunos      : SunOS 4.1.3, using gcc
    sunoscc    : SunOS 4.1.3, using Sun's cc
    ultrix     : Ultrix 4.2, 4.3, 4.4, or 4.5
    unixware   : SCO UnixWare 2.1 and 2.1.[12]
d189 2
a190 2
      rm -f cd9660_node.h dialects/unixware/uw21/vm/swap.h
      echo "rm -f cd9660_node.h dialects/unixware/uw21/vm/swap.h"
d417 1
a417 1
# Configure for DEC OSF/1 (aka Digital UNIX).
d419 1
a419 1
  decosf)
d423 1
a423 1
      # If the DEC OSF/1 version isn't predefined, determine it.
d439 1
a439 1
	echo "WARNING: unknown OSF/1 version; assuming version is 2.0"
d445 1
a445 1
    # Do DEC OSF/1 version-specific stuff.
d463 1
a463 1
	echo "WARNING: unknown OSF/1 version: $LSOF_VERS"
d468 1
a468 1
    if test "X$DECOSF_SYSDIR" = "X"
d470 1
a470 1
      DECOSF_SYSDIR=$LSOF_TMP1
d473 1
a473 1
    if test "X$DECOSF_CDIR" = "X"
d482 1
a482 1
      LSOF_CDIR=$DECOSF_CDIR
d487 1
a487 1
      if test -d ${DECOSF_SYSDIR}/$LSOF_CDIR
d489 1
a489 1
	echo "Using header files in ${DECOSF_SYSDIR}/$LSOF_CDIR"
d494 1
a494 1
Please enter the name of the subdirectory in $DECOSF_SYSDIR that contains the
d503 1
a503 1
	echo "$DECOSF_SYSDIR contains:"
d505 1
a505 1
	ls -CF $DECOSF_SYSDIR
d509 1
a509 1
	if test "X$LSOF_CDIR" = "X" -o ! -d ${DECOSF_SYSDIR}/$LSOF_CDIR
d512 1
a512 1
	  echo Cannot access directory ${DECOSF_SYSDIR}/$LSOF_CDIR.
d519 1
a519 1
    if test "X$DECOSF_ADVFSV" = "X"
d546 1
a546 1
      LSOF_ADVFSV=$DECOSF_ADVFSV
d548 2
a549 2
    LSOF_CFGF="-DOSF1V=$LSOF_VERS -DADVFSV=$LSOF_ADVFSV $LSOF_TMP2"
    if test "X$DECOSF_SYSINC" = "X"
d551 1
a551 1
      DECOSF_SYSINC="/usr/sys/include"
d553 1
a553 1
    LSOF_DINC="$LSOF_DINC -I${DECOSF_SYSDIR}/$LSOF_CDIR -I$DECOSF_SYSINC"
d555 1
a555 1
    LSOF_DIALECT_DIR=osf
d830 1
a830 1
    if test ! -x dialects/sgi/MkKernOpts
d832 1
a832 1
      echo "Can't execute dialects/sgi/MkKernOpts"
d884 1
a884 1
      LSOF_DINC="$LSOF_DINC -I`pwd`/dialects/sgi/irix5hdr"
d887 1
a887 1
      LSOF_CFGF="-xansi -DIRIXV=$LSOF_VERS `dialects/sgi/MkKernOpts $LSOF_VERS`"
d889 1
a889 1
      LSOF_DINC="$LSOF_DINC -I`pwd`/dialects/sgi/irix5hdr"
d893 1
a893 1
      LSOF_CFGF="$LSOF_CFGF `dialects/sgi/MkKernOpts $LSOF_VERS`"
d895 1
a895 1
      LSOF_DINC="$LSOF_DINC -I`pwd`/dialects/sgi/irix6hdr"
d899 1
a899 1
      LSOF_CFGF="$LSOF_CFGF `dialects/sgi/MkKernOpts $LSOF_VERS`"
d901 1
a901 1
      LSOF_DINC="$LSOF_DINC -I`pwd`/dialects/sgi/irix6hdr"
d909 1
a909 1
      LSOF_CFGF="$LSOF_CFGF `dialects/sgi/MkKernOpts $LSOF_VERS`"
d911 1
a911 1
      LSOF_DINC="$LSOF_DINC -I`pwd`/dialects/sgi/irix61hdr -I${LSOF_INCLUDE}/sys/fs"
d924 1
a924 1
      LSOF_CFGF="$LSOF_CFGF `dialects/sgi/MkKernOpts $LSOF_VERS`"
d950 1
a950 1
      LSOF_CFGF="$LSOF_CFGF `dialects/sgi/MkKernOpts $LSOF_VERS`"
d963 1
a963 1
      LSOF_CFGF="$LSOF_CFGF `dialects/sgi/MkKernOpts $LSOF_VERS`"
d965 1
a965 1
      LSOF_DINC="$LSOF_DINC -I`pwd`/dialects/sgi/irix64hdr"
d979 13
a991 1
    LSOF_DIALECT_DIR=sgi
d1231 15
d1248 1
a1248 1
    LSOF_DIALECT_DIR=netbsd
d1251 1
a1251 1
# Configure for NeXTSTEP 3.x.
d1253 1
a1253 1
  next3)
d1264 1
a1264 1
    LSOF_DIALECT_DIR=next
d1386 1
a1386 1
    LSOF_DIALECT_DIR=netbsd
d1391 1
a1391 1
  pyramid)
d1508 1
a1508 1
      echo "Illeagl RISCos version: $LSOF_VERS"
d1520 1
a1520 1
  sco)
d1525 1
a1525 1
      # If the SCO version isn't predefined, determine it.
d1548 1
a1548 1
	echo Unknown SCO Unix release: `uname -X | grep Release`
d1555 1
a1555 1
    # Do SCO version-specific stuff.
d1596 1
a1596 1
      echo "Illegal SCO version: $LSOF_VERS"
d1601 2
a1602 2
    LSOF_CFGF="-DSCOV=$LSOF_VERS $LSOF_CFGF"
    if test "X$SCO_STATLSTAT" = "X"
d1611 1
a1611 1
      if test "X$SCO_STATLSTAT" = "XY" -o "X$SCO_STATLSTAT" = "Xy"
d1622 1
a1622 1
      LSOF_DINC="$LSOF_DINC -I`pwd`/dialects/sco/include"
d1624 1
a1624 1
    LSOF_DIALECT_DIR=sco
d2112 1
a2112 1
  unixware)
d2127 1
a2127 1
      LSOF_DINC="$LSOF_DINC -I`pwd`/dialects/unixware/uw21"
d2130 1
a2130 1
	(cd ./dialects/unixware/uw21/vm; rm -f swap.h; ln -s ${LSOF_INCLUDE}/sys/swap.h swap.h)
d2144 1
a2144 1
    LSOF_DIALECT_DIR=unixware
@


1.20
log
@Revision 4.12
@
text
@d18 1
a18 1
# $Id: Configure,v 1.19 97/06/23 09:42:05 abe Exp Locker: abe $
d1391 1
a1391 1
    LSOF_CFGL="-lc -lsocket -lnsl -lelf -L/usr/ucblib -lucb"
@


1.19
log
@Revision 4.12
Add cross-configuration support.
@
text
@d18 1
a18 1
# $Id: Configure,v 1.18 97/06/12 18:50:55 abe Exp $
d163 1
a163 1
    unixware   : SCO UnixWare 2.1 and 2.1.1
d2104 1
a2104 1
    20100|20101)
@


1.18
log
@Revision 4.11
@
text
@d7 6
d18 1
a18 1
# $Id: Configure,v 1.17 97/06/08 08:20:23 abe Exp Locker: abe $
d20 1
a20 1
#LSOF_DISTRIBKVM may be instroduced through the environment to specify the
d51 1
d69 2
d72 2
d77 1
d85 2
a86 1
#	$LSOF_VERS	    Unix dialect version
d88 4
a102 1
LSOF_DINC=""
d107 7
d115 2
d124 4
a127 1
LSOF_VERS=""
d162 1
a163 1
    ultrix     : Ultrix 4.2, 4.3, 4.4, or 4.5
d238 1
a238 1
    if test -x /usr/bin/oslevel
d240 16
a255 10
      echo "Determining AIX version with /usr/bin/oslevel"
      echo "This may take a while, depending on your maintenance level."
      LSOF_VERS=`/usr/bin/oslevel | sed 's/[^0-9]*\(.*\)/\1/' | sed 's/\.//g'`
      echo "Oslevel reports the version is $LSOF_VERS."
    else
      LSOF_VERS=`uname -rv | awk '{printf "%d%d00\n",\$2,\$1}'`
      echo "WARNING: can't execute /usr/bin/oslevel; uname -rv reports the"
      echo "         version is $LSOF_VERS; edit CFGF in the Makefile to correct"
      echo "         the terminating 00; it should be 10 X the last AIX "
      echo "         version component -- e.g., 40 for AIX 3.2.4."
d277 1
a277 1
    if test -r /usr/vice/etc/ThisCell
d301 1
a301 1
	LSOF_DINC="-I`cat ./AFSHeaders`"
d307 1
a307 1
    if test -d /usr/include/nfs
d320 5
d331 1
a331 1
	  if ! ${LSOF_TMPC}.x
d333 3
a335 6
	      echo "Applying gcc AIX 4.1+ user struct alignment hack"
	      rm -rf ./dialects/aix/aix${LSOF_VERS}
	      mkdir ./dialects/aix/aix${LSOF_VERS}
	      mkdir ./dialects/aix/aix${LSOF_VERS}/sys
	      sed 's/U_irss\[/dummy_for_alignment, U_irss\[/' < /usr/include/sys/user.h > ./dialects/aix/aix${LSOF_VERS}/sys/user.h
	      LSOF_CFGF="$LSOF_CFGF -U_LONG_LONG -I`pwd`/dialects/aix/aix${LSOF_VERS}"
d338 17
d357 3
d363 1
a363 1
      cc -c ${LSOF_TMPC}.c -o ${LSOF_TMPC}.o -qlist > /dev/null 2>&1
d374 6
a379 1
    case "`uname -r`" in
d394 13
d408 2
a409 2
    LSOF_CFGF="-DBSDIV=${LSOF_VERS}"
    if test -r /usr/include/miscfs/fdesc/fdesc.h
d413 1
a413 1
    grep -q nc_vpid /usr/include/sys/namei.h
d425 6
a430 1
    case "`uname -r`" in
a432 1
	LSOF_SYSDIR=/sys
a435 2
	LSOF_TMP1=-DUSELOCALREADDIR
	LSOF_SYSDIR=/sys
a438 2
	LSOF_TMP1=-DUSELOCALREADDIR
	LSOF_SYSDIR=/sys
a441 1
	LSOF_SYSDIR=/usr/sys
a445 1
	LSOF_SYSDIR=/sys
d447 25
d473 4
d478 1
a478 2
    LSOF_CDIR=`expr $LSOF_HOST : '\([^\.]*\)\..*$'`
    if test "X$LSOF_CDIR" = "X"
d480 8
a487 1
      LSOF_CDIR=$LSOF_HOST
a488 1
    LSOF_CDIR=`echo $LSOF_CDIR | tr a-z A-Z`
d492 1
a492 1
      if test -d ${LSOF_SYSDIR}/$LSOF_CDIR
d494 1
a494 1
	echo "Using header files in ${LSOF_SYSDIR}/$LSOF_CDIR"
d499 1
a499 1
Please enter the name of the subdirectory in $LSOF_SYSDIR that contains the
d508 1
a508 1
	echo "$LSOF_SYSDIR contains:"
d510 1
a510 1
	ls -CF $LSOF_SYSDIR
d514 1
a514 1
	if test "X$LSOF_CDIR" = "X" -o ! -d ${LSOF_SYSDIR}/$LSOF_CDIR
d517 1
a517 1
	  echo Cannot access directory ${LSOF_SYSDIR}/$LSOF_CDIR.
d521 8
a528 3
    echo "Determining the ADVFS version -- this will take a while."
    LSOF_ADVFSV=`/usr/sbin/setld -i | grep "^OSFADVFSBIN[0-9]" | sed 's/\([^ ]*\).*/\1/' | sort -u | tail -1 | sed 's/OSFADVFSBIN//'`
    case $LSOF_ADVFSV in
d549 10
a558 3
    esac
    LSOF_CFGF="-DOSF1V=$LSOF_VERS -DADVFSV=$LSOF_ADVFSV $LSOF_TMP1"
    LSOF_DINC="-I${LSOF_SYSDIR}/$LSOF_CDIR -I/usr/sys/include"
d567 42
a608 2
    case "`uname -r`" in
    1.*)
a609 1
      LSOF_VERS=100
d611 2
a612 8
      LSOF_DINC="-I`pwd`/dialects/freebsd/include"
      LSOF_N_UNIXV=/386bsd
      ;;
    2.0-*)
      LSOF_CFGL="-lkvm"
      LSOF_VERS=200
      LSOF_N_UNIXV=`/usr/sbin/sysctl -n kern.bootfile`
      if test "X$LSOF_N_UNIXV" = "X"
d614 3
a616 1
	LSOF_N_UNIXV=/kernel
d619 1
a619 2
    2.0.5-*)
      LSOF_VERS=205
a620 5
      LSOF_N_UNIXV=`/usr/sbin/sysctl -n kern.bootfile`
      if test "X$LSOF_N_UNIXV" = "X"
      then
	LSOF_N_UNIXV=/kernel
      fi
d622 1
a622 2
    2.1*)
      LSOF_VERS=210
d624 1
a624 2
      LSOF_N_UNIXV=`/usr/sbin/sysctl -n kern.bootfile`
      if test "X$LSOF_N_UNIXV" = "X"
a625 13
	LSOF_N_UNIXV=/kernel
      fi
      ;;
    2.2*)
      LSOF_VERS=220
      LSOF_CFGL="-lkvm"
      LSOF_N_UNIXV=`/usr/sbin/sysctl -n kern.bootfile`
      if test "X$LSOF_N_UNIXV" = "X"
      then
	LSOF_N_UNIXV=/kernel
      fi
      if test -r /usr/include/vm/lock.h
      then
d629 1
a629 2
    3.0*)
      LSOF_VERS=300
d631 1
a631 2
      LSOF_N_UNIXV=`/usr/sbin/sysctl -n kern.bootfile`
      if test "X$LSOF_N_UNIXV" = "X"
a632 4
	LSOF_N_UNIXV=/kernel
      fi
      if test -r /usr/include/nfs/rpcv2.h
      then
d635 1
a635 1
      if test -r /usr/include/vm/lock.h
d641 3
a643 9
      echo Unknown FreeBSD release: `uname -r`
      echo Assuming FreeBSD 2.x
      LSOF_CFGL="-lkvm"
      LSOF_VERS=200
      LSOF_N_UNIXV=`/usr/sbin/sysctl -n kern.bootfile`
      if test "X$LSOF_N_UNIXV" = "X"
      then
	LSOF_N_UNIXV=/kernel
      fi
d647 1
a647 1
    if test $LSOF_VERS -lt 200
d679 1
a679 1
    if test -d /sys/miscfs/fdesc
d681 4
d688 1
a688 1
    if test -d /sys/miscfs/procfs
d693 1
a693 1
    if test -r /sys/isofs/cd9660/cd9660_node.h
d698 1
a698 1
      < /sys/isofs/cd9660/cd9660_node.h > cd9660_node.h
d702 1
a702 1
    grep -q nc_vpid /usr/include/sys/namei.h
d709 1
a709 1
      LSOF_DINC="-I/sys"
d718 7
a724 1
    LSOF_VERS=`uname -r | awk -F. '{printf "%d%02d",\$2,\$3}'`
d732 1
a732 1
      if test -x /bin/cc
d734 9
a742 1
	LSOF_CC=/bin/cc
d744 1
a744 1
	if test -x /usr/ccs/bin/cc
d746 1
a746 1
	  LSOF_CC=/usr/ccs/bin/cc
d748 2
a749 1
	  echo "No executable cc in /bin or /usr/ccs/bin"
d753 1
a753 1
      what ${LSOF_CC} | grep -q Bundled
d756 1
a756 1
	if test -r /usr/lib/libc.sl
d758 5
a762 1
	  LSOF_FCFGL="-L/usr/lib -lc"
d764 1
a764 1
	  if test -r /lib/libc.sl
d766 1
a766 1
	    LSOF_FCFGL="-L/lib -lc"
d768 4
d777 1
a777 1
    LSOF_CFGF="${LSOF_CFGF} -DHPUXV=$LSOF_VERS"
d780 1
a780 1
      if test -r /etc/conf/x25/x25addrstr.h
d782 6
d789 1
a789 1
	LSOF_DINC="-I/etc/conf"
d792 1
a792 1
    if test -r /usr/include/sys/fs/vx_inode.h -a -r /usr/include/sys/fs/vx_hpux.h
d799 1
a799 1
    if test -r /usr/vice/etc/ThisCell
d811 1
d841 6
a846 1
    case "`uname -r`" in
a848 3
	LSOF_CFGF="-DIRIXV=${LSOF_VERS}"
	LSOF_CFGL="-lmld"
	LSOF_DINC="-I`pwd`/dialects/sgi/irix5hdr"
a851 3
	LSOF_CFGF="-xansi -DIRIXV=${LSOF_VERS} `dialects/sgi/MkKernOpts ${LSOF_VERS}`"
	LSOF_CFGL="-lmld"
	LSOF_DINC="-I`pwd`/dialects/sgi/irix5hdr"
a854 4
	LSOF_CFGF="-DIRIXV=${LSOF_VERS} -woff 1411,1174,1107"
	LSOF_CFGF="$LSOF_CFGF `dialects/sgi/MkKernOpts ${LSOF_VERS}`"
	LSOF_CFGL="-lelf"
	LSOF_DINC="-I`pwd`/dialects/sgi/irix6hdr"
a857 4
	LSOF_CFGF="-DIRIXV=${LSOF_VERS} -woff 1411,1174,1107"
	LSOF_CFGF="$LSOF_CFGF `dialects/sgi/MkKernOpts ${LSOF_VERS}`"
	LSOF_CFGL="-lelf"
	LSOF_DINC="-I`pwd`/dialects/sgi/irix6hdr"
a860 8
	LSOF_CFGF="-DIRIXV=${LSOF_VERS}"
	if test `uname -s` = "IRIX64"
	then
	  LSOF_CFGF="$LSOF_CFGF -mips3"
	fi
	LSOF_CFGF="$LSOF_CFGF `dialects/sgi/MkKernOpts ${LSOF_VERS}`"
	LSOF_CFGL="-lelf"
	LSOF_DINC="-I`pwd`/dialects/sgi/irix61hdr -I/usr/include/sys/fs"
a863 17
	LSOF_CFGF="-xansi -DIRIXV=${LSOF_VERS}"
	if test `uname -s` = "IRIX64"
	then
	  LSOF_CFGF="$LSOF_CFGF -mips3"
	fi
	if test -r /usr/include/cachefs/cachefs_fs.h
	then
	  grep c_metadata /usr/include/cachefs/cachefs_fs.h > /dev/null
	  LSOF_CFGF="$LSOF_CFGF -DHASCACHEFS=$?"
	fi
	LSOF_CFGF="$LSOF_CFGF `dialects/sgi/MkKernOpts ${LSOF_VERS}`"
	LSOF_CFGL="-lelf"
	/usr/sbin/showprods | grep "XFS rollup" > /dev/null
	if test $? -eq 0
	then
	  LSOF_CFGF="$LSOF_CFGF -DHASXFSROLLUP"
	fi
a866 11
	LSOF_CFGF="-xansi -DIRIXV=${LSOF_VERS}"
	if test `uname -s` = "IRIX64"
	then
	  LSOF_CFGF="$LSOF_CFGF -mips3"
	fi
	if test -r /usr/include/cachefs/cachefs_fs.h
	then
	  LSOF_CFGF="$LSOF_CFGF -DHASCACHEFS"
	fi
	LSOF_CFGF="$LSOF_CFGF `dialects/sgi/MkKernOpts ${LSOF_VERS}`"
	LSOF_CFGL="-lelf"
a869 12
	LSOF_CFGF="-xansi -DIRIXV=${LSOF_VERS}"
	if test `uname -s` = "IRIX64"
	then
	  LSOF_CFGF="$LSOF_CFGF -mips3"
	fi
	if test -r /usr/include/cachefs/cachefs_fs.h
	then
	  LSOF_CFGF="$LSOF_CFGF -DHASCACHEFS"
	fi
	LSOF_CFGF="$LSOF_CFGF `dialects/sgi/MkKernOpts ${LSOF_VERS}`"
	LSOF_CFGL="-lelf"
	LSOF_DINC="-I`pwd`/dialects/sgi/irix64hdr"
d876 101
d978 1
a978 1
    if test `uname -s` = "IRIX64"
d991 7
a997 1
    LSOF_VERS=`uname -r|sed 's/\./ /g'|awk '{printf "%d%d%02d",\$1,\$2,\$3}'`
d999 5
a1003 1
    if test -r /usr/src/linux/net/inet/sock.h
d1005 6
a1010 1
      LSOF_CFGL="net/inet/sock.h"
d1012 1
a1012 1
      if test -r /usr/src/linux/include/net/sock.h
d1014 2
a1015 2
	LSOF_CFGL="include/net/sock.h"
	LSOF_DINC="-I/usr/src/linux/include"
d1017 2
a1018 2
	echo "WARNING: cannot find /usr/src/linux/net/inet/sock.c or"
	echo "         /usr/src/linux/include/net/sock.c.  Lsof may fail to"
d1021 1
a1021 1
	echo "         Linux kernel source and header files in /usr/src/Linux?"
d1023 1
a1023 1
	LSOF_CFGL=""
d1026 1
a1026 1
    if test "X$LSOF_CFGL" != "X"
d1028 1
a1028 1
      grep protinfo /usr/src/linux/${LSOF_CFGL} > /dev/null 2>&1
d1031 1
a1031 1
	grep unix_address /usr/src/linux/${LSOF_CFGL} > /dev/null 2>&1
d1034 1
a1034 1
	  LSOF_CFGF="${LSOF_CFGF} -DHASUNMINSOCK=1"
d1036 1
a1036 1
	  LSOF_CFGF="${LSOF_CFGF} -DHASUNMINSOCK=0"
d1040 1
a1040 1
    grep '*sk;' /usr/include/linux/net.h > /dev/null 2>&1
d1043 1
a1043 1
      LSOF_CFGF="${LSOF_CFGF} -DHAS_SOCKET_SK"
d1045 1
a1045 1
    if test -r /usr/include/linux/netdevice.h
d1049 1
a1049 1
    if test -r /usr/src/linux/include/linux/autoconf.h
d1051 1
a1051 1
      egrep "^#define[ 	]*CONFIG_KERNEL_ELF" /usr/src/linux/include/linux/autoconf.h > /dev/null
d1057 1
a1057 1
    if test -r /usr/include/linux/fs.h
d1059 1
a1059 1
      grep fl_fd /usr/include/linux/fs.h > /dev/null
d1064 1
a1064 1
      grep fl_file /usr/include/linux/fs.h > /dev/null
d1069 1
a1069 1
      grep fl_whence /usr/include/linux/fs.h > /dev/null
d1075 1
a1075 1
    if test -r /usr/include/asm/atomic.h
d1077 1
a1077 1
      grep "typedef struct .* atomic_t;" /usr/include/asm/atomic.h > /dev/null
d1083 1
a1083 1
    if test -r /usr/include/asm/unistd.h
d1085 1
a1085 1
      grep __NR_query_module /usr/include/asm/unistd.h > /dev/null
d1093 15
a1107 13
      echo "Testing lseek() with $LSOF_CC"
      rm -f ${LSOF_TMPC}.*
      echo '#include <stdio.h>' > ${LSOF_TMPC}.c
      echo '#include <fcntl.h>' >> ${LSOF_TMPC}.c
      echo '#include <unistd.h>' >> ${LSOF_TMPC}.c
      echo 'main() { int f;' >> ${LSOF_TMPC}.c
      echo 'if((f=open("/dev/kmem",O_RDONLY,0600))<0)exit(1);' >> ${LSOF_TMPC}.c
      echo 'if(lseek(f,(off_t)-4097,SEEK_CUR)==-1)exit(2);' >> ${LSOF_TMPC}.c
      echo 'exit(0);}' >> ${LSOF_TMPC}.c
      $LSOF_CC ${LSOF_TMPC}.c -o ${LSOF_TMPC}.x
      ${LSOF_TMPC}.x
      LSOF_TMP=$?
      case $LSOF_TMP in
d1114 1
a1114 1
	  rm -f ${LSOF_TMPC}.*
d1123 1
d1126 8
a1133 2
      esac
      rm -f ${LSOF_TMPC}.*
d1135 1
a1135 1
    grep pidhash_next /usr/include/linux/sched.h > /dev/null
a1139 1
    LSOF_CFGL=""
d1147 6
a1152 1
    case "`uname -r`" in
d1167 13
d1181 2
a1182 2
    LSOF_CFGF="-DNETBSDV=${LSOF_VERS}"
    if test -r /usr/include/nfs/nfsproto.h
d1187 1
a1187 1
    if test -d /sys/miscfs/fdesc
d1189 4
d1196 1
a1196 1
    if test -d /sys/miscfs/procfs
d1201 1
a1201 1
    if test -d /sys/isofs/cd9660
d1206 1
a1206 1
    if test -r /sys/miscfs/kernfs/kernfs.h
d1208 1
a1208 1
      grep -q "kt_name;" /sys/miscfs/kernfs/kernfs.h
d1217 1
a1217 1
      LSOF_DINC="-I/usr/include -I/sys"
d1219 1
a1219 1
    grep -q nc_vpid /usr/include/sys/namei.h
d1232 7
a1239 1
    LSOF_VERS=`hostinfo | sed -n 's/.*NeXT Mach \([0-9]*\)\.\([0-9]*\).*/\1\2/p'`
d1246 1
a1246 1
    if test -r /usr/vice/etc/ThisCell
d1258 1
d1271 1
a1271 1
	LSOF_DINC="-I`cat ./AFSHeaders`"
d1280 3
d1284 3
a1286 2
    LSOF_CC="gcc"
    case "`uname -r`" in
d1301 13
d1316 1
a1316 1
    if test -r /usr/include/nfs/nfsproto.h
d1321 1
a1321 1
    if test -d /sys/miscfs/fdesc
d1323 4
d1330 1
a1330 1
    if test -d /sys/miscfs/procfs
d1335 1
a1335 1
    if test -d /sys/isofs/cd9660
d1340 1
a1340 1
    if test -r /sys/miscfs/kernfs/kernfs.h
d1342 1
a1342 1
      grep -q "kt_name;" /sys/miscfs/kernfs/kernfs.h
d1351 1
a1351 1
      LSOF_DINC="-I/sys"
d1353 1
a1353 1
    grep -q VT_EXT2FS /usr/include/sys/vnode.h
d1358 1
a1358 1
    grep -q nc_vpid /usr/include/sys/namei.h
d1378 1
a1378 1
    if /bin/test -r /usr/include/sys/fs/vx_fs.h -a -r /usr/include/sys/fs/vx_inode.h
d1382 1
a1382 1
    if /bin/test -r /usr/include/sys/fs/tfs.h
d1386 5
a1390 1
    LSOF_CFGF="${LSOF_CFGF} -Xa"
d1400 7
a1406 1
    LSOF_VERS=`uname -v|awk -F. '{printf "%d%d%d",substr($1,2), $2, $3}'`
d1412 4
d1422 1
a1422 1
      if test -r /usr/conf/uts/nfs/rnode.h
d1430 1
a1430 1
      if test -r /usr/include/nfs/rnode.h
d1437 1
a1437 1
    if test -r /usr/include/sys/cdfsinode.h
d1441 1
a1441 1
    if test -r /usr/include/netinet/in_pcb.h
d1443 1
a1443 1
      grep "inp_laddr;" /usr/include/netinet/in_pcb.h | grep struct > /dev/null
d1449 1
a1449 1
    if test -r /usr/include/sys/vx_inode.h
d1452 1
a1452 1
      if test -r /usr/include/sys/vx_dnlc.h
d1463 6
a1468 1
    case "`uname -r`" in
d1477 13
d1491 1
a1491 1
    LSOF_CFGF="-DRISCOSV=${LSOF_VERS}"
d1500 7
a1506 2
    LSOF_TMP1="`LANG=C_C.C uname -X 2>/dev/null | grep Release | sed 's/Release = \(.*\)/\1/'`"
    case $LSOF_TMP1 in
a1508 3
	LSOF_CFGL="-lsocket -lc_s"
	LSOF_DEBUG="-Ox"
	LSOF_MKC="cp"
a1511 4
	LSOF_CFGF="-nointl"
	LSOF_CFGL="-lsocket -lc_s"
	LSOF_DEBUG="-Ox"
	LSOF_MKC="cp"
a1514 3
	LSOF_CFGF="-nointl"
	LSOF_CFGL="-lsocket -lc_s"
	LSOF_DEBUG="-Ox"
a1517 3
	LSOF_CFGF="-nointl"
	LSOF_CFGL="-lsocket -lc_s"
	LSOF_DEBUG="-Ox"
a1520 3
	LSOF_CFGF="-nointl"
	LSOF_CFGL="-lsocket -lc_s"
	LSOF_DEBUG="-Ox"
a1523 3
	LSOF_CFGF="-belf"
	LSOF_CFGL="-lsocket"
	LSOF_DEBUG="-O3 -Kspace"
a1528 4
	LSOF_CFGF="-nointl"
	LSOF_CFGL="-lsocket -lc_s"
	LSOF_DEBUG="-Ox"
	LSOF_MKC="cp"
d1530 48
d1579 2
a1580 3
    LSOF_CFGF="-DSCOV=${LSOF_VERS} ${LSOF_CFGF}"
    /bin/nm /lib/libc.a | grep statlstat > /dev/null 2>&1
    if test $? -eq 0
d1582 11
a1592 1
      LSOF_CFGF="$LSOF_CFGF -DHAS_STATLSTAT"
d1594 1
a1594 1
    if test -r /usr/include/sys/fs/nfs/rnode.h
d1598 1
a1598 1
    if test ! -r /usr/include/netdb.h
d1600 1
a1600 1
      LSOF_DINC="-I`pwd`/dialects/sco/include"
d1610 1
a1610 1
      if test -x /opt/SUNWspro/bin/cc
d1612 5
a1616 1
	LSOF_CC=/opt/SUNWspro/bin/cc
d1618 1
d1622 1
a1622 1
      LSOF_CCV=`${LSOF_CC} -V 2>&1 | sed -n 's/^cc: \(.*\)/\1/p'`
d1626 2
d1629 1
a1629 5
# Solaris patch 101318-32 creates a longer kernel tcp_s structure,
# and 101318-45 changes the way the vnode's v_filocks member is
# handled.  The following code creates a symbol definition for
# patch 101318 whose value is the patch level.  No symbol is defined
# if the patch level is not greater than zero.
d1631 4
a1634 1
    case "`uname -r`" in
d1637 34
a1670 1
	LSOF_RANLIB=""
d1672 1
a1672 2
	: ${LSOF_PL:=0}
	if test $LSOF_PL -gt 0
d1674 1
a1674 1
	  LSOF_CFGF="-DP101318=$LSOF_PL"
d1676 12
a1687 7
	;;
      5.[0-2])
	  LSOF_VERS="20300"
	  ;;
      5.4)
	LSOF_RANLIB=""
	LSOF_VERS="20400"
d1689 1
a1689 2
	: ${LSOF_PL:=0}
	if test $LSOF_PL -ge 32
d1691 9
d1701 1
a1701 2
	  : ${LSOF_PL:=0}
	  if test $LSOF_PL -ge 2
d1703 1
a1703 7
	    echo "WARNING: your Solaris 2.4 system appears to have patches 101945-32 and 102303-2"
	    echo "         installed.  This probably means the NUM_*_VECTORS definitions in"
	    echo "         <sys/auxv.h> don't match the ones used to build your kernel.  Consult"
	    echo "         the Sun Problems section of the 00FAQ file of the lsof distribution"
	    echo "         for an explanation of the work-around being supplied by including"
	    echo "         the header file ./dialects/sun/include/sys/auxv.h."
	    LSOF_DINC="-I`pwd`/dialects/sun/include"
d1705 2
d1708 31
a1738 17
	;;
      5.5)
	  LSOF_VERS="20500"
	  ;;
      5.5.1)
	  LSOF_VERS="20501"
	  ;;
      5.6*)
	  case "`uname -v`" in
	  Beta_Update)
	    LSOF_VERS="20600"
	    rm -f ${LSOF_TMPC}.*
	    echo "#define _KMEMUSER" > ${LSOF_TMPC}.c
	    echo "#include <sys/proc/prdata.h>" >> ${LSOF_TMPC}.c
	    echo "main(){" >> ${LSOF_TMPC}.c
	    echo "enum prnodetype p=PR_GWINDOWS;}" >> ${LSOF_TMPC}.c
	    echo "Testing prdata.h for PR_GWINDOWS, using $LSOF_CC"
d1740 23
a1762 10
	    if test $? -eq 0
	    then
	      LSOF_CFGF="${LSOF_CFGF} -DHASPR_GWINDOWS"
	    fi
	    rm -f ${LSOF_TMPC}.*
	    echo "#define _KMEMUSER" > ${LSOF_TMPC}.c
	    echo "#include <sys/proc/prdata.h>" >> ${LSOF_TMPC}.c
	    echo "main(){" >> ${LSOF_TMPC}.c
	    echo "enum prnodetype p=PR_LDT;}" >> ${LSOF_TMPC}.c
	    echo "Testing prdata.h for PR_LDT, using $LSOF_CC"
d1764 15
a1778 11
	    if test $? -eq 0
	    then
	      LSOF_CFGF="${LSOF_CFGF} -DHASPR_LDT"
	    fi
	    rm -f ${LSOF_TMPC}.*
	    ;;
	  *)
	    echo Unknown Solaris 2.6 release: `uname -v`
	    exit 1
	  esac
	  ;;
d1780 11
a1790 3
	  echo Unknown Solaris version: `uname -r`
	  rm -f $LSOF_HLP
	  exit 1
d1792 1
a1792 1
    LSOF_CFGF="-Dsolaris=${LSOF_VERS} ${LSOF_CFGF}"
d1796 1
a1796 7
    rm -f ${LSOF_TMPC}.*
    echo "#include <sys/vnode.h>" > ${LSOF_TMPC}.c
    echo "main(){" >> ${LSOF_TMPC}.c
    echo "enum vtype p=VSOCK;}" >> ${LSOF_TMPC}.c
    echo "Testing vnode.h for VSOCK, using $LSOF_CC"
    $LSOF_CC ${LSOF_TMPC}.c -o ${LSOF_TMPC}.x > /dev/null 2>&1
    if test $? -eq 0
d1798 21
a1818 1
      LSOF_CFGF="${LSOF_CFGF} -DHAS_VSOCK"
a1819 1
    rm -f ${LSOF_TMPC}.*
d1823 1
a1823 1
    if test -r /usr/vice/etc/ThisCell
d1835 1
d1854 1
a1854 1
    if test -r /usr/include/sys/fs/vx_inode.h
d1856 1
a1856 1
      if test -r /usr/include/sys/fs/vx_sol.h
d1886 1
a1886 1
      if test -x /usr/lang/acc
d1888 5
a1892 1
	LSOF_CC=/usr/lang/acc
d1896 4
a1899 5
      rm -f ${LSOF_TMPC}.*
      echo "main() { const x; }" > ${LSOF_TMPC}.c
      echo "Testing $LSOF_CC for const support"
      ${LSOF_CC} -c ${LSOF_TMPC}.c -o ${LSOF_TMPC}.o > /dev/null 2>&1
      if test $? -ne 0
d1901 19
a1919 1
	LSOF_CFGF="-DNOCONST"
a1920 1
      rm -f ${LSOF_TMPC}.*
d1922 8
a1929 2
    LSOF_VERS=`uname -r | sed 's/\([0-9\.]*\).*/\1/' | awk -F. '{printf "%d%02d%02d", $1, $2, $3}'`
    LSOF_CFGF="$LSOF_CFGF -DSUNOSV=${LSOF_VERS}"
d1939 1
a1939 9
    rm -f ${LSOF_TMPC}.*
    echo "#include <sys/types.h>" > ${LSOF_TMPC}.c
    echo "#include <sys/time.h>" >> ${LSOF_TMPC}.c
    echo "#include <sys/vnode.h>" >> ${LSOF_TMPC}.c
    echo "main(){" >> ${LSOF_TMPC}.c
    echo "enum vtype p=VSOCK;}" >> ${LSOF_TMPC}.c
    echo "Testing vnode.h for VSOCK, using $LSOF_CC"
    $LSOF_CC ${LSOF_TMPC}.c -o ${LSOF_TMPC}.x > /dev/null 2>&1
    if test $? -eq 0
d1941 23
a1963 1
      LSOF_CFGF="${LSOF_CFGF} -DHAS_VSOCK"
a1964 1
    rm -f ${LSOF_TMPC}.*
d1968 1
a1968 1
    if test -r /usr/vice/etc/ThisCell
d1980 1
d1993 1
a1993 1
	LSOF_DINC="-I`cat ./AFSHeaders`"
d2001 6
a2006 1
    case "`uname -r`" in
d2024 13
d2038 16
a2053 12
    LSOF_CFGF="-DULTRIXV=${LSOF_VERS} ${LSOF_CFGF}"
    case "`uname -m`" in
      RISC)
	;;
      VAX)
	LSOF_CFGF="$LSOF_CFGF -DVAXULTRIX"
	;;
      *)
	echo Unknown machine hardware name: `uname -m`
	rm -f $LSOF_HLP
	exit 1
	;;
d2055 4
a2058 1
    if test -r /usr/lib/libdnet.a -a -r /usr/include/netdnet/dn.h
d2060 20
d2092 11
a2102 2
    LSOF_VERS=`uname -v | sed 's/\([0-9\.]*\).*/\1/; s/\./ /g' | awk '{printf "%d%02d%02d\n", $1, $2, $3;}'`
    LSOF_CFGF="-DUNIXWAREV=${LSOF_VERS}"
d2104 17
a2120 16
      20100|20101)
	LSOF_DINC="-I`pwd`/dialects/unixware/uw21"
	if test ! -r /usr/include/vm/swap.h -a -r /usr/include/sys/swap.h
	then
	  (cd ./dialects/unixware/uw21/vm; rm -f swap.h; ln -s /usr/include/sys/swap.h swap.h)
	fi
	if test -r /usr/include/sys/fs/vx_inode.h
	then
	  LSOF_CFGF="${LSOF_CFGF} -DHASVXFS"
	fi
	LSOF_CFGL="-lsocket -lnsl -lelf -lgen"
	;;
      *)
	echo Unsupported UnixWare version: `uname -v`
	exit 1
	;;
d2215 1
a2215 1
# Make $LSOF_MKFC and ${LSOF_LIB}/${LSOF_LIBMKF}.
d2251 1
a2251 1
echo "CFGL=	$LSOF_FCFGL -L./${LSOF_LIB} -llsof $LSOF_CFGL" >> $LSOF_MKFC
d2273 2
a2274 2
rm -f ${LSOF_LIB}/${LSOF_LIBMKF}
cp $LSOF_MKFC ${LSOF_LIB}/${LSOF_LIBMKF}
d2277 1
a2277 1
# Put optional archiver and randomizing strings in ${LSOF_LIB}/${LSOF_LIBMKF}.
d2280 2
a2281 2
echo "" >> ${LSOF_LIB}/${LSOF_LIBMKF}
if test "X${LSOF_AR}" != "X"
d2283 1
a2283 1
  echo "AR=	$LSOF_AR" >> ${LSOF_LIB}/${LSOF_LIBMKF}
d2285 1
a2285 1
if test "X${LSOF_RANLIB}" != "X"
d2287 1
a2287 1
  echo "RANLIB=	$LSOF_RANLIB" >> ${LSOF_LIB}/${LSOF_LIBMKF}
d2289 3
a2291 3
echo "" >> ${LSOF_LIB}/${LSOF_LIBMKF}
cat ${LSOF_LIB}/${LSOF_LIBMKFSKEL} >> ${LSOF_LIB}/${LSOF_LIBMKF}
echo $LSOF_MKFC and ${LSOF_LIB}/${LSOF_LIBMKF} created.
@


1.17
log
@Revision 4.10
@
text
@d12 1
a12 1
# $Id: Configure,v 1.16 97/06/01 12:49:27 abe Exp Locker: abe $
d270 7
d1155 8
@


1.16
log
@Revision 4.09
@
text
@d12 1
a12 1
# $Id: Configure,v 1.15 97/05/23 13:31:04 abe Exp Locker: abe $
d905 5
@


1.15
log
@Revision 4.08
@
text
@d12 1
a12 1
# $Id: Configure,v 1.14 97/05/23 10:15:35 abe Exp Locker: abe $
d127 1
a127 1
                 4.[34]
d150 4
a153 4
        if test -r ${LSOF_LIB}/${LSOF_LIBMKF}
        then
          echo "(cd ${LSOF_LIB}; make -f ${LSOF_LIBMKF} clean)"
          (cd ${LSOF_LIB}; make -f ${LSOF_LIBMKF} clean)
d155 4
a158 4
          if test -r ${LSOF_LIB}/${LSOF_LIBMKF}.skel
          then
            echo "(cd ${LSOF_LIB}; make -f ${LSOF_LIBMKF}.skel clean)"
            (cd ${LSOF_LIB}; make -f ${LSOF_LIBMKF}.skel clean)
d160 1
a160 1
        fi
d166 2
a167 2
      rm -f dialects/unixware/uw21/vm/swap.h
      echo "rm -f dialects/unixware/uw21/vm/swap.h"
d228 2
a229 2
        echo "* Sorry, but gcc can't be used to compile lsof for AIX versions *"
        echo "* less than 4.1, because of possible kernel structure alignment *"
d252 2
a253 2
        if test ! -x ./AFSConfig
        then
d256 4
a259 4
        fi
        ./AFSConfig
        if test $? -eq 0 -a -r ./AFSHeaders -a -r ./AFSVersion
        then
d261 1
a261 1
        fi
d314 1
a314 1
        ;;
d316 2
a317 2
        LSOF_VERS="20100"
        ;;
d322 4
a325 4
        echo Unknown BSDI release: `uname -r`
        echo Assuming BSDI 2.0
        LSOF_VERS="20000"
        ;;
d332 5
d399 2
a400 2
        echo -n "Configuration subdirectory name? "
        read LSOF_CDIR LSOF_EXCESS
d485 4
d498 8
d524 7
a530 7
        echo "Hmmm -- $LSOF_N_UNIXV doesn't appear to be your kernel file."
        echo "Please enter the name of the file in / that contains"
        echo "the kernel for this host.  It must be a regular file,"
        echo "not a directory, and must be executable."
        LSOF_LOOP=1
        while test $LSOF_LOOP = 1
        do
d536 2
a537 2
          echo -n "Kernel file name? "
          read LSOF_N_UNIXV LSOF_EXCESS
d546 1
a546 1
        done
d562 1
a562 1
    if test -d /sys/isofs/cd9660
d564 5
a569 1
      LSOF_TMP1=1
d571 5
d599 1
a599 1
        if test -x /usr/ccs/bin/cc
d628 2
a629 2
        LSOF_CFGF="$LSOF_CFGF -DHPUX_CCITT"
        LSOF_DINC="-I/etc/conf"
d648 2
a649 2
        if test ! -x ./AFSConfig
        then
d652 4
a655 4
        fi
        ./AFSConfig
        if test $? -eq 0 -a -r ./AFSHeaders -a -r ./AFSVersion
        then
d657 1
a657 1
        fi
d710 4
a713 4
        if test `uname -s` = "IRIX64"
        then
          LSOF_CFGF="$LSOF_CFGF -mips3"
        fi
d721 6
a726 6
        if test `uname -s` = "IRIX64"
        then
          LSOF_CFGF="$LSOF_CFGF -mips3"
        fi
        if test -r /usr/include/cachefs/cachefs_fs.h
        then
d728 2
a729 2
          LSOF_CFGF="$LSOF_CFGF -DHASCACHEFS=$?"
        fi
d741 8
a748 8
        if test `uname -s` = "IRIX64"
        then
          LSOF_CFGF="$LSOF_CFGF -mips3"
        fi
        if test -r /usr/include/cachefs/cachefs_fs.h
        then
          LSOF_CFGF="$LSOF_CFGF -DHASCACHEFS"
        fi
d755 8
a762 8
        if test `uname -s` = "IRIX64"
        then
          LSOF_CFGF="$LSOF_CFGF -mips3"
        fi
        if test -r /usr/include/cachefs/cachefs_fs.h
        then
          LSOF_CFGF="$LSOF_CFGF -DHASCACHEFS"
        fi
d794 1
a794 1
        LSOF_CFGL="include/net/sock.h"
d811 1
a811 1
        grep unix_address /usr/src/linux/${LSOF_CFGL} > /dev/null 2>&1
d834 1
a834 1
        LSOF_CFGF="$LSOF_CFGF -DKERN_LD_ELF"
d842 1
a842 1
        LSOF_CFGF="$LSOF_CFGF -DHAS_FL_FD"
d847 1
a847 1
        LSOF_CFGF="$LSOF_CFGF -DHAS_FL_FILE"
d852 1
a852 1
        LSOF_CFGF="$LSOF_CFGF -DHAS_FL_WHENCE"
d886 2
a887 2
        0)
          echo "Lseek() is OK."
d892 1
a892 1
          rm -f ${LSOF_TMPC}.*
d896 1
a896 1
          echo "Lseek() is suspect; using private __lseek.s."
d920 1
a920 1
        ;;
d923 1
a923 1
        ;;
d964 5
d994 2
a995 2
        if test ! -x ./AFSConfig
        then
d998 4
a1001 4
        fi
        ./AFSConfig
        if test $? -eq 0 -a -r ./AFSHeaders -a -r ./AFSVersion
        then
d1003 1
a1003 1
        fi
d1023 1
a1023 1
        ;;
d1026 1
a1026 1
        ;;
d1029 1
a1029 1
        ;;
d1075 5
d1121 1
a1121 1
        LSOF_CFGL="-lelf -linet -lnsl -lseq"
d1123 1
a1123 1
        LSOF_CFGL="-lelf -lnsl -lseq -lsocket"
d1149 1
a1149 1
        LSOF_CFGF="$LSOF_CFGF -DHASVXFSDNLC"
d1252 1
a1252 1
        LSOF_CC=cc
d1372 2
a1373 2
        if test ! -x ./AFSConfig
        then
d1376 4
a1379 4
        fi
        ./AFSConfig
        if test $? -eq 0 -a -r ./AFSHeaders -a -r ./AFSVersion
        then
d1381 1
a1381 1
        fi
d1397 1
a1397 1
        LSOF_CFGF="$LSOF_CFGF -DHASVXFS=200"
d1399 1
a1399 1
        LSOF_CFGF="$LSOF_CFGF -DHASVXFS=100"
d1429 1
a1429 1
        LSOF_CC=cc
d1437 1
a1437 1
        LSOF_CFGF="-DNOCONST"
d1477 2
a1478 2
        if test ! -x ./AFSConfig
        then
d1481 4
a1484 4
        fi
        ./AFSConfig
        if test $? -eq 0 -a -r ./AFSHeaders -a -r ./AFSVersion
        then
d1486 1
a1486 1
        fi
d1555 5
a1559 5
        if test -r /usr/include/sys/fs/vx_inode.h
        then
          LSOF_CFGF="${LSOF_CFGF} -DHASVXFS"
        fi
        LSOF_CFGL="-lsocket -lnsl -lelf -lgen"
@


1.14
log
@Revision 4.08
@
text
@d12 1
a12 1
# $Id: Configure,v 1.13 97/05/23 07:42:48 abe Exp Locker: abe $
d936 1
a936 1
      LSOF_DINC="-I/sys"
@


1.13
log
@Revision 4.08
@
text
@d12 1
a12 1
# $Id: Configure,v 1.12 97/05/12 09:56:00 abe Exp Locker: abe $
d811 1
a811 2
    grep fl_fd /usr/include/linux/fs.h > /dev/null
    if test $? -eq 0
d813 15
a827 11
      LSOF_CFGF="$LSOF_CFGF -DHAS_FL_FD"
    fi
    grep fl_file /usr/include/linux/fs.h > /dev/null
    if test $? -eq 0
    then
      LSOF_CFGF="$LSOF_CFGF -DHAS_FL_FILE"
    fi
    grep fl_whence /usr/include/linux/fs.h > /dev/null
    if test $? -eq 0
    then
      LSOF_CFGF="$LSOF_CFGF -DHAS_FL_WHENCE"
@


1.12
log
@Revision 4.07
@
text
@d12 1
a12 1
# $Id: Configure,v 1.12 97/05/05 08:17:39 abe Exp $
d147 1
d149 12
a160 4
      fi
      if test -r ${LSOF_LIB}/${LSOF_LIBMKF}
      then
        (cd ${LSOF_LIB}; make -f $LSOF_LIBMKF clean)
@


1.11
log
@Revision 4.06
@
text
@d12 1
a12 1
# $Id: Configure,v 1.10 97/04/23 15:58:33 abe Exp Locker: abe $
d114 1
a114 1
    aixgcc     : IBM AIX, using gcc
d124 1
a124 1
    openbsd    : OpenBSD 1.2 and 2.0 for Intel-based systems
d200 1
a200 8
  aix*)
    if test "X$LSOF_TGT" = "Xaixgcc"
    then
      LSOF_CC=gcc
      LSOF_TGT="aix"
    else
      LSOF_CC=cc
    fi
d214 16
d261 4
a264 1
    LSOF_CFGL="-bnolibpath"
d550 1
a550 1
  hpux*)
d913 9
d984 3
d1027 5
d1197 1
a1197 1
  solaris*)
d1370 1
a1370 1
  sunos*)
d1376 1
@


1.10
log
@Revision 4.05
Deprecate EP/IX.
Add Solaris 2.6 Beta_Update.
Add -xansi to some IRIX CFLAGS.
Change sunos413* to sunos* and propagate exact SunOS version in
SUNOSV.
@
text
@d12 1
a12 1
# $Id: Configure,v 1.9 97/04/17 13:24:32 abe Exp Locker: abe $
d307 4
d513 2
a514 1
    if test -r /usr/src/sys/miscfs/fdesc/fdesc.h
d516 2
a517 1
	LSOF_CFGF="$LSOF_CFGF -DHASFDESCFS"
d519 1
a519 1
    if test $LSOF_VERS -gt 100
d521 2
a522 4
        if test -r /usr/src/sys/miscfs/procfs/procfs.h
        then
	    LSOF_CFGF="$LSOF_CFGF -DHASPROCFS=proc"
        fi
d524 9
d885 2
a886 1
    if test -r /usr/src/sys/miscfs/fdesc/fdesc.h
d888 2
a889 1
	LSOF_CFGF="$LSOF_CFGF -DHASFDESCFS"
d891 1
a891 1
    if test -r /usr/src/sys/miscfs/procfs/procfs.h
d893 2
a894 1
	LSOF_CFGF="$LSOF_CFGF -DHASPROCFS=proc"
d896 9
d972 1
a972 1
	LSOF_CFGF="$LSOF_CFGF -DHASNFSPROTO"
d974 2
a975 1
    if test -r /usr/src/sys/miscfs/fdesc/fdesc.h
d977 2
a978 1
	LSOF_CFGF="$LSOF_CFGF -DHASFDESCFS"
d980 1
a980 1
    if test -r /usr/src/sys/miscfs/procfs/procfs.h
d982 2
a983 1
	LSOF_CFGF="$LSOF_CFGF -DHASPROCFS=proc"
d985 18
d1363 1
a1363 1
    LSOF_VERS=`uname -r | sed 's/\([0-9\.]*\).*/\1/' | awk -f. '{printf "%d%02d%02d", $1, $2, $3}'`
@


1.9
log
@Revision 4
Test Linux for atomic_t in <asm/atomic.h>.
@
text
@d12 1
a12 1
# $Id: Configure,v 1.8 97/04/16 15:21:31 abe Exp Locker: abe $
a116 1
    epix211    : EP/IX 2.1.1 for the CDC 4680
d132 2
a133 2
    sunos413   : SunOS 4.1.3, using gcc
    sunos413cc : SunOS 4.1.3, using Sun's cc
a407 9
# Configure for CDC EP/IX.

  epix211)
    LSOF_VERS="20101"
    LSOF_CFGF="-DEPIXV=${LSOF_VERS}"
    LSOF_CFGL="-lmld -lsun"
    LSOF_DIALECT_DIR=epix
    ;;

d629 1
a629 1
	LSOF_CFGF="-DIRIXV=${LSOF_VERS} `dialects/sgi/MkKernOpts ${LSOF_VERS}`"
d660 1
a660 1
	LSOF_CFGF="-DIRIXV=${LSOF_VERS}"
d680 1
a680 1
	LSOF_CFGF="-DIRIXV=${LSOF_VERS}"
d694 1
a694 1
	LSOF_CFGF="-DIRIXV=${LSOF_VERS}"
d1186 1
a1186 1
	  Beta)
d1295 2
a1296 2
  sunos413*)
    if test "X$LSOF_TGT" = "Xsunos413"
d1317 1
a1317 1
    LSOF_VERS="40103"
@


1.8
log
@Revision 4.04
@
text
@d12 1
a12 1
# $Id: Configure,v 1.7 97/04/07 08:20:00 abe Exp Locker: abe $
d122 1
a122 1
    linux      : Linux 2.0.27 and 2.1.28
d801 8
@


1.7
log
@Revision 4.02
@
text
@d12 1
a12 1
# $Id: Configure,v 1.6 97/03/21 12:49:21 abe Exp Locker: abe $
d682 2
a683 1
	if test ! -r /usr/include/sys/fs/xfs_inode.h
d685 1
a685 1
	  LSOF_DINC="-I`pwd`/dialects/sgi/irix62hdr"
a700 4
	if test ! -r /usr/include/sys/fs/xfs_inode.h
	then
	  LSOF_DINC="-I`pwd`/dialects/sgi/irix62hdr"
	fi
@


1.6
log
@Revision 4.02
Correct IRIX 5.3 typo.
@
text
@d12 1
a12 1
# $Id: Configure,v 1.5 97/03/19 13:20:52 abe Exp Locker: abe $
d54 1
a54 1
#	$LSOF_CFGL	    loader flags -- e.g., -l's
d59 2
d89 1
d127 2
a128 1
    ptx        : Sequent PTX 2.1.[1569], 4.0.[23], 4.1.[024], 4.2[.1], and 4.3
d541 2
d545 27
a571 1
      LSOF_CC=cc
d573 1
a573 1
    LSOF_CFGF="-DHPUXV=$LSOF_VERS"
a585 4
    if test "X$LSOF_CC" = "Xgcc"
    then
      LSOF_CFGF="$LSOF_CFGF -DHAS_CONST"
    fi
d750 6
d1029 4
a1375 1

d1576 1
a1576 1
echo "CFGL=	-L./${LSOF_LIB} -llsof $LSOF_CFGL" >> $LSOF_MKFC
d1579 1
@


1.5
log
@Revision 4.02
@
text
@d12 1
a12 1
# $Id: Configure,v 1.4 97/03/03 07:07:15 abe Exp Locker: abe $
d610 1
a610 1
	LSOF_VERS="-50300"
@


1.4
log
@Revision 4.01
@
text
@d12 1
a12 1
# $Id: Configure,v 1.3 97/02/24 15:48:00 abe Exp Locker: abe $
d17 1
a17 1
LSOF_F="ddev.c dfile.c dlsof.h dmnt.c dnode*.c dproc.c dproto.h dsock.c dstore.c kernelbase.h machine.h machine.h.old new_machine.h"
d66 1
d91 1
d112 1
a112 1
    bsdi       : BSDI BSD/OS 2.0, 2.0.1, and 2.1
d119 1
a119 1
    linux      : Linux through 2.0
d207 1
a207 1
      echo "Determining AIX version with /usr/bin/oslevel."
d259 1
a259 1
	  echo "Testing user.h with $LSOF_CC."
d275 1
a275 1
      echo "Getting version number of $LSOF_CC."
d289 1
a289 1
        LSOF_CFGF="-DBSDIV=20000"
d292 1
a292 1
        LSOF_CFGF="-DBSDIV=20100"
d294 3
d300 1
a300 1
        LSOF_CFGF="-DBSDIV=20000"
d303 1
a310 1
    LSOF_OSF1VRD=""
d313 1
a313 1
	LSOF_OSF1V=20000
d317 2
a318 2
	LSOF_OSF1V=30000
	LSOF_OSF1VRD=-DUSELOCALREADDIR
d322 2
a323 2
	LSOF_OSF1V=30200
	LSOF_OSF1VRD=-DUSELOCALREADDIR
d327 1
a327 1
	LSOF_OSF1V=40000
d332 1
a332 1
	LSOF_OSF1V=20000
d399 1
a399 1
    LSOF_CFGF="-DOSF1V=$LSOF_OSF1V -DADVFSV=$LSOF_ADVFSV $LSOF_OSF1VRD"
d408 2
a409 1
    LSOF_CFGF="-DEPIXV=20101"
d533 1
d541 2
a542 3
    LSOF_CFGF=`uname -r | awk -F. '{printf "%d%02d",\$2,\$3}'`
    LSOF_CFGF="-DHPUXV=$LSOF_CFGF"
    if test -r /etc/conf/x25/x25addrstr.h
d544 5
a548 2
      LSOF_CFGF="$LSOF_CFGF -DHPUX_CCITT"
      LSOF_DINC="-I/etc/conf"
d604 2
a605 1
	LSOF_CFGF="-DIRIXV=50200"
d610 2
a611 2
	LSOF_CFGF="-DIRIXV=50300"
	LSOF_CFGF="$LSOF_CFGF `dialects/sgi/MkKernOpts 50300`"
d616 3
a618 2
	LSOF_CFGF="-DIRIXV=60000 -woff 1411,1174,1107"
	LSOF_CFGF="$LSOF_CFGF `dialects/sgi/MkKernOpts 60000`"
d623 3
a625 2
	LSOF_CFGF="-DIRIXV=60001 -woff 1411,1174,1107"
	LSOF_CFGF="$LSOF_CFGF `dialects/sgi/MkKernOpts 60001`"
d630 2
a631 1
	LSOF_CFGF="-DIRIXV=60100"
d636 1
a636 1
	LSOF_CFGF="$LSOF_CFGF `dialects/sgi/MkKernOpts 60100`"
d641 2
a642 1
	LSOF_CFGF="-DIRIXV=60200"
d652 1
a652 1
	LSOF_CFGF="$LSOF_CFGF `dialects/sgi/MkKernOpts 60200`"
d660 2
a661 1
	LSOF_CFGF="-DIRIXV=60300"
d670 1
a670 1
	LSOF_CFGF="$LSOF_CFGF `dialects/sgi/MkKernOpts 60300`"
d678 2
a679 1
	LSOF_CFGF="-DIRIXV=60400"
d688 1
a688 1
	LSOF_CFGF="$LSOF_CFGF `dialects/sgi/MkKernOpts 60400`"
d730 7
a736 1
	LSOF_CFGF="${LSOF_CFGF} -DHASUNMINSOCK"
d739 5
d771 43
d824 1
a824 1
	LSOF_CFGF="-DNETBSDV=1000"
d827 1
a827 1
	LSOF_CFGF="-DNETBSDV=1010"
d830 1
a830 1
	LSOF_CFGF="-DNETBSDV=1020"
d835 1
a835 1
	LSOF_CFGF="-DNETBSDV=1000"
d838 1
d1004 1
a1004 1
	LSOF_RISCOSV=452
d1009 1
a1009 1
	LSOF_RISCOSV=452
d1012 1
a1012 1
    LSOF_CFGF="-DRISCOSV=$LSOF_RISCOSV"
d1021 2
a1022 2
    LSOF_VERS="`LANG=C_C.C uname -X 2>/dev/null | grep Release | sed 's/Release = \(.*\)/\1/'`"
    case $LSOF_VERS in
d1024 1
a1024 1
	LSOF_CFGF="-DSCOV=20"
d1030 2
a1031 1
	LSOF_CFGF="-DSCOV=21 -nointl"
d1037 2
a1038 1
	LSOF_CFGF="-DSCOV=40 -nointl"
d1043 2
a1044 1
	LSOF_CFGF="-DSCOV=41 -nointl"
d1049 2
a1050 1
	LSOF_CFGF="-DSCOV=42 -nointl"
d1055 2
a1056 1
	LSOF_CFGF="-DSCOV=`echo $LSOF_VERS | sed 's/3\.2v//; s/\.//g'` -belf"
d1063 2
a1064 1
	LSOF_CFGF="-DSCOV=0 -nointl"
d1070 1
d1112 1
d1118 3
a1120 4
	  LSOF_CFGF="-Dsolaris=20300 -DP101318=$LSOF_PL"
	else
	  LSOF_CFGF="-Dsolaris=20300"
	fi;;
d1122 2
a1123 1
	  LSOF_CFGF="-Dsolaris=20300";;
d1126 1
d1144 1
a1144 1
	LSOF_CFGF="-Dsolaris=20400";;
d1146 2
a1147 1
	  LSOF_CFGF="-Dsolaris=20500";;
d1149 2
a1150 1
	  LSOF_CFGF="-Dsolaris=20501";;
d1154 1
a1154 1
	    LSOF_CFGF="-Dsolaris=20600"
d1160 1
a1160 1
	    echo "Testing prdata.h for PR_GWINDOWS, using $LSOF_CC."
d1171 1
a1171 1
	    echo "Testing prdata.h for PR_LDT, using $LSOF_CC."
d1189 1
d1197 1
a1197 1
    echo "Testing vnode.h for VSOCK, using $LSOF_CC."
d1276 1
a1276 1
      echo "Testing $LSOF_CC for const support."
d1284 2
a1285 1
    LSOF_CFGF="$LSOF_CFGF -DSUNOSV=40103"
d1301 1
a1301 1
    echo "Testing vnode.h for VSOCK, using $LSOF_CC."
d1346 1
a1346 1
	LSOF_CFGF="-DULTRIXV=40200"
d1349 1
a1349 1
	LSOF_CFGF="-DULTRIXV=40300"
d1352 1
a1352 1
	LSOF_CFGF="-DULTRIXV=40400"
d1355 1
a1355 1
	LSOF_CFGF="-DULTRIXV=40500"
d1363 1
d1457 2
a1458 2
# Make sure $LSOF_MKF (or $LSOF_MKF.$LSOF_LOCALSUFFIX) exists in the
# target directory.
d1460 6
d1468 1
a1468 1
  LSOF_REST=$LSOF_MKF.$LSOF_LOCALSUFFIX
d1470 1
a1470 1
  LSOF_REST=$LSOF_MKF
d1501 1
a1501 1
LSOF_MKC=$LSOF_MKC ./dialects/$LSOF_DIALECT_DIR/$LSOF_MK $LSOF_TGT
@


1.3
log
@Deprecate IRIX 5.2.
@
text
@d12 1
a12 1
# $Id: Configure,v 1.2 97/02/24 14:12:57 abe Exp Locker: abe $
d635 2
a636 1
          LSOF_CFGF="$LSOF_CFGF -DHASCACHEFS"
d875 4
@


1.2
log
@decosf: put -I/usr/sys/include in DINC.
@
text
@d12 1
a12 1
# $Id: Configure,v 1.1 97/02/24 07:22:43 abe Exp Locker: abe $
d116 1
a116 1
    irix       : SGI IRIX 5.2, 5.3, 6.0, 6.0.1, and 6.[1234]
@


1.1
log
@Initial revision
@
text
@d12 1
a12 1
# $Id: Configure,v 1.129 97/02/11 10:43:42 abe Exp $
d395 1
a395 1
    LSOF_DINC="-I${LSOF_SYSDIR}/$LSOF_CDIR"
@
