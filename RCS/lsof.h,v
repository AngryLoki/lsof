head	1.70;
access;
symbols;
locks; strict;
comment	@ * @;


1.70
date	2018.03.26.21.50.45;	author abe;	state Exp;
branches;
next	1.69;

1.69
date	2018.02.14.14.19.25;	author abe;	state Exp;
branches;
next	1.68;

1.68
date	2015.07.07.20.16.58;	author abe;	state Exp;
branches;
next	1.67;

1.67
date	2014.10.13.22.36.20;	author abe;	state Exp;
branches;
next	1.66;

1.66
date	2013.01.02.17.14.59;	author abe;	state Exp;
branches;
next	1.65;

1.65
date	2011.09.07.19.13.49;	author abe;	state Exp;
branches;
next	1.64;

1.64
date	2010.07.29.15.59.28;	author abe;	state Exp;
branches;
next	1.63;

1.63
date	2010.01.18.19.01.11;	author abe;	state Exp;
branches;
next	1.62;

1.62
date	2009.03.25.19.20.38;	author abe;	state Exp;
branches;
next	1.61;

1.61
date	2008.10.21.16.21.41;	author abe;	state Exp;
branches;
next	1.60;

1.60
date	2008.04.15.13.24.19;	author abe;	state Exp;
branches;
next	1.59;

1.59
date	2007.04.24.16.16.59;	author abe;	state Exp;
branches;
next	1.58;

1.58
date	2006.03.27.23.04.25;	author abe;	state Exp;
branches;
next	1.57;

1.57
date	2005.08.29.10.03.08;	author abe;	state Exp;
branches;
next	1.56;

1.56
date	2005.08.08.19.43.16;	author abe;	state Exp;
branches;
next	1.55;

1.55
date	2005.05.11.13.02.46;	author abe;	state Exp;
branches;
next	1.54;

1.54
date	2004.12.30.18.39.29;	author abe;	state Exp;
branches;
next	1.53;

1.53
date	2004.07.06.19.09.10;	author abe;	state Exp;
branches;
next	1.52;

1.52
date	2004.03.10.23.42.12;	author abe;	state Exp;
branches;
next	1.51;

1.51
date	2003.10.13.13.35.14;	author abe;	state Exp;
branches;
next	1.50;

1.50
date	2003.10.07.11.35.38;	author abe;	state Exp;
branches;
next	1.49;

1.49
date	2003.06.11.11.36.27;	author abe;	state Exp;
branches;
next	1.48;

1.48
date	2003.03.25.19.51.41;	author abe;	state Exp;
branches;
next	1.47;

1.47
date	2003.03.21.17.27.05;	author abe;	state Exp;
branches;
next	1.46;

1.46
date	2002.06.17.01.38.15;	author abe;	state Exp;
branches;
next	1.45;

1.45
date	2002.01.14.15.51.36;	author abe;	state Exp;
branches;
next	1.44;

1.44
date	2001.10.17.19.24.37;	author abe;	state Exp;
branches;
next	1.43;

1.43
date	2001.10.15.12.12.31;	author abe;	state Exp;
branches;
next	1.42;

1.42
date	2001.09.04.17.47.54;	author abe;	state Exp;
branches;
next	1.41;

1.41
date	2001.06.19.13.23.39;	author abe;	state Exp;
branches;
next	1.40;

1.40
date	2001.02.13.02.07.25;	author abe;	state Exp;
branches;
next	1.39;

1.39
date	2000.12.04.13.53.32;	author abe;	state Exp;
branches;
next	1.38;

1.38
date	2000.11.05.13.48.39;	author abe;	state Exp;
branches;
next	1.37;

1.37
date	2000.08.01.17.05.03;	author abe;	state Exp;
branches;
next	1.36;

1.36
date	2000.03.16.15.24.23;	author abe;	state Exp;
branches;
next	1.35;

1.35
date	100.01.14.08.57.28;	author abe;	state Exp;
branches;
next	1.34;

1.34
date	99.11.28.06.36.25;	author abe;	state Exp;
branches;
next	1.33;

1.33
date	99.07.19.13.59.31;	author abe;	state Exp;
branches;
next	1.32;

1.32
date	99.07.06.13.04.43;	author abe;	state Exp;
branches;
next	1.31;

1.31
date	99.06.22.09.58.33;	author abe;	state Exp;
branches;
next	1.30;

1.30
date	99.05.09.16.57.51;	author abe;	state Exp;
branches;
next	1.29;

1.29
date	99.05.09.14.50.08;	author abe;	state Exp;
branches;
next	1.28;

1.28
date	99.05.04.08.15.52;	author abe;	state Exp;
branches;
next	1.27;

1.27
date	99.04.27.15.45.21;	author abe;	state Exp;
branches;
next	1.26;

1.26
date	99.02.27.13.23.19;	author abe;	state Exp;
branches;
next	1.25;

1.25
date	99.02.25.20.06.29;	author abe;	state Exp;
branches;
next	1.24;

1.24
date	99.01.25.07.22.20;	author abe;	state Exp;
branches;
next	1.23;

1.23
date	98.12.28.19.36.20;	author abe;	state Exp;
branches;
next	1.22;

1.22
date	98.12.28.10.13.57;	author abe;	state Exp;
branches;
next	1.21;

1.21
date	98.11.23.07.34.50;	author abe;	state Exp;
branches;
next	1.20;

1.20
date	98.08.18.08.07.28;	author abe;	state Exp;
branches;
next	1.19;

1.19
date	98.08.03.08.00.55;	author abe;	state Exp;
branches;
next	1.18;

1.18
date	98.06.25.07.00.51;	author abe;	state Exp;
branches;
next	1.17;

1.17
date	98.06.18.07.57.56;	author abe;	state Exp;
branches;
next	1.16;

1.16
date	98.05.22.14.01.20;	author abe;	state Exp;
branches;
next	1.15;

1.15
date	98.04.03.13.12.02;	author abe;	state Exp;
branches;
next	1.14;

1.14
date	98.03.18.14.33.47;	author abe;	state Exp;
branches;
next	1.13;

1.13
date	98.03.06.07.23.17;	author abe;	state Exp;
branches;
next	1.12;

1.12
date	98.02.16.15.54.28;	author abe;	state Exp;
branches;
next	1.11;

1.11
date	98.02.13.07.42.49;	author abe;	state Exp;
branches;
next	1.10;

1.10
date	98.01.29.15.38.09;	author abe;	state Exp;
branches;
next	1.9;

1.9
date	97.12.11.15.43.49;	author abe;	state Exp;
branches;
next	1.8;

1.8
date	97.10.24.08.00.40;	author abe;	state Exp;
branches;
next	1.7;

1.7
date	97.10.10.08.26.54;	author abe;	state Exp;
branches;
next	1.6;

1.6
date	97.09.23.09.20.28;	author abe;	state Exp;
branches;
next	1.5;

1.5
date	97.08.15.07.25.29;	author abe;	state Exp;
branches;
next	1.4;

1.4
date	97.04.29.06.45.48;	author abe;	state Exp;
branches;
next	1.3;

1.3
date	97.04.15.10.21.25;	author abe;	state Exp;
branches;
next	1.2;

1.2
date	97.04.07.08.14.40;	author abe;	state Exp;
branches;
next	1.1;

1.1
date	97.02.24.07.11.57;	author abe;	state Exp;
branches;
next	;


desc
@Lsof version 4
@


1.70
log
@Revision 4.91
@
text
@/*
 * lsof.h - common header file for lsof
 */


/*
 * Copyright 1994 Purdue Research Foundation, West Lafayette, Indiana
 * 47907.  All rights reserved.
 *
 * Written by Victor A. Abell
 *
 * This software is not subject to any license of the American Telephone
 * and Telegraph Company or the Regents of the University of California.
 *
 * Permission is granted to anyone to use this software for any purpose on
 * any computer system, and to alter it and redistribute it freely, subject
 * to the following restrictions:
 *
 * 1. Neither the authors nor Purdue University are responsible for any
 *    consequences of the use of this software.
 *
 * 2. The origin of this software must not be misrepresented, either by
 *    explicit claim or by omission.  Credit to the authors and Purdue
 *    University must appear in documentation and sources.
 *
 * 3. Altered versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 *
 * 4. This notice may not be removed or altered.
 */


/*
 * $Id: lsof.h,v 1.69 2018/02/14 14:19:25 abe Exp abe $
 */


#if	!defined(LSOF_H)
#define	LSOF_H	1

#include "machine.h"

# if	!defined(FSV_DEFAULT)
#define	FSV_DEFAULT	0
# endif	/* !defined(FSV_DEFAULT) */

#include "lsof_fields.h"

#include <ctype.h>
#include <errno.h>

# if	defined(HASSETLOCALE)
#include <locale.h>
# endif	/* defined(HASSETLOCALE) */

#include <netdb.h>
#include <pwd.h>
#include <stdio.h>

#include <sys/stat.h>
#include <sys/wait.h>


/*
 * Definitions and structures that may be needed by dlsof.h
 */

# if	!defined(INODETYPE)
#define	INODETYPE	unsigned long	/* node number storage type */
#define	INODEPSPEC	"l"		/* node number printf specification
					 * modifier */
# endif	/* !defined(INODETYPE) */

struct l_dev {
	dev_t rdev;			/* device */
	INODETYPE inode;		/* inode number */
	char *name;			/* name */
	int v;				/* has been verified
					 * (when DCUnsafe == 1) */
};


# if	defined(HASEPTOPTS)
/*
 * End point definitions
 */

#define	CHEND_PIPE	0x01		/* pipe endpoint ID */
#define	CHEND_PTY	0x02		/* pseudoterminal endpoint ID */

#  if	defined(HASUXSOCKEPT)
#define	CHEND_UXS	0x04		/* UNIX socket endpoint ID */
#  endif	/* defined(HASUXSOCKEPT) */

#define	EPT_PIPE	0x01		/* process has pipe file */
#define	EPT_PIPE_END	0x02		/* process has pipe end point file */
#define	EPT_PTY		0x04		/* process has a pseudoterminal file */
#define	EPT_PTY_END	0x08		/* process has a pseudoterminal end
					 * point file */

#  if	defined(HASUXSOCKEPT)
#define	EPT_UXS		0x10		/* process has a UNIX socket file */
#define	EPT_UXS_END	0x20		/* process has a UNIX socket end point
					 * file */
#  endif	/* defined(HASUXSOCKEPT) */
# endif	/* defined(HASEPTOPTS) */


/*
 * FILE_FLAG column names
 */

#define	FF_AIO		"AIO"
#define	FF_APPEND	"AP"
#define	FF_ASYNC	"ASYN"
#define	FF_BLKANDSET	"BAS"
#define	FF_BLKINUSE	"BKIU"
#define	FF_BLKSEEK	"BSK"
#define	FF_CIO		"CIO"
#define	FF_CLONE	"CLON"
#define	FF_CLREAD	"CLRD"
#define	FF_COPYAVOID	"CA"
#define	FF_CREAT	"CR"
#define	FF_DATAFLUSH	"DFLU"
#define	FF_DEFER	"DF"
#define	FF_DEFERIND	"DFI"
#define	FF_DELAY	"DLY"
#define	FF_DIRECT	"DIR"
#define	FF_DIRECTORY	"DTY"
#define	FF_DOCLONE	"DOCL"
#define	FF_DSYNC	"DSYN"
#define	FF_EVTONLY	"EVO"
#define	FF_EXCL		"EXCL"
#define	FF_EXEC		"EX"
#define	FF_EXLOCK	"XL"
#define	FF_FILE_MBLK	"MBLK"
#define	FF_FSYNC	"FSYN"
#define	FF_GCFDEFER	"GCDF"
#define	FF_GCFMARK	"GCMK"
#define	FF_GENTTY	"GTTY"
#define	FF_HASLOCK	"LCK"
#define	FF_HUP		"HUP"
#define	FF_KERNEL	"KERN"
#define	FF_KIOCTL	"KIOC"
#define	FF_LARGEFILE	"LG"
#define	FF_MARK		"MK"
#define	FF_MOUNT	"MNT"
#define	FF_MSYNC	"MSYN"
#define	FF_NBDRM	"NBDR"
#define	FF_NBIO		"NBIO"
#define	FF_NBLOCK	"NB"
#define	FF_NBUF		"NBF"
#define	FF_NMFS		"NMFS"
#define	FF_NDELAY	"ND"
#define	FF_NET		"NET"
#define	FF_NOATM	"NATM"
#define	FF_NOCACHE	"NC"
#define	FF_NOCTTY	"NTTY"
#define	FF_NODSYNC	"NDSY"
#define	FF_NOFOLNK	"NFLK"
#define	FF_NOTOSTOP	"NOTO"
#define	FF_NSHARE	"NSH"
#define	FF_OLRMIRROR	"OLRM"
#define	FF_POSIX_AIO	"PAIO"
#define	FF_POSIX_PIPE	"PP"
#define	FF_RAIOSIG	"RAIO"
#define	FF_RCACH	"RC"
#define	FF_RDWR		"RW"
#define	FF_READ		"R"
#define	FF_REVOKED	"REV"
#define	FF_RSHARE	"RSH"
#define	FF_RSYNC	"RSYN"
#define	FF_SETBLK	"BL"
#define	FF_SHLOCK	"SL"
#define	FF_SNAP		"SNAP"
#define	FF_SOCKET	"SOCK"
#define	FF_SQTSH1	"SQS1"
#define	FF_SQTSH2	"SQS2"
#define	FF_SQTREPAIR	"SQR"
#define	FF_SQTSH	"SQSH"
#define	FF_SQTSVM	"SQSV"
#define	FF_STOPIO	"STPI"
#define	FF_SYNC		"SYN"
#define	FF_SYNCRON	"SWR"
#define	FF_TCP_MDEVONLY	"TCPM"
#define	FF_TERMIO	"TIO"
#define	FF_TRUNC	"TR"
#define	FF_VHANGUP	"VH"
#define	FF_VTEXT	"VTXT"
#define	FF_WAKEUP	"WKUP"
#define	FF_WAITING	"WTG"
#define	FF_WRITE	"W"


/*
 * Process open file flag names
 */

#define	POF_ALLOCATED	"ALLC"
#define	POF_BNRD	"BR"
#define	POF_BNWR	"BW"
#define POF_BNHUP	"BHUP"
#define	POF_CLOEXEC	"CX"
#define	POF_CLOSING	"CLSG"
#define	POF_FDLOCK	"LCK"
#define	POF_INUSE	"USE"
#define	POF_MAPPED	"MP"
#define	POF_FSHMAT	"SHMT"
#define	POF_RESERVED	"OPIP"
#define	POF_RSVWT	"RSVW"


/*
 * Cross-over (-x) option values
 */

#define	XO_FILESYS	0x1		/* file system mount points */
#define	XO_SYMLINK	0x2		/* symbolic links */
#define	XO_ALL		(XO_FILESYS | XO_SYMLINK)

#include "dlsof.h"

#include <sys/types.h>			/* just in case -- because utmp.h
					 * may need it */
#include "./regex.h"

# if	defined(EMPTY)
#undef	EMPTY
# endif	/* defined(EMPTY) */

# if	defined(HASUTMPX)
#include <utmpx.h>
# else	/* !defined(HASUTMPX) */
#include <utmp.h>
# endif	/* defined(HASUTMPX) */

extern int errno;
extern char *optarg;
extern int optind;

#define	ACCESSERRFMT	"%s: WARNING: access %s: %s\n"

# if	defined(HASDCACHE)
#define	CRC_POLY	0120001 	/* CRC-16 polynomial */
#define	CRC_TBLL	256		/* crc table length for software */
#define	CRC_BITS	8		/* number of bits contributing */
# endif	/* defined(HASDCACHE) */
#define	CMDL		9		/* maximum number of characters from
					 * command name to print in COMMAND
					 * column */
#define	CWD		" cwd"		/* current working directory fd name */
#define	FDLEN		8		/* fd printing array length */
#define	FSV_FA		0x1		/* file struct addr status */
#define	FSV_CT		0x2		/* file struct count status */
#define	FSV_FG		0x4		/* file struct flags */
#define	FSV_NI		0x8		/* file struct node ID status */

# if	!defined(GET_MAJ_DEV)
#define	GET_MAJ_DEV	major		/* if no dialect specific macro has
					 * been defined, use standard major()
					 * macro */
# endif	/* !defined(GET_MAJ_DEV) */

# if	!defined(GET_MIN_DEV)
#define	GET_MIN_DEV	minor		/* if no dialect specific macro has
					 * been defined, use standard minor()
					 * macro */
# endif	/* !defined(GET_MIN_DEV) */

# if	defined(HASSELINUX)
#define	HASHCNTX	128		/* security context hash bucket count
					 * -- MUST BE A POWER OF 2!!! */
# endif	/* defined(HASSELINUX) */

# if	defined(HASZONES)
#define	HASHZONE	128		/* zone hash bucket count -- MUST BE
					 * A POWER OF 2!!! */
# endif	/* defined(HASZONES) */

#define	IDINCR		10		/* PID/PGID table malloc() increment */

# if	!defined(INADDR_LOOPBACK)
#define	INADDR_LOOPBACK	(u_long)0x7f000001
# endif	/* !defined(INADDR_LOOPBACK) */

#define	IPROTOL		8		/* Internet protocol length */

# if	!defined(KA_T_FMT_X)
#define	KA_T_FMT_X	"0x%08lx"	/* format for printing kernel
					 * addresses in 0x... format */
# endif	/* !defined(KA_T_FMT_X) */

# if	!defined(LOGINML)
#  if	defined(HASUTMPX)
static struct utmpx dummy_utmp;		/* to get login name length */
#define	LOGINML		sizeof(dummy_utmp.ut_user)
					/* login name length */
#  else	/* !defined(HASUTMPX) */
static struct utmp dummy_utmp;		/* to get login name length */
#define	LOGINML		sizeof(dummy_utmp.ut_name)
					/* login name length */
#  endif	/* defined(HASUTMPX) */
# endif	/* !defined(LOGINML) */

#define	LPROCINCR	128		/* Lproc[] allocation increment */
#define	LSOF_URL	"ftp://lsof.itap.purdue.edu/pub/tools/unix/lsof/"
#define	MIN_AF_ADDR	sizeof(struct in_addr)
					/* minimum AF_* address length */

# if	defined(HASIPv6)
#define	MAX_AF_ADDR	sizeof(struct in6_addr)
					/* maximum AF_* address length */
# else	/* !defined(HASIPv6) */
#define	MAX_AF_ADDR	MIN_AF_ADDR	/* maximum AF_* address length */
# endif	/* defined(HASIPv6) */

#define	MAXDCPATH	4		/* paths in DCpath[] */
#define	MAXNWAD		100		/* maximum network addresses */

# if	!defined(MEMMOVE)
#define	MEMMOVE		memmove
# endif	/* !defined*MEMMOVE) */

#define	N_REGLR		0		/* regular file system node */
#define	N_AFS		1		/* AFS node */
#define	N_AFPFS		2		/* Apple Darwin AppleShare */
#define	N_ANON_INODE	3		/* Linux anon_inodefs node */
#define	N_AUSX		4		/* Auspex LFS node */
#define	N_AUTO		5		/* automount node */
#define	N_BLK		6		/* block device node */
#define	N_CACHE		7		/* cached file system node */
#define	N_CDFS		8		/* CD-ROM node */
#define	N_CFS		9		/* CFS node */
#define	N_CHR		10		/* character device node */
#define	N_COM		11		/* streams common device node */
#define	N_CTFSADIR	12		/* Solaris CTFS adir node */
#define	N_CTFSBUND	13		/* Solaris CTFS bundle node */
#define	N_CTFSCDIR	14		/* Solaris CTFS cdir node */
#define	N_CTFSCTL	15		/* Solaris CTFS ctl node */
#define	N_CTFSEVT	16		/* Solaris CTFS events node */
#define	N_CTFSLATE	17		/* Solaris CTFS latest node */
#define	N_CTFSROOT	18		/* Solaris CTFS root node */
#define	N_CTFSSTAT	19		/* Solaris CTFS status node */
#define	N_CTFSSYM	20		/* Solaris CTFS symbolic node */
#define	N_CTFSTDIR	21		/* Solaris CTFS type node */
#define	N_CTFSTMPL	22		/* Solaris CTFS template node */
#define	N_DEV		23		/* DEV FS node */
#define	N_DOOR		24		/* DOOR node */
#define	N_FD		25		/* FD node */
#define	N_FIFO		26		/* FIFO node */
#define	N_HSFS		27		/* High Sierra node */
#define	N_KERN		28		/* BSD /kern node */
#define	N_LOFS		29		/* loopback node */
#define	N_MNT		30		/* mount file system device node */
#define	N_MPC		31		/* multiplexed device node */
#define	N_MVFS		32		/* multi-volume file system node (?) */
#define	N_NFS		33		/* NFS node */
#define	N_NFS4		34		/* NFS version 4 node */
#define	N_NM		35		/* named file system node */
#define	N_OBJF		36		/* objfs file system node */
#define	N_PCFS		37		/* PC file system node */
#define	N_PIPE		38		/* pipe device node */
#define	N_PORT		39		/* port node */
#define	N_PROC		40		/* /proc node */
#define	N_PSEU		41		/* pseudofs node */
#define	N_SAMFS		42		/* Solaris SAM-FS */
#define	N_SANFS		43		/* AIX SANFS */
#define	N_SDEV		44		/* Solaris sdev file system node */
#define	N_SHARED	45		/* Solaris sharedfs */
#define	N_SOCK		46		/* sock_vnodeops node */
#define	N_SPEC		47		/* spec_vnodeops node */
#define	N_STREAM	48		/* stream node */
#define	N_TMP		49		/* tmpfs node */
#define	N_UFS		50		/* UNIX file system node */
#define	N_UNKN		51		/* unknown node type */
#define	N_VXFS		52		/* Veritas file system node */
#define	N_XFS		53		/* XFS node */
#define	N_ZFS		54		/* ZFS node */

# if	!defined(OFFDECDIG)
#define	OFFDECDIG	8		/* maximum number of digits in the
					 * offset decimal form (0t...) */
# endif	/* !defined(OFFDECDIG) */

# if	!defined(USELOCALREADDIR)
#define	CloseDir	closedir	/* use standard closedir() */
#define	OpenDir		opendir		/* use standard opendir() */
#define	ReadDir		readdir		/* use standard readdir() */
# endif	/* !defined(USELOCALREADDIR) */

#define	RPTTM		15		/* default repeat seconds */
#define	RTD		" rtd"		/* root directory fd name */
#define	TASKCMDL	9		/* maximum number of characters from
					 * command name to print in TASKCMD
					 * column */
#define TCPTPI_FLAGS	0x0001		/* report TCP/TPI socket options and
					 * state, and TCP_NODELAY state */
#define	TCPTPI_QUEUES	0x0002		/* report TCP/TPI queue lengths */
#define	TCPTPI_STATE	0x0004		/* report TCP/TPI state */
#define TCPTPI_WINDOWS	0x0008		/* report TCP/TPI window sizes */
#define	TCPTPI_ALL	(TCPTPI_QUEUES | TCPTPI_STATE | TCPTPI_WINDOWS)
					/* report all TCP/TPI info */
#define	TCPUDPALLOC	32		/* allocation amount for TCP and UDP
					 * state tables */
#define	TMLIMIT		15		/* readlink() & stat() timeout sec */
#define	TMLIMMIN	2		/* minimum timeout */
#define	TYPEL		8		/* type character length */
#define	UIDCACHEL	1024		/* UID cache length */
#define	UIDINCR		10		/* UID table malloc() increment */
#define	USERPRTL	8		/* UID/login print length limit */

# if	!defined(SZOFFTYPE)
#define	SZOFFTYPE	unsigned long	/* type for size and offset */
#undef	SZOFFPSPEC
#define	SZOFFPSPEC	"l"		/* SZOFFTYPE printf specification
					 * modifier */
# endif	/* !defined(SZOFFTYPE) */

# if	!defined(TIMEVAL_LSOF)
#define	TIMEVAL_LSOF	timeval
# endif	/* !defined(TIMEVAL_LSOF) */

# if	!defined(XDR_PMAPLIST)
#define	XDR_PMAPLIST	xdr_pmaplist
# endif	/* !defined(XDR_PMAPLIST) */

# if	!defined(XDR_VOID)
#define	XDR_VOID	xdr_void
# endif	/* !defined(XDR_VOID) */


/*
 * Output title definitions
 */

#define	CMDTTL		"COMMAND"
extern int CmdColW;
#define	CNTXTTL		"SECURITY-CONTEXT"
extern int CntxColW;
#define DEVTTL		"DEVICE"
extern int DevColW;
#define	FCTTL		"FCT"
extern int FcColW;
#define	FDTTL 		"FD"
extern int FdColW;
#define	FGTTL		"FILE-FLAG"
extern int FgColW;
#define	FSTTL		"FILE-ADDR"
extern int FsColW;
#define	NITTL		"NODE-ID"
extern int NiColW;
extern char *NiTtl;
#define	NLTTL		"NLINK"
extern int NlColW;
#define	NMTTL		"NAME"
extern int NmColW;
#define NODETTL		"NODE"
extern int NodeColW;
#define OFFTTL		"OFFSET"
#define	PGIDTTL		"PGID"
extern int PgidColW;
#define	PIDTTL		"PID"
extern int PidColW;
#define	PPIDTTL		"PPID"
extern int PpidColW;
#define SZTTL		"SIZE"
#define	SZOFFTTL	"SIZE/OFF"
extern int SzOffColW;
#define	TASKCMDTTL	"TASKCMD"
extern	int TaskCmdColW;
#define	TASKTIDTTL	"TID"
extern	int TaskTidColW;
#define TYPETTL		"TYPE"
extern int TypeColW;
#define	USERTTL		"USER"
extern int UserColW;
#define ZONETTL		"ZONE"
extern int ZoneColW;


/*
 * Selection flags
 */

#define	PS_PRI		1		/* primary process selection -- e.g.,
					 * by PID or UID */
#define	PS_SEC		2		/* secondary process selection -- e.g.,
					 * by directory or file */
#define	SELCMD		0x0001		/* select process by command name */
#define	SELCNTX		0x0002		/* select security context (-Z) */
#define	SELFD		0x0004		/* select file by descriptor name */
#define	SELNA		0x0008		/* select socket by address (-i@@...) */
#define	SELNET		0x0010		/* select Internet socket files (-i) */
#define	SELNFS		0x0020		/* select NFS files (-N) */
#define	SELNLINK	0x0040		/* select based on link count */
#define	SELNM		0x0080		/* select by name */
#define	SELPGID		0x0100		/* select process group IDs (-g) */
#define	SELPID		0x0200		/* select PIDs (-p) */
#define	SELUID		0x0400		/* select UIDs (-u) */
#define	SELUNX		0x0800		/* select UNIX socket (-U) */
#define	SELZONE		0x1000		/* select zone (-z) */
#define	SELEXCLF	0x2000		/* file selection excluded */
#define	SELTASK		0x4000		/* select tasks (-K) */
#define	SELPINFO	0x8000		/* selected for pipe info (cleared in
					 * link_lfile() */
#define	SELUXSINFO	0x10000		/* selected for UNIX socket info;
					 * cleared in link_lfile() */
#define	SELPTYINFO	0x20000		/* selected for pseudoterminal info;
					 * cleared in link_lfile() */
#define	SELALL		(SELCMD|SELCNTX|SELFD|SELNA|SELNET|SELNM|SELNFS|SELPID|SELUID|SELUNX|SELZONE|SELTASK)
#define	SELPROC		(SELCMD|SELCNTX|SELPGID|SELPID|SELUID|SELZONE|SELTASK)
					/* process selecters */
#define	SELFILE		(SELFD|SELNFS|SELNLINK|SELNM)	/* file selecters */
#define	SELNW		(SELNA|SELNET|SELUNX)		/* network selecters */

/*
 * Structure definitions
 */

# if	defined(HAS_AFS)
struct afsnode {			/* AFS pseudo-node structure */
	dev_t dev;
	unsigned char ino_st;		/* 1 if inode has a value */
	unsigned char nlink_st;		/* 1 if nlink has a value */
	INODETYPE inode;
	unsigned long size;
	long nlink;
};
# endif	/* defined(HAS_AFS) */

extern int AllProc;

# if	defined(HAS_STD_CLONE)
struct clone {
	int dx;			/* index of device entry in Devtp[] */
	struct clone *next;	/* forward link */
};
extern struct clone *Clone;
# endif	/* defined(HAS_STD_CLONE) */

# if	defined(HASNLIST)
struct drive_Nl {			/* data to drive build_Nl() */
	char *nn;			/* nickname for lookups */
	char *knm;			/* kernel variable for name list */
};
extern struct drive_Nl Drive_Nl[];	/* defined in dstore.c */
# endif	/* defined(HASNLIST) */


/*
 * Global storage definitions (including their structure definitions)
 */

typedef struct efsys_list {
	char *path;			/* path to file system for which kernel
					 * blocks are to be eliminated */
	int pathl;			/* path length */
	int rdlnk;			/* avoid readlink(2) if non-zero */
	struct mounts *mp;		/* local mount table entry pointer */
	struct efsys_list *next;	/* next efsys_list entry pointer */
} efsys_list_t;
extern efsys_list_t *Efsysl;		/* file systems for which kernel blocks
					 * are to be eliminated */

struct int_lst {
	int i;				/* integer argument */
	int f;				/* find state -- meaningful only if
					 * x == 0 */
	int x;				/* excluded state */
};

typedef struct lsof_rx {		/* regular expression table entry */
	char *exp;			/* original regular expression */
	regex_t cx;			/* compiled expression */
	int mc;				/* match count */ 
} lsof_rx_t;
extern lsof_rx_t *CmdRx;
extern int NCmdRxU;

# if	defined(HASFSTRUCT)
struct pff_tab {			/* print file flags table structure */
	long val;			/* flag value */
	char *nm;			/* name to print for flag */
};
# endif	/* defined(HASFSTRUCT) */

# if	defined(HASEPTOPTS)
typedef struct pxinfo {			/* hashed pipe, UNIX socket or pseudo-
					 * terminal inode information */
	INODETYPE ino;			/* file's inode */
	struct lfile *lf;		/* connected peer file */
	int lpx;			/* connected process index */
	struct pxinfo *next;		/* next entry for hashed inode */
} pxinfo_t;

typedef struct uxsin {			/* UNIX socket information */
	INODETYPE inode;		/* node number */
	char *pcb;			/* protocol control block */
	char *path;			/* file path */
	unsigned char sb_def;		/* stat(2) buffer definitions */
	dev_t sb_dev;			/* stat(2) buffer device */
	INODETYPE sb_ino;		/* stat(2) buffer node number */
	dev_t sb_rdev;			/* stat(2) raw device number */
	uint32_t ty;			/* socket type */

#  if	defined(HASEPTOPTS) && defined(HASUXSOCKEPT)
	struct uxsin *icons;		/* incoming socket conections */
	unsigned int icstat;		/* incoming connection status
					 * 0 == none */
	pxinfo_t *pxinfo;		/* inode information */
	struct uxsin *peer;	        /* connected peer(s) info */
#  endif	/* defined(HASEPTOPTS) && defined(HASUXSOCKEPT) */

	struct uxsin *next;
} uxsin_t;
# endif	/* defined(HASEPTOPTS) */


struct seluid {
	uid_t uid;			/* User ID */
	char *lnm;			/* specified login name (NULL = none) */
	unsigned char excl;		/* excluded state */
	unsigned char f;		/* selected User ID find state
					 * (meaningful only if excl == 0) */
};

# if	defined(HASBLKDEV)
extern struct l_dev *BDevtp, **BSdev;
extern int BNdev;
# endif	/* defined(HASBLKDEV) */

extern int CkPasswd;

struct str_lst {
	char *str;			/* string */
	int len;			/* string length */
	short f;			/* selected string find state */
	short x;			/* exclusion (if non-zero) */
	struct str_lst *next;		/* next list entry */
};
extern struct str_lst *Cmdl;
extern int CmdLim;
extern int Cmdni;
extern int Cmdnx;
 
# if	defined(HASSELINUX)
typedef struct cntxlist {
	char *cntx;			/* zone name */
	int f;				/* "find" flag (used only in CntxArg) */
	struct cntxlist *next;		/* next zone hash entry */
} cntxlist_t;
extern cntxlist_t *CntxArg;
extern int CntxStatus;
# endif	/* defined(HASSELINUX) */

# if	defined(HASDCACHE)
extern unsigned DCcksum;
extern int DCfd;
extern FILE *DCfs;
extern char *DCpathArg;
extern char *DCpath[];
extern int DCpathX;
extern int DCrebuilt;
extern int DCstate;
extern int DCunsafe;
# endif	/* defined(HASDCACHE) */

extern int DChelp;
extern dev_t DevDev;
extern struct l_dev *Devtp;
extern char **Dstk;
extern int Dstkn;
extern int Dstkx;
extern int ErrStat;
extern uid_t Euid;
extern int Fand;
extern int Fblock;
extern int Fcntx;
extern int Ffield;
extern int Ffilesys;
extern int Fhelp;
extern int Fhost;

# if	defined(HASNCACHE)
extern int Fncache;
extern int NcacheReload;
# endif	/* defined(HASNCACHE) */

extern int Fnet;
extern int FnetTy;
extern int Fnfs;
extern int Fnlink;
extern int Foffset;
extern int Fovhd;
extern int FeptE;

extern int Fport;

# if	!defined(HASNORPC_H)
extern int FportMap;
# endif	/* !defined(HASNORPC_H) */

extern int Fpgid;
extern int Fppid;
extern int Fsize;
extern int Fsv;
extern int FsvByf;
extern int FsvFlagX;
extern int Ftask;
extern int Ftcptpi;
extern int Fterse;
extern int Funix;
extern int Futol;
extern int Fverbose;
extern int Fwarn;

# if	defined(HASXOPT_VALUE)
extern int Fxopt;
# endif	/* defined(HASXOPT_VALUE) */

extern int Fxover;
extern int Fzone;

struct fd_lst {
	char *nm;			/* file descriptor name -- range if
					 * NULL */
	int lo;				/* range start (if nm NULL) */
	int hi;				/* range end (if nm NULL) */
	struct fd_lst *next;
};
extern struct fd_lst *Fdl;
extern int FdlTy;			/* Fdl[] type: -1 == none
					 *		0 == include
					 *		1 == exclude */

struct fieldsel {
	char id;			/* field ID character */
	unsigned char st;		/* field status */
	char *nm;			/* field name */
	int *opt;			/* option variable address */
	int ov;				/* value to OR with option variable */
};
extern struct fieldsel FieldSel[];

extern int Hdr;

enum IDType {PGID, PID};
extern int  IgnTasks;
extern char *InodeFmt_d;
extern char *InodeFmt_x;
extern int LastPid;

struct lfile {
	char access;
	char lock;
	unsigned char dev_def;		/* device number definition status */
	unsigned char inp_ty;		/* inode/iproto type
					 *	0: neither inode nor iproto
					 *	1: print inode in decimal
					 *	2: iproto contains string
					 *      3: print inode in hex
					 */
	unsigned char is_com;		/* common stream status */
	unsigned char is_nfs;		/* NFS file status */
	unsigned char is_stream;	/* stream device status */

# if	defined(HASVXFS) && defined(HASVXFSDNLC)
	unsigned char is_vxfs;		/* VxFS file status */
# endif	/* defined(HASVXFS) && defined(HASVXFSDNLC) */

	unsigned char lmi_srch;		/* local mount info search status:
					 * 1 = printname() search required */

# if	defined(HASMNTSTAT)
	unsigned char mnt_stat;		/* mount point stat(2) status */
# endif	/* defined(HASMNTSTAT) */

	unsigned char nlink_def;	/* link count definition status */
	unsigned char off_def;		/* offset definition status */

# if	defined(HASEPTOPTS)
	unsigned char chend;		/* communication channel endpoint
					 * file */
#  if	defined(HASPTYEPT)
	int tty_index;			/* pseudoterminal index of slave side
					 * (if this is the master side) */
#  endif	/* defined(HASPTYEPT) */
# endif	/* defined(HASEPTOPTS) */

	unsigned char rdev_def;		/* rdev definition status */
	unsigned char sz_def;		/* size definition status */

# if	defined(HASFSTRUCT)
	unsigned char fsv;		/* file struct value status */
# endif	/* defined(HASFSTRUCT) */

	char fd[FDLEN];
	char iproto[IPROTOL];
	char type[TYPEL];
	unsigned int sf;		/* select flags -- SEL* symbols */
	int ch;				/* VMPC channel: -1 = none */
	int ntype;			/* node type -- N_* value */
	SZOFFTYPE off;
	SZOFFTYPE sz;
	dev_t dev;
	dev_t rdev;
	INODETYPE inode;
	long nlink;			/* link count */
	char *dev_ch;
	char *fsdir;			/* file system directory */
	char *fsdev;			/* file system device */

# if	defined(HASFSINO)
	INODETYPE fs_ino;		/* file system inode number */
# endif	/* defined HASFSINO) */

	struct linaddr {		/* local Internet address information */
	    int af;			/* address family: 0 for none; AF_INET;
					 * or AF_INET6 */
	    int p;			/* port */
	    union {
		struct in_addr a4;	/* AF_INET Internet address */

# if	defined(HASIPv6)
		struct in6_addr a6;	/* AF_INET6 Internet address */
# endif	/* defined(HASIPv6) */

	    } ia;
	} li[2];			/* li[0]: local
					 * li[1]: foreign */
	struct ltstate {		/* local TCP/TPI state */
	    int type;			/* state type:
					 *   -1 == none
					 *    0 == TCP
					 *    1 == TPI or socket (SS_*) */
	    union {
		int i;			/* integer state */
		unsigned int ui;	/* unsigned integer state */
	    } state;

# if	defined(HASSOOPT)
	    unsigned char pqlens;	/* pqlen status: 0 = none */
	    unsigned char qlens;	/* qlen status:  0 = none */
	    unsigned char qlims;	/* qlim status:  0 = none */
	    unsigned char rbszs;	/* rbsz status:  0 = none */
	    unsigned char sbszs;	/* sbsz status:  0 = none */
	    int kai;			/* TCP keep-alive interval */
	    int ltm;			/* TCP linger time */
	    unsigned int opt;		/* socket options */
	    unsigned int pqlen;		/* partial connection queue length */
	    unsigned int qlen;		/* connection queue length */
	    unsigned int qlim;		/* connection queue limit */
	    unsigned long rbsz;		/* receive buffer size */
	    unsigned long sbsz;		/* send buffer size */
# endif	/* defined(HASSOOPT) */

# if	defined(HASSOSTATE)
	    unsigned int ss;		/* socket state */
#  if	defined(HASSBSTATE)
	    unsigned int sbs_rcv;	/* receive socket buffer state */
	    unsigned int sbs_snd;	/* send socket buffer state */
#  endif	/* defined(HASSBSTATE) */
# endif	/* defined(HASSOSTATE) */

# if	defined(HASTCPOPT)
	    unsigned int topt;		/* TCP options */
	    unsigned char msss;		/* mss status: 0 = none */
	    unsigned long mss;		/* TCP maximum segment size */
# endif	/* defined(HASTCPOPT) */

# if	defined(HASTCPTPIQ)
	    unsigned long rq;		/* receive queue length */
	    unsigned long sq;		/* send queue length */
	    unsigned char rqs;		/* rq status: 0 = none */
	    unsigned char sqs;		/* sq status: 0 = none */
# endif	/* defined(HASTCPTPIQ) */

# if	defined(HASTCPTPIW)
	    unsigned char rws;		/* rw status: 0 = none */
	    unsigned char wws;		/* ww status: 0 = none */
	    unsigned long rw;		/* read window size */
	    unsigned long ww;		/* write window size */
# endif	/* defined(HASTCPTPIW) */

	} lts;
	char *nm;
	char *nma;			/* NAME column addition */

# if	defined(HASNCACHE) && HASNCACHE<2
	KA_T na;			/* file structure's node address */
# endif	/* defined(HASNCACHE) && HASNCACHE<2 */

# if	defined(HASNCACHE) && defined(HASNCVPID)
	unsigned long id;		/* capability ID */
# endif	/* defined(HASNCACHE) && defined(HASNCVPID) */

# if	defined(HASLFILEADD)
	HASLFILEADD
# endif	/* defined(HASLFILEADD) */

# if	defined(HASFSTRUCT)
	KA_T fsa;			/* file structure address */
	long fct;			/* file structure's f_count */
	long ffg;			/* file structure's f_flag */
	long pof;			/* process open-file flags */
	KA_T fna;			/* file structure node address */
# endif	/* defined(HASFSTRUCT) */

	struct lfile *next;
};
extern struct lfile *Lf, *Plf;


struct lproc {
	char *cmd;			/* command name */
 
# if	defined(HASSELINUX)
	char *cntx;			/* security context */
# endif	/* defined(HASSELINUX) */

	short sf;			/* select flags -- SEL* symbols */
	short pss;			/* state: 0 = not selected
				 	 *	  1 = wholly selected
				 	 *	  2 = partially selected */
# if	defined(HASEPTOPTS)
	short ept;			/* end point status -- EPT_* values */
# endif	/* defined(HASEPTOPTS) */

	int pid;			/* process ID */

# if	defined(HASTASKS)
	int tid;			/* task ID */
	char *tcmd;			/* task command name */
# endif	/* HASTASKS */

	int pgid;			/* process group ID */
	int ppid;			/* parent process ID */
	uid_t uid;			/* user ID */

# if	defined(HASZONES)
	char *zn;			/* zone name */
# endif	/* defined(HASZONES) */

	struct lfile *file;		/* open files of process */
};
extern struct lproc *Lp, *Lproc;

extern int MaxFd;
extern char *Memory;
extern int MntSup;
extern char *MntSupP;

# if	defined(HASPROCFS)
extern struct mounts *Mtprocfs;
# endif

extern int Mxpgid;
extern int Mxpid;
extern int Mxuid;
extern gid_t Mygid;
extern int Mypid;
extern uid_t Myuid;
extern char *Namech;
extern size_t Namechl;
extern int Ndev;

# if	defined(HASNLIST)
#  if	!defined(NLIST_TYPE)
#define	NLIST_TYPE	nlist
#  endif	/* !defined(NLIST_TYPE) */
extern struct NLIST_TYPE *Nl;
extern int Nll;
# endif	/* defined(HASNLIST) */
extern long Nlink;
extern int Nlproc;
extern char *Nmlst;
extern int Npgid;
extern int Npgidi;
extern int Npgidx;
extern int Npid;
extern int Npidi;
extern int Npidx;
extern int Npuns;
extern int Ntype;
extern int Nuid;
extern int Nuidexcl;
extern int Nuidincl;

struct nwad {
	char *arg;			/* argument */
	char *proto;			/* protocol */
	int af;				/* address family -- e.g.,
					 * AF_INET, AF_INET6 */
	unsigned char a[MAX_AF_ADDR];	/* address */
	int sport;			/* starting port */
	int eport;			/* ending port */
	int f;				/* find state */
	struct nwad *next;		/* forward link */
};
extern struct nwad *Nwad;

extern int OffDecDig;
extern char *Pn;

# if	defined(HASFSTRUCT)
extern struct pff_tab Pff_tab[];	/* file flags table */
extern struct pff_tab Pof_tab[];	/* process open file flags table */
# endif	/* defined(HASFSTRUCT) */

# if	defined(HASPROCFS)
struct procfsid {
	pid_t pid;			/* search PID */
	char *nm;			/* search name */
	unsigned char f;		/* match found if == 1 */

#  if	defined(HASPINODEN)
	INODETYPE inode;		/* search inode number */
#  endif	/* defined(HASPINODEN) */

	struct procfsid *next;		/* forward link */
};

extern int Procfind;
extern struct procfsid *Procfsid;
extern int Procsrch;
# endif	/* defined(HASPROCFS) */

extern int PrPass;
extern int RptTm;
extern struct l_dev **Sdev;
extern int SelAll;
extern int Selflags;
extern int SelProc;
extern int Setgid;
extern int Selinet;
extern int Setuidroot;
extern struct sfile *Sfile;
extern struct int_lst *Spgid;
extern struct int_lst *Spid;
extern struct seluid *Suid;
extern char *SzOffFmt_0t;
extern char *SzOffFmt_d;
extern char *SzOffFmt_dv;
extern char *SzOffFmt_x;
extern int TaskCmdLim;
extern int TaskPrtCmd;
extern int TaskPrtTid;
extern int TcpStAlloc;
extern unsigned char *TcpStI;
extern int TcpStIn;
extern int TcpStOff;
extern unsigned char *TcpStX;
extern int TcpStXn;
extern int TcpNstates;
extern char **TcpSt;
extern char Terminator;
extern int TmLimit;
extern int UdpStAlloc;
extern unsigned char *UdpStI;
extern int UdpStIn;
extern int UdpStOff;
extern unsigned char *UdpStX;
extern int UdpStXn;
extern int UdpNstates;
extern char **UdpSt;

# if	defined(HASZONES)
typedef struct znhash {
	char *zn;			/* zone name */
	int f;				/* "find" flag (used only in ZoneArg) */
	struct znhash *next;		/* next zone hash entry */
} znhash_t;
extern znhash_t **ZoneArg;
# endif	/* defined(HASZONES) */

#include "proto.h"
#include "dproto.h"

#endif	/* LSOF_H */
@


1.69
log
@Revision 4.90
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.68 2015/07/07 20:16:58 abe Exp abe $
d88 11
a98 6
#define	CHEND_PIPE	1		/* pipe endpoint ID */
#define	CHEND_PTY	4		/* pseudoterminal endpoint ID */
#define	EPT_PIPE	1		/* process has pipe file */
#define	EPT_PIPE_END	2		/* process has pipe end point file */
#define	EPT_PTY		8		/* process has a pseudoterminal file */
#define	EPT_PTY_END	16		/* process has a pseudoterminal end
d102 2
a103 3
#define	CHEND_UXS	2		/* UNIX socket endpoint ID */
#define	EPT_UXS		4		/* process has a UNIX socket file */
#define	EPT_UXS_END	8		/* process has a UNIX socket end point
@


1.68
log
@Revision 4.89
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.67 2014/10/13 22:36:20 abe Exp abe $
d89 1
d92 3
d389 3
d465 4
a468 2
#define	TIDTTL		"TID"
extern	int TidColW;
d502 1
a502 1
#define	SELUXSINFO	0x10000		/* selected for UNIX socket info
d504 2
d527 2
d584 2
a585 2
typedef struct pxinfo {			/* hashed pipe or UNIX socket inode
					 * information */
d744 1
d780 4
d929 1
d1027 1
a1027 1
extern int Selall;
d1029 1
d1041 3
a1043 1
extern int TaskPrtFl;
@


1.67
log
@Revision 4.88
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.66 2013/01/02 17:14:59 abe Exp abe $
d83 1
d85 17
a475 6

# if	defined(HASEPTOPTS)
#define	PS_PIPE		1		/* process has a pipe file */
#define	PS_PIPE_END	2		/* process has a pipe end point file */
# endif	/* defined(HASEPTOPTS) */

d493 2
d571 4
a574 3
typedef struct pinfo {			/* hashed pipe inode numbers */
	INODETYPE ino;			/* pipe's inode */
	struct lfile *lf;		/* connected pipe file */
d576 23
a598 2
	struct pinfo *next;		/* next entry for hashed inode */
} pinfo_t;
d678 1
a678 1
extern int FpipeE;
d764 2
a765 1
	unsigned char pipend;		/* pipe endpoint file */
d778 1
a778 1
	short sf;			/* select flags -- SEL* symbols */
d904 1
a904 1
	short pipe;			/* pipe status -- PS_PIPE* values */
@


1.66
log
@Revision 4.87
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.65 2011/09/07 19:13:49 abe Exp abe $
d458 6
d479 2
d556 10
d642 2
d726 5
d866 4
d888 1
@


1.65
log
@Revision 4.85: +|-e addition
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.64 2010/07/29 15:59:28 abe Exp abe $
d301 52
a352 51
#define	N_AUSX		3		/* Auspex LFS node */
#define	N_AUTO		4		/* automount node */
#define	N_BLK		5		/* block device node */
#define	N_CACHE		6		/* cached file system node */
#define	N_CDFS		7		/* CD-ROM node */
#define	N_CFS		8		/* CFS node */
#define	N_CHR		9		/* character device node */
#define	N_COM		10		/* streams common device node */
#define	N_CTFSADIR	11		/* Solaris CTFS adir node */
#define	N_CTFSBUND	12		/* Solaris CTFS bundle node */
#define	N_CTFSCDIR	13		/* Solaris CTFS cdir node */
#define	N_CTFSCTL	14		/* Solaris CTFS ctl node */
#define	N_CTFSEVT	15		/* Solaris CTFS events node */
#define	N_CTFSLATE	16		/* Solaris CTFS latest node */
#define	N_CTFSROOT	17		/* Solaris CTFS root node */
#define	N_CTFSSTAT	18		/* Solaris CTFS status node */
#define	N_CTFSSYM	19		/* Solaris CTFS symbolic node */
#define	N_CTFSTDIR	20		/* Solaris CTFS type node */
#define	N_CTFSTMPL	21		/* Solaris CTFS template node */
#define	N_DEV		22		/* DEV FS node */
#define	N_DOOR		23		/* DOOR node */
#define	N_FD		24		/* FD node */
#define	N_FIFO		25		/* FIFO node */
#define	N_HSFS		26		/* High Sierra node */
#define	N_KERN		27		/* BSD /kern node */
#define	N_LOFS		28		/* loopback node */
#define	N_MNT		29		/* mount file system device node */
#define	N_MPC		30		/* multiplexed device node */
#define	N_MVFS		31		/* multi-volume file system node (?) */
#define	N_NFS		32		/* NFS node */
#define	N_NFS4		33		/* NFS version 4 node */
#define	N_NM		34		/* named file system node */
#define	N_OBJF		35		/* objfs file system node */
#define	N_PCFS		36		/* PC file system node */
#define	N_PIPE		37		/* pipe device node */
#define	N_PORT		38		/* port node */
#define	N_PROC		39		/* /proc node */
#define	N_PSEU		49		/* pseudofs node */
#define	N_SAMFS		41		/* Solaris SAM-FS */
#define	N_SANFS		42		/* AIX SANFS */
#define	N_SDEV		43		/* Solaris sdev file system node */
#define	N_SHARED	44		/* Solaris sharedfs */
#define	N_SOCK		45		/* sock_vnodeops node */
#define	N_SPEC		46		/* spec_vnodeops node */
#define	N_STREAM	47		/* stream node */
#define	N_TMP		48		/* tmpfs node */
#define	N_UFS		49		/* UNIX file system node */
#define	N_UNKN		50		/* unknown node type */
#define	N_VXFS		51		/* Veritas file system node */
#define	N_XFS		52		/* XFS node */
#define	N_ZFS		53		/* ZFS node */
d677 1
@


1.64
log
@Revision 4.84
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.63 2010/01/18 19:01:11 abe Exp abe $
d348 4
a351 3
#define	N_VXFS		50		/* Veritas file system node */
#define	N_XFS		51		/* XFS node */
#define	N_ZFS		52		/* ZFS node */
d514 11
d624 2
d627 2
@


1.63
log
@Revision 4.83
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.62 2009/03/25 19:20:38 abe Exp abe $
d438 2
d470 3
a472 2
#define	SELALL		(SELCMD|SELCNTX|SELFD|SELNA|SELNET|SELNM|SELNFS|SELPID|SELUID|SELUNX|SELZONE)
#define	SELPROC		(SELCMD|SELCNTX|SELPGID|SELPID|SELUID|SELZONE)
d619 1
d824 5
d936 1
@


1.62
log
@Revision 4.82
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.61 2008/10/21 16:21:41 abe Exp abe $
d270 3
a272 1
# else	/* !defined(HASUTMPX) */
a273 1
# endif	/* defined(HASUTMPX) */
d276 1
d341 10
a350 9
#define	N_SHARED	43		/* Solaris sharedfs */
#define	N_SOCK		44		/* sock_vnodeops node */
#define	N_SPEC		45		/* spec_vnodeops node */
#define	N_STREAM	46		/* stream node */
#define	N_TMP		47		/* tmpfs node */
#define	N_UFS		48		/* UNIX file system node */
#define	N_VXFS		49		/* Veritas file system node */
#define	N_XFS		50		/* XFS node */
#define	N_ZFS		51		/* ZFS node */
@


1.61
log
@Revision 4.81
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.60 2008/04/15 13:24:19 abe Exp abe $
d339 9
a347 8
#define	N_SOCK		43		/* sock_vnodeops node */
#define	N_SPEC		44		/* spec_vnodeops node */
#define	N_STREAM	45		/* stream node */
#define	N_TMP		46		/* tmpfs node */
#define	N_UFS		47		/* UNIX file system node */
#define	N_VXFS		48		/* Veritas file system node */
#define	N_XFS		49		/* XFS node */
#define	N_ZFS		50		/* ZFS node */
@


1.60
log
@Revision 4.79
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.59 2007/04/24 16:16:59 abe Exp abe $
d368 2
d463 1
d546 2
a547 1
	int f;				/* selected string find state */
d552 2
d923 8
d933 8
d942 1
a942 1
#if	defined(HASZONES)
d949 1
a949 1
#endif	/* defined(HASZONES) */
@


1.59
log
@Revision 4.78
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.58 2006/03/27 23:04:25 abe Exp abe $
d103 1
d130 1
d134 1
d142 1
d556 1
d604 1
@


1.58
log
@Revision 4.77
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.57 2005/08/29 10:03:08 abe Exp abe $
d240 5
d342 1
d397 2
d444 15
a458 14
#define	SELCMD		0x001		/* select process by command name */
#define	SELFD		0x002		/* select file by descriptor name */
#define	SELNA		0x004		/* select socket by address (-i@@...) */
#define	SELNET		0x008		/* select Internet socket files (-i) */
#define	SELNFS		0x010		/* select NFS files (-N) */
#define	SELNLINK	0x020		/* select based on link count */
#define	SELNM		0x040		/* select by name */
#define	SELPGID		0x080		/* select process group IDs (-g) */
#define	SELPID		0x100		/* select PIDs (-p) */
#define	SELUID		0x200		/* select UIDs (-u) */
#define	SELUNX		0x400		/* select UNIX socket (-U) */
#define	SELZONE		0x800		/* select zone (-z) */
#define	SELALL		(SELCMD|SELFD|SELNA|SELNET|SELNM|SELNFS|SELPID|SELUID|SELUNX|SELZONE)
#define	SELPROC		(SELCMD|SELPGID|SELPID|SELUID|SELZONE)
d544 9
d576 1
d794 5
@


1.57
log
@Revision 4.76
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.56 2005/08/08 19:43:16 abe Exp abe $
d179 1
a217 1

@


1.56
log
@Revision 4.76
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.55 2005/05/11 13:02:46 abe Exp abe $
d642 5
@


1.55
log
@Revision 4.75
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.54 2004/12/30 18:39:29 abe Exp abe $
d68 6
d76 1
a76 1
	ino_t inode;			/* inode number */
d105 1
d298 39
a336 27
#define	N_DEV		11		/* DEV FS node */
#define	N_DOOR		12		/* DOOR node */
#define	N_FD		13		/* FD node */
#define	N_FIFO		14		/* FIFO node */
#define	N_HSFS		15		/* High Sierra node */
#define	N_KERN		16		/* BSD /kern node */
#define	N_LOFS		17		/* loopback node */
#define	N_MNT		18		/* mount file system device node */
#define	N_MPC		19		/* multiplexed device node */
#define	N_MVFS		20		/* multi-volume file system node (?) */
#define	N_NFS		21		/* NFS node */
#define	N_NFS4		22		/* NFS version 4 node */
#define	N_NM		23		/* named file system node */
#define	N_OBJF		24		/* objfs file system node */
#define	N_PCFS		25		/* PC file system node */
#define	N_PIPE		26		/* pipe device node */
#define	N_PROC		27		/* /proc node */
#define	N_PSEU		28		/* pseudofs node */
#define	N_SAMFS		29		/* Solaris SAM-FS */
#define	N_SANFS		30		/* AIX SANFS */
#define	N_SOCK		31		/* sock_vnodeops node */
#define	N_SPEC		32		/* spec_vnodeops node */
#define	N_STREAM	33		/* stream node */
#define	N_TMP		34		/* tmpfs node */
#define	N_UFS		35		/* UNIX file system node */
#define	N_VXFS		36		/* Veritas file system node */
#define	N_XFS		37		/* XFS node */
d463 1
a463 1
	unsigned long inode;
d619 2
d661 1
a661 1
	unsigned long inode;
d668 1
a668 1
	unsigned long fs_ino;		/* file system inode number */
d696 5
a700 4
	    unsigned char qlens;	/* qlen status: 0 = none */
	    unsigned char qlims;	/* qlim status: 0 = none */
	    unsigned char rbszs;	/* rbsz status: 0 = none */
	    unsigned char sbszs;	/* sbsz status: 0 = none */
d704 1
d855 1
a855 1
	unsigned long inode;		/* search inode number */
@


1.54
log
@Revision 4.74
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.53 2004/07/06 19:09:10 abe Exp abe $
d310 8
a317 7
#define	N_SOCK		30		/* sock_vnodeops node */
#define	N_SPEC		31		/* spec_vnodeops node */
#define	N_STREAM	32		/* stream node */
#define	N_TMP		33		/* tmpfs node */
#define	N_UFS		34		/* UNIX file system node */
#define	N_VXFS		35		/* Veritas file system node */
#define	N_XFS		36		/* XFS node */
d473 3
a475 1
	int f;				/* find state */
d793 2
d796 2
@


1.53
log
@Revision 4.72
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.52 2004/03/10 23:42:12 abe Exp abe $
d87 1
d138 1
d302 15
a316 14
#define	N_NM		22		/* named file system node */
#define	N_OBJF		23		/* objfs file system node */
#define	N_PCFS		24		/* PC file system node */
#define	N_PIPE		25		/* pipe device node */
#define	N_PROC		26		/* /proc node */
#define	N_PSEU		27		/* pseudofs node */
#define	N_SAMFS		28		/* Solaris SAM-FS */
#define	N_SOCK		29		/* sock_vnodeops node */
#define	N_SPEC		30		/* spec_vnodeops node */
#define	N_STREAM	31		/* stream node */
#define	N_TMP		32		/* tmpfs node */
#define	N_UFS		33		/* UNIX file system node */
#define	N_VXFS		34		/* Veritas file system node */
#define	N_XFS		35		/* XFS node */
@


1.52
log
@Revision 4.71
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.51 2003/10/13 13:35:14 abe Exp abe $
d191 3
d195 1
d249 4
a252 1
#if	!defined(LOGINML)
d254 1
d257 1
a257 1
#endif	/* !defined(LOGINML) */
d530 1
d684 4
d759 2
@


1.51
log
@Revision 4.69
Accommodation for Darwin 7.0
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.50 2003/10/07 11:35:38 abe Exp abe $
d172 9
d227 5
d303 1
a303 1
#define	N_UFS		33		/* Unix file system node */
d320 5
a324 3
#define	TCPTPI_QUEUES	1		/* report TCP/TPI queue lengths */
#define	TCPTPI_STATE	2		/* report TCP/TPI state */
#define TCPTPI_WINDOWS	4		/* report TCP/TPI window sizes */
d362 2
d366 7
d393 2
a394 9
#define	FCTTL		"FCT"
extern int FcColW;
#define	FGTTL		"FILE-FLAG"
extern int FgColW;
#define	FSTTL		"FILE-ADDR"
extern int FsColW;
#define	NITTL		"NODE-ID"
extern int NiColW;
extern char *NiTtl;
d415 5
a419 3
#define	SELUNX		0x400		/* select Unix socket (-U) */
#define	SELALL		(SELCMD|SELFD|SELNA|SELNET|SELNM|SELNFS|SELPID|SELUID|SELUNX)
#define	SELPROC		(SELCMD|SELPGID|SELPID|SELUID)	/* process selecters */
d558 3
d659 24
d736 5
d837 9
@


1.50
log
@Add N_DEV.  Correct #if typo.
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.49 2003/06/11 11:36:27 abe Exp abe $
d231 1
d235 2
@


1.49
log
@Revision 4.68
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.48 2003/03/25 19:51:41 abe Exp abe $
d264 25
a288 24
#define	N_DOOR		11		/* DOOR node */
#define	N_FD		12		/* FD node */
#define	N_FIFO		13		/* FIFO node */
#define	N_HSFS		14		/* High Sierra node */
#define	N_KERN		15		/* BSD /kern node */
#define	N_LOFS		16		/* loopback node */
#define	N_MNT		17		/* mount file system device node */
#define	N_MPC		18		/* multiplexed device node */
#define	N_MVFS		19		/* multi-volume file system node (?) */
#define	N_NFS		20		/* NFS node */
#define	N_NM		21		/* named file system node */
#define	N_OBJF		22		/* objfs file system node */
#define	N_PCFS		23		/* PC file system node */
#define	N_PIPE		24		/* pipe device node */
#define	N_PROC		25		/* /proc node */
#define	N_PSEU		26		/* pseudofs node */
#define	N_SAMFS		27		/* Solaris SAM-FS */
#define	N_SOCK		28		/* sock_vnodeops node */
#define	N_SPEC		29		/* spec_vnodeops node */
#define	N_STREAM	30		/* stream node */
#define	N_TMP		31		/* tmpfs node */
#define	N_UFS		32		/* Unix file system node */
#define	N_VXFS		33		/* Veritas file system node */
#define	N_XFS		34		/* XFS node */
d655 1
a655 1
# if	defined(HASNCACHE) && defined(HASNCAPID)
d657 1
a657 1
# endif	/* defined(HASNCACHE) && defined(HASNCAPID) */
@


1.48
log
@Revision 4.67
Change vic.cc to lsof.itap.
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.47 2003/03/21 17:27:05 abe Exp abe $
d280 8
a287 7
#define	N_SOCK		27		/* sock_vnodeops node */
#define	N_SPEC		28		/* spec_vnodeops node */
#define	N_STREAM	29		/* stream node */
#define	N_TMP		30		/* tmpfs node */
#define	N_UFS		31		/* Unix file system node */
#define	N_VXFS		32		/* Veritas file system node */
#define	N_XFS		33		/* XFS node */
@


1.47
log
@Revision 4.67
Add COMMAND column width control support.
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.46 2002/06/17 01:38:15 abe Exp abe $
d235 1
a235 1
#define	LSOF_URL	"ftp://vic.cc.purdue.edu/pub/tools/unix/lsof/"
@


1.46
log
@Revision 4.64
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.45 2002/01/14 15:51:36 abe Exp abe $
d476 1
@


1.45
log
@Revision 4.61
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.44 2001/10/17 19:24:37 abe Exp abe $
d265 3
a267 2
#define	N_FIFO		12		/* FIFO node */
#define	N_HSFS		13		/* High Sierra node */
d269 18
a286 18
#define	N_LOFS		15		/* loopback node */
#define	N_MNT		16		/* mount file system device node */
#define	N_MPC		17		/* multiplexed device node */
#define	N_MVFS		18		/* multi-volume file system node (?) */
#define	N_NFS		19		/* NFS node */
#define	N_NM		20		/* named file system node */
#define	N_OBJF		21		/* objfs file system node */
#define	N_PCFS		22		/* PC file system node */
#define	N_PIPE		23		/* pipe device node */
#define	N_PROC		24		/* /proc node */
#define	N_PSEU		25		/* pseudofs node */
#define	N_SOCK		26		/* sock_vnodeops node */
#define	N_SPEC		27		/* spec_vnodeops node */
#define	N_STREAM	28		/* stream node */
#define	N_TMP		29		/* tmpfs node */
#define	N_UFS		30		/* Unix file system node */
#define	N_VXFS		31		/* Veritas file system node */
#define	N_XFS		32		/* XFS node */
d540 3
@


1.44
log
@Revision 4.59
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.43 2001/10/15 12:12:31 abe Exp abe $
d278 8
a285 7
#define	N_SOCK		25		/* sock_vnodeops node */
#define	N_SPEC		26		/* spec_vnodeops node */
#define	N_STREAM	27		/* stream node */
#define	N_TMP		28		/* tmpfs node */
#define	N_UFS		29		/* Unix file system node */
#define	N_VXFS		30		/* Veritas file system node */
#define	N_XFS		31		/* XFS node */
@


1.43
log
@Revision 4.59
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.42 2001/09/04 17:47:54 abe Exp abe $
d507 1
@


1.42
log
@Revision 4.58
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.41 2001/06/19 13:23:39 abe Exp abe $
d392 3
@


1.41
log
@Revision 4.57
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.40 2001/02/13 02:07:25 abe Exp abe $
d205 13
@


1.40
log
@Revision 4.55
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.39 2000/12/04 13:53:32 abe Exp abe $
d51 5
d222 1
a222 1
#define	LSOF_URL	"ftp://vic.cc.purdue.edu/pub/tools/unix/lsof"
@


1.39
log
@Revision 4.53
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.38 2000/11/05 13:48:39 abe Exp abe $
d171 1
d200 1
a200 1
#define	IDINCR		10		/* PID/PGRP table malloc() increment */
d330 2
a331 2
#define	PGRPTTL		"PGRP"
extern int PgrpColW;
d369 1
a369 1
#define	SELPGRP		0x080		/* select process group IDs (-g) */
d416 8
d492 1
a492 1
extern int Fpgrp;
d528 1
a528 1
enum IDType {PGRP, PID};
d653 1
a653 1
	int pgrp;			/* process group ID */
d666 1
a666 1
extern int Mxpgrp;
d686 1
a686 1
extern int Npgrp;
d742 1
a742 1
extern struct int_lst *Spgrp;
@


1.38
log
@Revision 4.52
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.37 2000/08/01 17:05:03 abe Exp abe $
d236 30
a265 29
#define	N_AUSX		2		/* Auspex LFS node */
#define	N_AUTO		3		/* automount node */
#define	N_BLK		4		/* block device node */
#define	N_CACHE		5		/* cached file system node */
#define	N_CDFS		6		/* CD-ROM node */
#define	N_CFS		7		/* CFS node */
#define	N_CHR		8		/* character device node */
#define	N_COM		9		/* streams common device node */
#define	N_DOOR		10		/* DOOR node */
#define	N_FIFO		11		/* FIFO node */
#define	N_HSFS		12		/* High Sierra node */
#define	N_KERN		13		/* BSD /kern node */
#define	N_LOFS		14		/* loopback node */
#define	N_MNT		15		/* mount file system device node */
#define	N_MPC		16		/* multiplexed device node */
#define	N_MVFS		17		/* multi-volume file system node (?) */
#define	N_NFS		18		/* NFS node */
#define	N_NM		19		/* named file system node */
#define	N_OBJF		20		/* objfs file system node */
#define	N_PCFS		21		/* PC file system node */
#define	N_PIPE		22		/* pipe device node */
#define	N_PROC		23		/* /proc node */
#define	N_SOCK		24		/* sock_vnodeops node */
#define	N_SPEC		25		/* spec_vnodeops node */
#define	N_STREAM	26		/* stream node */
#define	N_TMP		27		/* tmpfs node */
#define	N_UFS		28		/* Unix file system node */
#define	N_VXFS		29		/* Veritas file system node */
#define	N_XFS		30		/* XFS node */
d458 1
d543 1
d559 1
@


1.37
log
@Revision 4.51
Convert to snpf().
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.36 2000/03/16 15:24:23 abe Exp abe $
d241 24
a264 23
#define	N_CHR		7		/* character device node */
#define	N_COM		8		/* streams common device node */
#define	N_DOOR		9		/* DOOR node */
#define	N_FIFO		10		/* FIFO node */
#define	N_HSFS		11		/* High Sierra node */
#define	N_KERN		12		/* BSD /kern node */
#define	N_LOFS		13		/* loopback node */
#define	N_MNT		14		/* mount file system device node */
#define	N_MPC		15		/* multiplexed device node */
#define	N_MVFS		16		/* multi-volume file system node (?) */
#define	N_NFS		17		/* NFS node */
#define	N_NM		18		/* named file system node */
#define	N_OBJF		19		/* objfs file system node */
#define	N_PCFS		20		/* PC file system node */
#define	N_PIPE		21		/* pipe device node */
#define	N_PROC		22		/* /proc node */
#define	N_SOCK		23		/* sock_vnodeops node */
#define	N_SPEC		24		/* spec_vnodeops node */
#define	N_STREAM	25		/* stream node */
#define	N_TMP		26		/* tmpfs node */
#define	N_UFS		27		/* Unix file system node */
#define	N_VXFS		28		/* Veritas file system node */
#define	N_XFS		29		/* XFS node */
d471 1
@


1.36
log
@Revision 4.49
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.35 100/01/14 08:57:28 abe Exp abe $
d579 8
a586 7
		int type;		/* state type: -1 == none
					 *		0 == TCP
					 *		1 == TPI or socket (SS_*) */
		union {
			int i;		/* integer state */
			unsigned int u;	/* unsigned integer state */
		} state;
d589 4
a592 4
		unsigned long rq;	/* receive queue length */
		unsigned long sq;	/* send queue length */
		unsigned char rqs;	/* rq status: 0 = none */
		unsigned char sqs;	/* sq status: 0 = none */
d596 4
a599 4
		unsigned char rws;	/* rw status: 0 = none */
		unsigned char wws;	/* ww status: 0 = none */
		unsigned long rw;	/* read window size */
		unsigned long ww;	/* write window size */
d658 1
@


1.35
log
@Revision 4.48
Make sure Fppid is always available for FieldSel[].
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.34 99/11/28 06:36:25 abe Exp Locker: abe $
d605 1
a605 1
# if	defined(HASNCACHE)
d607 1
a607 1
# endif	/* defined(HASNCACHE) */
@


1.34
log
@Revision 4.47
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.33 99/07/19 13:59:31 abe Exp Locker: abe $
a479 2

# if	defined(HASPPID)
a480 2
# endif	/* defined(HASPPID) */

@


1.33
log
@Revision 4.45
Add N_AUSX for Auspex LFS.
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.32 99/07/06 13:04:43 abe Exp Locker: abe $
d43 1
a43 1
# if	defined(HASFSTRUCT) && !defined(FSV_DEFAULT)
d45 1
a45 1
# endif	/* defined(HASFSTRUCT) && !defined(FSV_DEFAULT) */
a194 2

# if	defined(HASFSTRUCT)
a198 2
# endif	/* defined(HASFSTRUCT) */

d248 16
a263 15
#define	N_MPC		14		/* multiplexed device node */
#define	N_MVFS		15		/* multi-volume file system node (?) */
#define	N_NFS		16		/* NFS node */
#define	N_NM		17		/* named file system node */
#define	N_OBJF		18		/* objfs file system node */
#define	N_PCFS		19		/* PC file system node */
#define	N_PIPE		20		/* pipe device node */
#define	N_PROC		21		/* /proc node */
#define	N_SOCK		22		/* sock_vnodeops node */
#define	N_SPEC		23		/* spec_vnodeops node */
#define	N_STREAM	24		/* stream node */
#define	N_TMP		25		/* tmpfs node */
#define	N_UFS		26		/* Unix file system node */
#define	N_VXFS		27		/* Veritas file system node */
#define	N_XFS		28		/* XFS node */
a339 2

# if	defined(HASFSTRUCT)
a348 1
# endif	/* defined(HASFSTRUCT) */
d350 1
a485 2

# if	defined(HASFSTRUCT)
a487 2
# endif	/* defined(HASFSTRUCT) */

d512 2
@


1.32
log
@Revision 4.45
Pick lint.
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.31 99/06/22 09:58:33 abe Exp Locker: abe $
d240 27
a266 26
#define	N_AUTO		2		/* automount node */
#define	N_BLK		3		/* block device node */
#define	N_CACHE		4		/* cached file system node */
#define	N_CDFS		5		/* CD-ROM node */
#define	N_CHR		6		/* character device node */
#define	N_COM		7		/* streams common device node */
#define	N_DOOR		8		/* DOOR node */
#define	N_FIFO		9		/* FIFO node */
#define	N_HSFS		10		/* High Sierra node */
#define	N_KERN		11		/* BSD /kern node */
#define	N_LOFS		12		/* loopback node */
#define	N_MPC		13		/* multiplexed device node */
#define	N_MVFS		14		/* multi-volume file system node (?) */
#define	N_NFS		15		/* NFS node */
#define	N_NM		16		/* named file system node */
#define	N_OBJF		17		/* objfs file system node */
#define	N_PCFS		18		/* PC file system node */
#define	N_PIPE		19		/* pipe device node */
#define	N_PROC		20		/* /proc node */
#define	N_SOCK		21		/* sock_vnodeops node */
#define	N_SPEC		22		/* spec_vnodeops node */
#define	N_STREAM	23		/* stream node */
#define	N_TMP		24		/* tmpfs node */
#define	N_UFS		25		/* Unix file system node */
#define	N_VXFS		26		/* Veritas file system node */
#define	N_XFS		27		/* XFS node */
@


1.31
log
@Revision 4.44
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.30 99/05/09 16:57:51 abe Exp Locker: abe $
d56 1
@


1.30
log
@Revision 4.43
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.29 99/05/09 14:50:08 abe Exp Locker: abe $
d199 1
a199 1
#define	FSV_NA		0x8		/* file struct node address status */
d349 3
a351 3
#define	NATTL		"NODE-ADDR"
extern int NaColW;
extern char *NaTtl;
d389 8
@


1.29
log
@Revision 4.43
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.28 99/05/04 08:15:52 abe Exp Locker: abe $
d84 1
d92 2
d97 2
d142 1
@


1.28
log
@Revision 4.43
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.27 99/04/27 15:45:21 abe Exp Locker: abe $
d143 17
d616 1
d689 2
a690 1
extern struct pff_tab Pff_tab[];	/* print file flags table */
@


1.27
log
@Revision 4.43
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.26 99/02/27 13:23:19 abe Exp Locker: abe $
d70 73
d298 2
d344 6
a349 5
#define	SELNM		0x020		/* select by name */
#define	SELPGRP		0x040		/* select process group IDs (-g) */
#define	SELPID		0x080		/* select PIDs (-p) */
#define	SELUID		0x100		/* select UIDs (-u) */
#define	SELUNX		0x200		/* select Unix socket (-U) */
d360 1
d363 1
d446 1
d515 1
d533 1
d643 1
a643 1

@


1.26
log
@Revision 4.41
Make sure <utmp.h> follows <sys/types.h>.
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.25 99/02/25 20:06:29 abe Exp Locker: abe $
d102 2
a103 1
#define	FSV_NA		0x4		/* file struct node address status */
d247 2
d280 1
a280 1
#if	defined(HAS_AFS)
d287 1
a287 1
#endif	/* defined(HAS_AFS) */
d289 1
a289 1
#if	defined(HASNLIST)
d295 1
a295 1
#endif	/* defined(HASNLIST) */
d307 7
d382 1
d484 1
a484 1
#if	defined(HASTCPTPIQ)
d489 1
a489 1
#endif	/* defined(HASTCPTPIQ) */
d491 1
a491 1
#if	defined(HASTCPTPIW)
d496 1
a496 1
#endif	/* defined(HASTCPTPIW) */
d517 1
d574 9
a582 9
	char *arg;				/* argument */
	char *proto;				/* protocol */
	int af;					/* address family -- e.g.,
						 * AF_INET, AF_INET6 */
	unsigned char a[MAX_AF_ADDR];		/* address */
	int sport;				/* starting port */
	int eport;				/* ending port */
	int f;					/* find state */
	struct nwad *next;			/* forward link */
d588 4
@


1.25
log
@Revision 4.41
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.24 99/01/25 07:22:20 abe Exp Locker: abe $
a54 6
# if	defined(EMPTY)
#undef	EMPTY
# endif	/* defined(EMPTY) */

#include <utmp.h>

d71 9
@


1.24
log
@Revision 4.40
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.23 98/12/28 19:36:20 abe Exp Locker: abe $
d55 6
d115 3
a117 1
#define	LOGINML		9		/* login name length */
@


1.23
log
@Revision 4.39
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.22 98/12/28 10:13:57 abe Exp Locker: abe $
d163 6
d330 3
d456 1
a456 1
					 *		1 == TPI */
@


1.22
log
@Revision 4.39
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.21 98/11/23 07:34:50 abe Exp Locker: abe $
d478 4
@


1.21
log
@Revision 4.38
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.20 98/08/18 08:07:28 abe Exp Locker: abe $
d42 5
d89 7
d226 10
d349 5
d407 5
d472 1
a472 4
	KA_T na;			/* name cache lookup node address */
#  if	defined(HASNCAPID)
	unsigned long id;		/* capability ID */
#  endif	/* defined(HASNCAPID) */
d475 9
a483 3
# if	defined(HASLFILEADD)
	HASLFILEADD
# endif	/* defined(HASLFILEADD) */
@


1.20
log
@Revision 4.37
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.19 98/08/03 08:00:55 abe Exp Locker: abe $
d273 5
d302 1
a302 6

# if	defined(HASBLKDEV)
extern struct l_dev *BDevtp, **BSdev;
extern int BNdev;
# endif	/* defined(HASBLKDEV) */

@


1.19
log
@Revision 4.36
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.18 98/06/25 07:00:51 abe Exp Locker: abe $
d338 8
a345 1
extern struct str_lst *Fdl;
@


1.18
log
@Revision 4.34
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.17 98/06/18 07:57:56 abe Exp Locker: abe $
d90 1
a90 1
#define	IPROTOL		6		/* Internet protocol length */
@


1.17
log
@Revision 4.34
Change INODE column title to NODE.
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.16 98/05/22 14:01:20 abe Exp Locker: abe $
d357 4
a360 2
					 *	1: inode contains number
					 *	2: iproto contains string */
@


1.16
log
@Revision 4.33
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.15 98/04/03 13:12:02 abe Exp Locker: abe $
a194 2
#define INOTTL		"INODE"
extern int InoColW;
d197 2
@


1.15
log
@Revision 4.30
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.14 98/03/18 14:33:47 abe Exp Locker: abe $
d100 10
d390 11
a400 3
		int as;			/* address status: 0 == none */
		int p;			/* port */
		struct in_addr ia;	/* Internet address */
d496 3
a498 1
	unsigned char a[4];			/* address */
@


1.14
log
@Revision 4.29
Add lmi_srch to lproc structure.
Remove Mtab -- it must be obtained via readmnt().
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.13 98/03/06 07:23:17 abe Exp Locker: abe $
d161 4
@


1.13
log
@Revision 4.27
Add 64 bit kernel pointer support.
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.12 98/02/16 15:54:28 abe Exp Locker: abe $
d353 2
a438 1
extern struct mounts *Mtab;
@


1.12
log
@Revision 4.26
Update procfsid structure.
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.11 98/02/13 07:42:49 abe Exp Locker: abe $
d54 1
a54 1
 * Definitions of structures that may be needed by dlsof.h
d91 6
d407 1
a407 1
	unsigned long na;		/* name cache lookup node address */
@


1.11
log
@Revision 4.26
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.10 98/01/29 15:38:09 abe Exp Locker: abe $
d481 2
a483 6
#  if	defined(HASPINFO)
	unsigned char type;		/* type: 0 if one PID file in HASPROCFS
					 *       1 if one PID file in HASPINFO
					 *	 2 if all files in HASPINFO */
#  endif	/* defined(HASPINFO) */

d491 1
@


1.10
log
@Revision 4.25
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.9 97/12/11 15:43:49 abe Exp Locker: abe $
d286 1
@


1.9
log
@Revision 4.22
Add INADDR_LOOPBACK, MEMMOVE, XDR_PMAPLIST and XDR_VOID defaults.
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.8 97/10/24 08:00:40 abe Exp Locker: abe $
d129 6
d474 1
@


1.8
log
@Revision 4.18
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.7 97/10/10 08:26:54 abe Exp Locker: abe $
d85 5
d96 5
d150 3
d154 5
d292 1
@


1.7
log
@Revision 4.17
Add -V support.
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.6 97/09/23 09:20:28 abe Exp Locker: abe $
a71 1
#define	CMDL		9		/* command character length */
d79 3
d131 1
a131 1
#define	USERPRTL	8		/* login/UID print length */
d133 6
d140 1
d142 29
d329 2
a330 2
	unsigned long off;
	unsigned long sz;
d472 1
d484 4
@


1.6
log
@Revision 4.16
Add -T option support.
Add queue and window size info to lfile struct.
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.5 97/08/15 07:25:29 abe Exp Locker: abe $
d178 5
d185 4
a188 1
	int excl;			/* excluded state */
d196 1
d247 1
d401 1
d406 1
d442 2
a443 2
extern int *Spgrp;
extern int *Spid;
@


1.5
log
@Revision 4.15
Report TCP/TPI state.
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.4 97/04/29 06:45:48 abe Exp Locker: abe $
d119 5
d234 1
d307 15
@


1.4
log
@Revision 4.06
Define N_KERN for BSD /kern file system.
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.3 97/04/15 10:21:25 abe Exp Locker: abe $
d293 9
@


1.3
log
@Revision 4.04
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.2 97/04/07 08:14:40 abe Exp Locker: abe $
d100 17
a116 16
#define	N_LOFS		11		/* loopback node */
#define	N_MPC		12		/* multiplexed device node */
#define	N_MVFS		13		/* multi-volume file system node (?) */
#define	N_NFS		14		/* NFS node */
#define	N_NM		15		/* named file system node */
#define	N_OBJF		16		/* objfs file system node */
#define	N_PCFS		17		/* PC file system node */
#define	N_PIPE		18		/* pipe device node */
#define	N_PROC		19		/* /proc node */
#define	N_SOCK		20		/* sock_vnodeops node */
#define	N_SPEC		21		/* spec_vnodeops node */
#define	N_STREAM	22		/* stream node */
#define	N_TMP		23		/* tmpfs node */
#define	N_UFS		24		/* Unix file system node */
#define	N_VXFS		25		/* Veritas file system node */
#define	N_XFS		26		/* XFS node */
@


1.2
log
@Revision 4.03
Add optional VxFS state variable to lfile structure.
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.1 97/02/24 07:11:57 abe Exp Locker: abe $
d52 13
d193 1
d195 1
a198 7

struct l_dev {
	dev_t rdev;			/* device */
	ino_t inode;			/* inode number */
	char *name;			/* name */

};
@


1.1
log
@Initial revision
@
text
@d34 1
a34 1
 * $Id: lsof.h,v 1.52 97/01/17 09:36:11 abe Exp $
d253 5
@
