head	1.5;
access;
symbols;
locks; strict;
comment	@ * @;


1.5
date	2000.08.01.17.08.05;	author abe;	state Exp;
branches;
next	1.4;

1.4
date	98.12.28.10.15.51;	author abe;	state Exp;
branches;
next	1.3;

1.3
date	98.03.06.07.27.00;	author abe;	state Exp;
branches;
next	1.2;

1.2
date	97.10.24.08.01.47;	author abe;	state Exp;
branches;
next	1.1;

1.1
date	97.02.24.07.12.35;	author abe;	state Exp;
branches;
next	;


desc
@Lsof version 4
@


1.5
log
@Revision 4.51
Convert to snpf().
@
text
@/*
 * node.c - common node reading functions for lsof
 */


/*
 * Copyright 1994 Purdue Research Foundation, West Lafayette, Indiana
 * 47907.  All rights reserved.
 *
 * Written by Victor A. Abell
 *
 * This software is not subject to any license of the American Telephone
 * and Telegraph Company or the Regents of the University of California.
 *
 * Permission is granted to anyone to use this software for any purpose on
 * any computer system, and to alter it and redistribute it freely, subject
 * to the following restrictions:
 *
 * 1. Neither the authors nor Purdue University are responsible for any
 *    consequences of the use of this software.
 *
 * 2. The origin of this software must not be misrepresented, either by
 *    explicit claim or by omission.  Credit to the authors and Purdue
 *    University must appear in documentation and sources.
 *
 * 3. Altered versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 *
 * 4. This notice may not be removed or altered.
 */

#ifndef lint
static char copyright[] =
"@@(#) Copyright 1994 Purdue Research Foundation.\nAll rights reserved.\n";
static char *rcsid = "$Id: node.c,v 1.4 1998/12/28 10:15:51 abe Exp abe $";
#endif


#include "lsof.h"


/*
 * print_kptr() - print kernel pointer
 */

char *
print_kptr(kp, buf, bufl)
	KA_T kp;			/* kernel pointer address */
	char *buf;			/* optional destination buffer */
	size_t bufl;			/* size of buf[] */
{
	static char dbuf[32];

	(void) snpf(buf ? buf : dbuf,
		    buf ? bufl : sizeof(dbuf),
		    KA_T_FMT_X, kp);
	return(buf ? buf : dbuf);
}


#if	defined(HASCDRNODE)
/*
 * readcdrnode() - read CD-ROM node
 */

int
readcdrnode(ca, c)
	KA_T ca;			/* cdrnode kernel address */
	struct cdrnode *c;		/* cdrnode buffer */
{
	if (kread((KA_T)ca, (char *)c, sizeof(struct cdrnode))) {
	    (void) snpf(Namech, Namechl, "can't read cdrnode at %s",
		print_kptr(ca, (char *)NULL, 0));
	    return(1);
	}
	return(0);
}
#endif	/* defined(HASCDRNODE) */


#if	defined(HASFIFONODE)
/*
 * readfifonode() - read fifonode
 */

int
readfifonode(fa, f)
	KA_T fa;			/* fifonode kernel address */
	struct fifonode *f;		/* fifonode buffer */
{
	if (kread((KA_T)fa, (char *)f, sizeof(struct fifonode))) {
	    (void) snpf(Namech, Namechl, "can't read fifonode at %s",
		print_kptr(fa, (char *)NULL, 0));
	    return(1);
	}
	return(0);
}
#endif	/* defined(HASFIFONODE) */


#if	defined(HASGNODE)
/*
 * readgnode() - read gnode
 */

int
readgnode(ga, g)
	KA_T ga;			/* gnode kernel address */
	struct gnode *g;		/* gnode buffer */
{
	if (kread((KA_T)ga, (char *)g, sizeof(struct gnode))) {
	    (void) snpf(Namech, Namechl, "can't read gnode at %s",
		print_kptr(ga, (char *)NULL, 0));
	    return(1);
	}
	return(0);
}
#endif	/* defined(HASGNODE) */


#if	defined(HASHSNODE)
/*
 * readhsnode() - read High Sierra file system node
 */

int
readhsnode(ha, h)
	KA_T ha;			/* hsnode kernel address */
	struct hsnode *h;		/* hsnode buffer */
{
	if (kread((KA_T)ha, (char *)h, sizeof(struct hsnode))) {
	    (void) snpf(Namech, Namechl, "can't read hsnode at %s",
		print_kptr(ha, (char *)NULL, 0));
	    return(1);
	}
	return(0);
}
#endif	/* defined(HASHSNODE) */


#if	defined(HASINODE)
/*
 * readinode() - read inode
 */

int
readinode(ia, i)
	KA_T ia;			/* inode kernel address */
	struct inode *i;		/* inode buffer */
{
	if (kread((KA_T)ia, (char *)i, sizeof(struct inode))) {
	    (void) snpf(Namech, Namechl, "can't read inode at %s",
		print_kptr(ia, (char *)NULL, 0));
	    return(1);
	}
	return(0);
}
#endif	/* defined(HASINODE) */


#if	defined(HASPIPENODE)
/*
 * readpipenode() - read pipe node
 */

int
readpipenode(pa, p)
	KA_T pa;			/* pipe node kernel address */
	struct pipenode *p;		/* pipe node buffer */
{
	if (kread((KA_T)pa, (char *)p, sizeof(struct pipenode))) {
	    (void) snpf(Namech, Namechl, "can't read pipenode at %s",
		print_kptr(pa, (char *)NULL, 0));
	    return(1);
	}
	return(0);
}
#endif	/* defined(HASPIPENODE) */


#if	defined(HASRNODE)
/*
 * readrnode() - read rnode
 */

int
readrnode(ra, r)
	KA_T ra;			/* rnode kernel space address */
	struct rnode *r;		/* rnode buffer pointer */
{
	if (kread((KA_T)ra, (char *)r, sizeof(struct rnode))) {
	    (void) snpf(Namech, Namechl, "can't read rnode at %s",
		print_kptr(ra, (char *)NULL, 0));
	    return(1);
	}
	return(0);
}
#endif	/* defined(HASRNODE) */


#if	defined(HASSNODE)
/*
 * readsnode() - read snode
 */

int
readsnode(sa, s)
	KA_T sa;			/* snode kernel space address */
	struct snode *s;		/* snode buffer pointer */
{
	if (kread((KA_T)sa, (char *)s, sizeof(struct snode))) {
	    (void) snpf(Namech, Namechl, "can't read snode at %s",
		print_kptr(sa, (char *)NULL, 0));
	    return(1);
	}
	return(0);
}
#endif	/* defined(HASSNODE) */


#if	defined(HASTMPNODE)
/*
 * readtnode() - read tmpnode
 */

int
readtnode(ta, t)
	KA_T ta;			/* tmpnode kernel space address */
	struct tmpnode *t;		/* tmpnode buffer pointer */
{
	if (kread((KA_T)ta, (char *)t, sizeof(struct tmpnode))) {
	    (void) snpf(Namech, Namechl, "can't read tmpnode at %s",
		print_kptr(ta, (char *)NULL, 0));
	    return(1);
	}
	return(0);
}
#endif	/* defined(HASTMPNODE) */


#if	defined(HASVNODE)
/*
 * readvnode() - read vnode
 */

int
readvnode(va, v)
	KA_T va;			/* vnode kernel space address */
	struct vnode *v;		/* vnode buffer pointer */
{
	if (kread((KA_T)va, (char *)v, sizeof(struct vnode))) {
	    (void) snpf(Namech, Namechl, "can't read vnode at %s",
		print_kptr(va, (char *)NULL, 0));
	    return(1);
	}
	return(0);
}
#endif	/* defined(HASVNODE) */
@


1.4
log
@Revision 4.39
@
text
@d35 1
a35 1
static char *rcsid = "$Id: node.c,v 1.3 98/03/06 07:27:00 abe Exp Locker: abe $";
d47 1
a47 1
print_kptr(kp, buf)
d50 1
d54 3
a56 1
	(void) sprintf(buf ? buf : dbuf, KA_T_FMT_X, kp);
d59 2
d72 2
a73 2
	    (void) sprintf(Namech, "can't read cdrnode at %s",
		print_kptr(ca, (char *)NULL));
d92 2
a93 2
	    (void) sprintf(Namech, "can't read fifonode at %s",
		print_kptr(fa, (char *)NULL));
d112 2
a113 2
	    (void) sprintf(Namech, "can't read gnode at %s",
		print_kptr(ga, (char *)NULL));
d132 2
a133 2
	    (void) sprintf(Namech, "can't read hsnode at %s",
		print_kptr(ha, (char *)NULL));
d152 2
a153 2
	    (void) sprintf(Namech, "can't read inode at %s",
		print_kptr(ia, (char *)NULL));
d172 2
a173 2
	    (void) sprintf(Namech, "can't read pipenode at %s",
		print_kptr(pa, (char *)NULL));
d192 2
a193 2
	    (void) sprintf(Namech, "can't read rnode at %s",
		print_kptr(ra, (char *)NULL));
d212 2
a213 2
	    (void) sprintf(Namech, "can't read snode at %s",
		print_kptr(sa, (char *)NULL));
d232 2
a233 2
	    (void) sprintf(Namech, "can't read tmpnode at %s",
		print_kptr(ta, (char *)NULL));
d252 2
a253 2
	    (void) sprintf(Namech, "can't read vnode at %s",
		print_kptr(va, (char *)NULL));
@


1.3
log
@Revision 4.27
Use 4 character TABs.
Support 64 bit kernel addresses.
@
text
@d35 1
a35 1
static char *rcsid = "$Id: node.c,v 1.2 97/10/24 08:01:47 abe Exp Locker: abe $";
d48 1
a48 1
	KA_T kp;			/* node address */
@


1.2
log
@Revision 4.18
@
text
@d35 1
a35 1
static char *rcsid = "$Id: node.c,v 1.1 97/02/24 07:12:35 abe Exp Locker: abe $";
d42 14
d63 1
a63 1
	caddr_t ca;			/* cdrnode kernel address */
d67 3
a69 3
		(void) sprintf(Namech, "can't read cdrnode at %#lx",
			(unsigned long)ca);
		return(1);
d83 1
a83 1
	caddr_t fa;			/* fifonode kernel address */
d87 3
a89 3
		(void) sprintf(Namech, "can't read fifonode at %#lx",
			(unsigned long)fa);
		return(1);
d103 1
a103 1
	caddr_t ga;			/* gnode kernel address */
d107 3
a109 3
		(void) sprintf(Namech, "can't read gnode at %#lx",
			(unsigned long)ga);
		return(1);
d123 1
a123 1
	caddr_t ha;			/* hsnode kernel address */
d127 3
a129 3
		(void) sprintf(Namech, "can't read hsnode at %#lx",
			(unsigned long)ha);
		return(1);
d143 1
a143 1
	struct inode *ia;		/* inode kernel address */
d147 3
a149 3
		(void) sprintf(Namech, "can't read inode at %#lx",
			(unsigned long)ia);
		return(1);
d163 1
a163 1
	caddr_t pa;			/* pipe node kernel address */
d167 3
a169 3
		(void) sprintf(Namech, "can't read pipenode at %#lx",
			(unsigned long)pa);
		return(1);
d183 1
a183 1
	caddr_t ra;			/* rnode kernel space address */
d187 3
a189 3
		(void) sprintf(Namech, "can't read rnode at %#lx",
			(unsigned long)ra);
		return(1);
d203 1
a203 1
	caddr_t sa;			/* snode kernel space address */
d207 3
a209 3
		(void) sprintf(Namech, "can't read snode at %#lx",
			(unsigned long)sa);
		return(1);
d223 1
a223 1
	caddr_t ta;			/* tmpnode kernel space address */
d227 3
a229 3
		(void) sprintf(Namech, "can't read tmpnode at %#lx",
			(unsigned long)ta);
		return(1);
d243 1
a243 1
	caddr_t va;			/* vnode kernel space address */
d247 3
a249 3
		(void) sprintf(Namech, "can't read vnode at %#lx",
			(unsigned long)va);
		return(1);
@


1.1
log
@Initial revision
@
text
@d35 1
a35 1
static char *rcsid = "$Id: node.c,v 1.3 96/06/28 11:07:55 abe Exp $";
d53 2
a54 1
		(void) sprintf(Namech, "can't read cdrnode at %#x", ca);
d73 2
a74 1
		(void) sprintf(Namech, "can't read fifonode at %#x", fa);
d93 2
a94 1
		(void) sprintf(Namech, "can't read gnode at %#x", ga);
d113 2
a114 1
		(void) sprintf(Namech, "can't read hsnode at %#x", ha);
d133 2
a134 1
		(void) sprintf(Namech, "can't read inode at %#x", ia);
d153 2
a154 1
		(void) sprintf(Namech, "can't read pipenode at %#x", pa);
d173 2
a174 1
		(void) sprintf(Namech, "can't read rnode at %#x", ra);
d193 2
a194 1
		(void) sprintf(Namech, "can't read snode at %#x", sa);
d213 2
a214 1
		(void) sprintf(Namech, "can't read tmpnode at %#x", ta);
d233 2
a234 1
		(void) sprintf(Namech, "can't read vnode at %#x", va);
@
