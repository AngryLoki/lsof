head	1.33;
access;
symbols;
locks; strict;
comment	@ * @;


1.33
date	2018.02.14.14.20.14;	author abe;	state Exp;
branches;
next	1.32;

1.32
date	2014.10.13.22.36.20;	author abe;	state Exp;
branches;
next	1.31;

1.31
date	2013.01.02.17.14.59;	author abe;	state Exp;
branches;
next	1.30;

1.30
date	2011.09.07.19.13.49;	author abe;	state Exp;
branches;
next	1.29;

1.29
date	2010.07.29.15.59.28;	author abe;	state Exp;
branches;
next	1.28;

1.28
date	2008.10.21.16.21.41;	author abe;	state Exp;
branches;
next	1.27;

1.27
date	2008.04.15.13.24.19;	author abe;	state Exp;
branches;
next	1.26;

1.26
date	2007.04.24.16.16.59;	author abe;	state Exp;
branches;
next	1.25;

1.25
date	2006.09.15.18.58.03;	author abe;	state Exp;
branches;
next	1.24;

1.24
date	2006.03.27.23.04.25;	author abe;	state Exp;
branches;
next	1.23;

1.23
date	2005.05.11.13.02.46;	author abe;	state Exp;
branches;
next	1.22;

1.22
date	2004.07.06.19.09.32;	author abe;	state Exp;
branches;
next	1.21;

1.21
date	2004.03.10.23.44.56;	author abe;	state Exp;
branches;
next	1.20;

1.20
date	2003.03.21.17.25.10;	author abe;	state Exp;
branches;
next	1.19;

1.19
date	2002.12.13.14.44.08;	author abe;	state Exp;
branches;
next	1.18;

1.18
date	2002.12.05.12.08.53;	author abe;	state Exp;
branches;
next	1.17;

1.17
date	2001.11.01.20.21.11;	author abe;	state Exp;
branches;
next	1.16;

1.16
date	2001.10.17.19.24.37;	author abe;	state Exp;
branches;
next	1.15;

1.15
date	2001.06.19.13.24.29;	author abe;	state Exp;
branches;
next	1.14;

1.14
date	2001.02.13.02.11.01;	author abe;	state Exp;
branches;
next	1.13;

1.13
date	2000.08.01.17.18.24;	author abe;	state Exp;
branches;
next	1.12;

1.12
date	2000.05.31.12.59.06;	author abe;	state Exp;
branches;
next	1.11;

1.11
date	99.07.19.13.59.58;	author abe;	state Exp;
branches;
next	1.10;

1.10
date	99.06.22.09.56.58;	author abe;	state Exp;
branches;
next	1.9;

1.9
date	99.05.04.08.14.04;	author abe;	state Exp;
branches;
next	1.8;

1.8
date	99.04.27.15.41.03;	author abe;	state Exp;
branches;
next	1.7;

1.7
date	99.02.15.13.44.16;	author abe;	state Exp;
branches;
next	1.6;

1.6
date	99.01.25.07.22.35;	author abe;	state Exp;
branches;
next	1.5;

1.5
date	98.12.28.10.18.29;	author abe;	state Exp;
branches;
next	1.4;

1.4
date	98.07.17.08.25.11;	author abe;	state Exp;
branches;
next	1.3;

1.3
date	98.05.22.14.01.31;	author abe;	state Exp;
branches;
next	1.2;

1.2
date	98.02.23.10.07.05;	author abe;	state Exp;
branches;
next	1.1;

1.1
date	98.02.15.16.57.24;	author abe;	state Exp;
branches;
next	;


desc
@At revision 4.26 extracted the usage function from arg.c and put it
in this source file, thus making room in arg.c for the ck_file_arg()
function that formerly resided in lib/ckfa.c.
@


1.33
log
@Revision 4.90
@
text
@/*
 * usage.c - usage functions for lsof
 */


/*
 * Copyright 1998 Purdue Research Foundation, West Lafayette, Indiana
 * 47907.  All rights reserved.
 *
 * Written by Victor A. Abell
 *
 * This software is not subject to any license of the American Telephone
 * and Telegraph Company or the Regents of the University of California.
 *
 * Permission is granted to anyone to use this software for any purpose on
 * any computer system, and to alter it and redistribute it freely, subject
 * to the following restrictions:
 *
 * 1. Neither the authors nor Purdue University are responsible for any
 *    consequences of the use of this software.
 *
 * 2. The origin of this software must not be misrepresented, either by
 *    explicit claim or by omission.  Credit to the authors and Purdue
 *    University must appear in documentation and sources.
 *
 * 3. Altered versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 *
 * 4. This notice may not be removed or altered.
 */

#ifndef lint
static char copyright[] =
"@@(#) Copyright 1998 Purdue Research Foundation.\nAll rights reserved.\n";
static char *rcsid = "$Id: usage.c,v 1.32 2014/10/13 22:36:20 abe Exp abe $";
#endif


#include "lsof.h"
#include "version.h"


/*
 * Local function prototypes
 */

_PROTOTYPE(static char *isnullstr,(char *s));
_PROTOTYPE(static int print_in_col,(int col, char *cp));
_PROTOTYPE(static void report_HASDCACHE,(int type, char *ttl, char *det));
_PROTOTYPE(static void report_HASKERNIDCK,(char *pfx, char *verb));
_PROTOTYPE(static void report_SECURITY,(char *pfx, char *punct));
_PROTOTYPE(static void report_WARNDEVACCESS,(char *pfx, char *verb,
					     char *punct));


/*
 * isnullstr() - is it a null string?
 */

static char *
isnullstr(s)
	char *s;			/* string pointer */
{
	if (!s)
		return((char *)NULL);
	while (*s) {
		if (*s != ' ')
			return(s);
		s++;
	}
	return((char *)NULL);
}


/*
 * print_in_col() -- print character string in help column
 */

static int
print_in_col(col, cp)
	int col;				/* column number */
	char *cp;				/* what to print */
{
	if (cp && *cp) {
	    switch (col) {
	    case 1:
		(void) fprintf(stderr, "  %-23.23s", cp);
		break;
	    case 2:
		(void) fprintf(stderr, "  %-25.25s", cp);
		break;
	    default:
		(void) fprintf(stderr, "  %s\n", cp);
		col = 0;
	    }
	    col++;
	}
	return(col);
}


/*
 * report_HASDCACHE() -- report device cache file state
 */

static void
report_HASDCACHE(type, ttl, det)
	int type;				/* type: 0 == read path report
						 *       1 == full report */
	char *ttl;				/* title lines prefix
						 * (NULL if none) */
	char *det;				/* detail lines prefix
						 * (NULL if none) */
{

#if	defined(HASDCACHE)
	char *cp;
	int dx;

# if	defined(WILLDROPGID)
	int saved_Setgid = Setgid;

	Setgid = 0;
# endif	/* defined(WILLDROPGID) */

	if (type) {

	/*
	 * Report full device cache information.
	 */
	    (void) fprintf(stderr, "%sDevice cache file read-only paths:\n",
		ttl ? ttl : "");
	    if ((dx = dcpath(1, 0)) < 0)
		(void) fprintf(stderr, "%snone\n", det ? det : "");
	    else {
		(void) fprintf(stderr, "%sNamed via -D: %s\n",
		    det ? det : "",
		    DCpath[0] ? DCpath[0] : "none");

# if	defined(HASENVDC)
		(void) fprintf(stderr,
		    "%sNamed in environment variable %s: %s\n",
		    det ? det : "",
		    HASENVDC, DCpath[1] ? DCpath[1] : "none");
# endif	/* defined(HASENVDC) */

# if	defined(HASSYSDC)
		if (DCpath[2])
		    (void) fprintf(stderr,
			"%sSystem-wide device cache: %s\n",
			det ? det : "",
			DCpath[2]);
# endif	/* defined(HASSYSDC) */

# if	defined(HASPERSDC)
		(void) fprintf(stderr,
		    "%sPersonal path format (HASPERSDC): \"%s\"\n",
		    det ? det : "",
		    HASPERSDC);
#  if	defined(HASPERSDCPATH)
		(void) fprintf(stderr,
		    "%sModified personal path environment variable: %s\n",
		    det ? det : "",
		    HASPERSDCPATH);
		cp = getenv(HASPERSDCPATH);
		(void) fprintf(stderr, "%s%s value: %s\n",
		    det ? det : "",
		    HASPERSDCPATH, cp ? cp : "none");
#  endif	/* defined(HASPERSDCPATH) */
		(void) fprintf(stderr, "%sPersonal path: %s\n",
		    det ? det : "",
		    DCpath[3] ? DCpath[3] : "none");
# endif	/* defined(HASPERSDC) */
	    }
	    (void) fprintf(stderr, "%sDevice cache file write paths:\n",
		ttl ? ttl : "");
	    if ((dx = dcpath(2, 0)) < 0)
		(void) fprintf(stderr, "%snone\n", det ? det : "");
	    else {
		(void) fprintf(stderr, "%sNamed via -D: %s\n",
		    det ? det : "",
		    DCstate == 2 ? "none"
				 : DCpath[0] ? DCpath[0] : "none");

# if	defined(HASENVDC)
		(void) fprintf(stderr,
		    "%sNamed in environment variable %s: %s\n",
		    det ? det : "",
		    HASENVDC, DCpath[1] ? DCpath[1] : "none");
# endif	/* defined(HASENVDC) */

# if	defined(HASPERSDC)
		(void) fprintf(stderr,
		    "%sPersonal path format (HASPERSDC): \"%s\"\n",
		    det ? det : "",
		    HASPERSDC);
#  if	defined(HASPERSDCPATH)
		(void) fprintf(stderr,
		    "%sModified personal path environment variable: %s\n",
		    det ? det : "",
		    HASPERSDCPATH);
		cp = getenv(HASPERSDCPATH);
		(void) fprintf(stderr, "%s%s value: %s\n",
		    det ? det : "",
		    HASPERSDCPATH, cp ? cp : "none");
#  endif	/* defined(HASPERSDCPATH) */
		 (void) fprintf(stderr, "%sPersonal path: %s\n",
		    det ? det : "",
		    DCpath[3] ? DCpath[3] : "none");
# endif	/* defined(HASPERSDC) */
	    }
	} else {

	/*
	 * Report device cache read file path.
	 */

# if	defined(HASENVDC) || defined(HASPERSDC) || defined(HASSYSDC)
	    cp = NULL;
#  if	defined(HASENVDC)
	    if ((dx = dcpath(1, 0)) >= 0)
		cp = DCpath[1];
#  endif	/* defined(HASENVDC) */
#  if	defined(HASSYSDC)
	    if (!cp)
		cp = HASSYSDC;
#  endif	/* defined(HASSYSDC) */
#  if	defined(HASPERSDC)
	    if (!cp && dx != -1 && (dx = dcpath(1, 0)) >= 0)
		cp = DCpath[3];
#  endif	/* defined(HASPERSDC) */
	    if (cp)
		(void) fprintf(stderr,
		    "%s%s is the default device cache file read path.\n",
		    ttl ? ttl : "",
		    cp
		);
# endif    /* defined(HASENVDC) || defined(HASPERSDC) || defined(HASSYSDC) */
	}

# if	defined(WILLDROPGID)
	Setgid = saved_Setgid;
# endif	/* defined(WILLDROPGID) */

#endif	/* defined(HASDCACHE) */

}


/*
 * report_HASKERNIDCK() -- report HASKERNIDCK state
 */

static void
report_HASKERNIDCK(pfx, verb)
	char *pfx;				/* prefix (NULL if none) */
	char *verb;				/* verb (NULL if none) */
{
	(void) fprintf(stderr, "%sernel ID check %s%s%s.\n",
	    pfx ? pfx : "",
	    verb ? verb : "",
	    verb ? " " : "",

#if	defined(HASKERNIDCK)
		"enabled"
#else	/* !defined(HASKERNIDCK) */
		"disabled"
#endif	/* defined(HASKERNIDCK) */

	    );
}


/*
 * report_SECURITY() -- report *SECURITY states
 */

static void
report_SECURITY(pfx, punct)
	char *pfx;				/* prefix (NULL if none) */
	char *punct;				/* short foem punctuation
						 * (NULL if none) */
{
	fprintf(stderr, "%s%s can list all files%s",
	    pfx ? pfx : "",

#if	defined(HASSECURITY)
	    "Only root",
# if	defined(HASNOSOCKSECURITY)
	    ", but anyone can list socket files.\n"
# else	/* !defined(HASNOSOCKSECURITY) */
	    punct ? punct : ""
# endif	/* defined(HASNOSOCKSECURITY) */
#else	/* !defined(HASSECURITY) */
	    "Anyone",
	    punct ? punct : ""
#endif	/* defined(HASSECURITY) */

	);
}


/*
 * report_WARNDEVACCESS() -- report WEARNDEVACCESS state
 */

static void
report_WARNDEVACCESS(pfx, verb, punct)
	char *pfx;				/* prefix (NULL if none) */
	char *verb;				/* verb (NULL if none) */
	char *punct;				/* punctuation */
{
	(void) fprintf(stderr, "%s/dev warnings %s%s%s%s",
	    pfx ? pfx : "",
	    verb ? verb : "",
	    verb ? " " : "",

#if	defined(WARNDEVACCESS)
	    "enabled",
#else	/* !defined(WARNDEVACCESS) */
	    "disabled",
#endif	/* defined(WARNDEVACCESS) */

	    punct);
}


/*
 * usage() - display usage and exit
 */

void
usage(xv, fh, version)
	int xv;				/* exit value */
	int fh;				/* ``-F ?'' status */
	int version;			/* ``-v'' status */
{
	char buf[MAXPATHLEN+1], *cp, *cp1, *cp2;
	int col, i;

	if (Fhelp || xv) {
	    (void) fprintf(stderr, "%s %s\n latest revision: %s\n",
		Pn, LSOF_VERSION, LSOF_URL);
	    (void) fprintf(stderr, " latest FAQ: %sFAQ\n", LSOF_URL);
	    (void) fprintf(stderr, " latest man page: %slsof_man\n", LSOF_URL);
	    (void) fprintf(stderr,
		" usage: [-?ab%sh%slnNoOP%s%stUvV%s]",

#if	defined(HASNCACHE)
		"C",
#else	/* !defined(HASNCACHE) */
		"",
#endif	/* defined(HASNCACHE) */

#if	defined(HASTASKS)
		"K",
#else	/* !defined(HASTASKS) */
		"",
#endif	/* defined(HASTASKS) */

#if	defined(HASPPID)
		"R",
#else	/* !defined(HASPPID) */
		"",
#endif	/* defined(HASPPID) */

#if	defined(HASTCPUDPSTATE)
		"",
#else	/* !defined(HASTCPUDPSTATE) */
		"s",
#endif	/* defined(HASTCPUDPSTATE) */

#if	defined(HASXOPT)
# if	defined(HASXOPT_ROOT)
		(Myuid == 0) ? "X" : ""
# else	/* !defined(HASXOPT_ROOT) */
		"X"
# endif	/* defined(HASXOPT_ROOT) */
#else	/* !defined(HASXOPT) */
		""
#endif	/* defined(HASXOPT) */

	    );

#if	defined(HAS_AFS) && defined(HASAOPT)
	    (void) fprintf(stderr, " [-A A]");
#endif	/* defined(HAS_AFS) && defined(HASAOPT) */

	    (void) fprintf(stderr, " [+|-c c] [+|-d s] [+%sD D]%s",
#if	defined(HASDCACHE)
		"|-",
#else	/* !defined(HASDCACHE) */
		"",
#endif	/* defined(HASDCACHE) */

#if	defined(HASEPTOPTS)
		" [+|-E]"
#else	/* !defined(HASEPTOPTS) */
		""
#endif	/* defined(HASEPTOPTS) */

		);

	    (void) fprintf(stderr,
		" %s[+|-f%s%s%s%s%s%s]\n [-F [f]] [-g [s]] [-i [i]]",

#if	defined(HASEOPT)
		"[+|-e s] ",
#else	/* !defined(HASEOPT) */
		"",
#endif	/* defined(HASEOPT) */

#if	defined(HASFSTRUCT)
		"[",

# if	defined(HASNOFSCOUNT)
		"",
# else	/* !defined(HASNOFSCOUNT) */
		"c",
# endif	/* defined(HASNOFSCOUNT) */

# if	defined(HASNOFSADDR)
		"",
# else	/* !defined(HASNOFSADDR) */
		"f",
# endif	/* defined(HASNOFSADDR) */

# if	defined(HASNOFSFLAGS)
		"",
# else	/* !defined(HASNOFSFLAGS) */
		"gG",
# endif	/* defined(HASNOFSFLAGS) */

# if	defined(HASNOFSNADDR)
		"",
# else	/* !defined(HASNOFSNADDR) */
		"n",
# endif	/* defined(HASNOFSNADDR) */

		"]"
#else	/* !defined(HASFSTRUCT) */
		"", "", "", "", "", ""
#endif	/* defined(HASFSTRUCT) */

		);

#if	defined(HASKOPT)
	    (void) fprintf(stderr, " [-k k]");
#endif	/* defined(HASKOPT) */

	    (void) fprintf(stderr, " [+|-L [l]]");

#if	defined(HASMOPT) || defined(HASMNTSUP)
	    (void) fprintf(stderr,
# if	defined(HASMOPT)
#  if	defined(HASMNTSUP)
		" [+|-m [m]]"
#  else	/* !defined(HASMNTSUP) */
		" [-m m]"
#  endif	/* defined(HASMNTSUP) */
# else	/* !defined(HASMOPT) */
		" [+m [m]]"
# endif	/* defined(HASMOPT) */
		);
#endif	/* defined(HASMOPT) || defined(HASMNTSUP) */

#if	!defined(HASNORPC_H)
	    (void) fprintf(stderr, " [+|-M]");
#endif	/* !defined(HASNORPC_H) */

	    (void) fprintf(stderr,
		" [-o [o]] [-p s]\n [+|-r [t]]%s [-S [t]] [-T [t]]",

#if	defined(HASTCPUDPSTATE)
		" [-s [p:s]]"
#else	/* !defined(HASTCPUDPSTATE) */
		""
#endif	/* defined(HASTCPUDPSTATE) */

		);
	    (void) fprintf(stderr, " [-u s] [+|-w] [-x [fl]]");

#if	defined(HASZONES)
	    (void) fprintf(stderr, " [-z [z]]");
#else	/* !defined(HASZONES) */
# if	defined(HASSELINUX)
	    if (CntxStatus)
		(void) fprintf(stderr, " [-Z [Z]]");
# endif	/* defined(HASSELINUX) */
#endif	/* defined(HASZONES) */

	    (void) fprintf(stderr, " [--] [names]\n");
	}
	if (xv && !Fhelp) {
	    (void) fprintf(stderr,
		"Use the ``-h'' option to get more help information.\n");
	    if (!fh)
    		Exit(xv);
	}
	if (Fhelp) {
	    (void) fprintf(stderr,
		"Defaults in parentheses; comma-separated set (s) items;");
	    (void) fprintf(stderr, " dash-separated ranges.\n");
	    col = print_in_col(1, "-?|-h list help");
	    col = print_in_col(col, "-a AND selections (OR)");
	    col = print_in_col(col, "-b avoid kernel blocks");
	    col = print_in_col(col,  "-c c  cmd c ^c /c/[bix]");
	    (void) snpf(buf, sizeof(buf), "+c w  COMMAND width (%d)", CMDL);
	    col = print_in_col(col, buf);

#if	defined(HASNCACHE)
	   col = print_in_col(col, "-C no kernel name cache");
#endif	/* defined(HASNCACHE) */

	    col = print_in_col(col, "+d s  dir s files");
	    col = print_in_col(col,  "-d s  select by FD set");
	    col = print_in_col(col,  "+D D  dir D tree *SLOW?*");

#if	defined(HASDCACHE)
	    if (Setuidroot)
		cp = "?|i|r";

# if	!defined(WILLDROPGID)
	    else if (Myuid)
		cp = "?|i|r<path>";
# endif	/* !defined(WILLDROPGID) */

	    else
		cp = "?|i|b|r|u[path]";
	    (void) snpf(buf, sizeof(buf), "-D D  %s", cp);
#else	/* !defined(HASDCACHE) */
	    buf[0] = '\0';
#endif	/* defined(HASDCACHE) */

	    col = print_in_col(col, buf);

#if	defined(HASEOPT)
	    col = print_in_col(col, "+|-e s  exempt s *RISKY*");
#endif	/* defined(HASEOPT) */

	    (void) snpf(buf, sizeof(buf), "-i select IPv%s files",

#if	defined(HASIPv6)
			  "[46]"
#else	/* !defined(HASIPv6) */
			  "4"
#endif	/* defined(HASIPv6) */

			  );
	    col = print_in_col(col, buf);

#if	defined(HASTASKS)
/* DEBUG	    col = print_in_col(col, "-K list tasKs (threads)");	*/
	    col = print_in_col(col, "-K [i] list|(i)gn tasKs");
#endif	/* defined(HASTASKS) */

	    col = print_in_col(col, "-l list UID numbers");
	    col = print_in_col(col, "-n no host names");
	    col = print_in_col(col, "-N select NFS files");
	    col = print_in_col(col, "-o list file offset");
	    col = print_in_col(col, "-O no overhead *RISKY*");
	    col = print_in_col(col, "-P no port names");

#if	defined(HASPPID)
	     col = print_in_col(col, "-R list paRent PID");
#endif	/* defined(HASPPID) */

	    col = print_in_col(col,  "-s list file size");
	    col = print_in_col(col,  "-t terse listing");
	    col = print_in_col(col,  "-T disable TCP/TPI info");
	    col = print_in_col(col,  "-U select Unix socket");
	    col = print_in_col(col,  "-v list version info");
	    col = print_in_col(col,  "-V verbose search");
	    (void) snpf(buf, sizeof(buf), "+|-w  Warnings (%s)",

#if	defined(WARNINGSTATE)
		"-");
#else	/* !defined(WARNINGSTATE) */
		"+");
#endif	/* defined(WARNINGSTATE) */

	    col = print_in_col(col, buf);

#if	defined(HASXOPT)
# if	defined(HASXOPT_ROOT)
	    if (Myuid == 0)
		(void) snpf(buf, sizeof(buf), "-X %s", HASXOPT);
	    else
		buf[0] = '\0';
# else	/* !defined(HASXOPT_ROOT) */
	    (void) snpf(buf, sizeof(buf), "-X %s", HASXOPT);
# endif	/* defined(HASXOPT_ROOT) */
# else	/* !defined(HASXOPT) */
	    buf[0] = '\0';
#endif	/* defined(HASXOPT) */

	    col = print_in_col(col, buf);

#if	defined(HASZONES)
	    col = print_in_col(col, "-z z  zone [z]");
#endif	/* defined(HASZONES) */

#if	defined(HASSELINUX)
	    col = print_in_col(col, "-Z Z  context [Z]");
#endif	/* defined(HASSELINUX) */

	    col = print_in_col(col, "-- end option scan");
	    if (col != 1)
		(void) fprintf(stderr, "\n");

#if	defined(HASEPTOPTS)
	    (void) fprintf(stderr, "  %-36.36s  %s\n",
		"-E display endpoint info",
		"+E display endpoint info and files"
	    );
#endif	/* defined(HASEPTOPTS) */

	    (void) fprintf(stderr, "  %-36.36s",
		"+f|-f  +filesystem or -file names");

#if	defined(HASFSTRUCT)
	    (void) fprintf(stderr,
		"  +|-f[%s%s%s%s]%s%s%s%s %s%s%s%s%s%s%s\n",

# if	defined(HASNOFSCOUNT)
		"",
# else	/* !defined(HASNOFSCOUNT) */
		"c",
# endif	/* defined(HASNOFSCOUNT) */

# if	defined(HASNOFSADDR)
		"",
# else	/* !defined(HASNOFSADDR) */
		"f",
# endif	/* defined(HASNOFSADDR) */

# if	defined(HASNOFSFLAGS)
		"",
# else	/* !defined(HASNOFSFLAGS) */
		"gG",
# endif	/* defined(HASNOFSFLAGS) */

# if	defined(HASNOFSNADDR)
		"",
# else	/* !defined(HASNOFSNADDR) */
		"n",
# endif	/* defined(HASNOFSNADDR) */

# if	defined(HASNOFSCOUNT)
		"",
# else	/* !defined(HASNOFSCOUNT) */
		" Ct",
# endif	/* defined(HASNOFSCOUNT) */

# if	defined(HASNOFSADDR)
		"",
# else	/* !defined(HASNOFSADDR) */
		" Fstr",
# endif	/* defined(HASNOFSADDR) */

# if	defined(HASNOFSFLAGS)
		"",
# else	/* !defined(HASNOFSFLAGS) */
		" flaGs",
# endif	/* defined(HASNOFSFLAGS) */

# if	defined(HASNOFSNADDR)
		"",
# else	/* !defined(HASNOFSNADDR) */
		" Node",
# endif	/* defined(HASNOFSNADDR) */

		Fsv ? "(" : "",
		(Fsv & FSV_CT) ? "C" : "",
		(Fsv & FSV_FA) ? "F" : "",
		((Fsv & FSV_FG) && FsvFlagX)  ? "g" : "",
		((Fsv & FSV_FG) && !FsvFlagX) ? "G" : "",
		(Fsv & FSV_NI) ? "N" : "",
		Fsv ? ")" : "");
#else	/* !defined(HASFSTRUCT) */
	    putc('\n', stderr);
#endif	/* defined(HASFSTRUCT) */

	    (void) fprintf(stderr, "  %-36.36s",
		"-F [f] select fields; -F? for help");

#if	defined(HASKOPT)
	    (void) fprintf(stderr,
		"  -k k   kernel symbols (%s)\n",
		Nmlst ? Nmlst
# if	defined(N_UNIX)
		      : N_UNIX
# else	/* !defined(N_UNIX) */
		      : (Nmlst = get_nlist_path(1)) ? Nmlst
						    : "none found"
# endif	/* defined(N_UNIX) */

	    );
#else	/* !defined(HASKOPT) */
	    putc('\n', stderr);
#endif	/* defined(HASKOPT) */

	    (void) fprintf(stderr,
		"  +|-L [l] list (+) suppress (-) link counts < l (0 = all; default = 0)\n");

#if	defined(HASMOPT) || defined(HASMNTSUP)
# if	defined(HASMOPT)
	    (void) snpf(buf, sizeof(buf), "-m m   kernel memory (%s)", KMEM);
# else	/* !defined(HASMOPT) */
	    buf[0] = '\0';
# endif	/* defined(HASMOPT) */

	    (void) fprintf(stderr, "  %-36.36s", buf);

# if	defined(HASMNTSUP)
	    (void) fprintf(stderr, "  +m [m] use|create mount supplement\n");
# else	/* !defined(HASMNTSUP) */
	    (void) fprintf(stderr, "\n");
# endif	/* defined(HASMNTSUP) */
#endif	/* defined(HASMOPT) || defined(HASMNTSUP) */

#if	!defined(HASNORPC_H)
	    (void) snpf(buf, sizeof(buf), "+|-M   portMap registration (%s)",

# if	defined(HASPMAPENABLED)
		"+"
# else	/* !defined(HASPMAPENABLED) */
		"-"
# endif	/* defined(HASPMAPENABLED) */

	    );
#else	/* defined(HASNORPC_H) */
	    buf[0] = '\0';
#endif	/* !defined(HASNORPC_H) */

	    (void) fprintf(stderr, "  %-36.36s", buf);
	    (void) snpf(buf, sizeof(buf), "-o o   o 0t offset digits (%d)",
		OFFDECDIG);
	    (void) fprintf(stderr, "  %s\n", buf);
	    (void) fprintf(stderr, "  %-36.36s",
		"-p s   exclude(^)|select PIDs");
	    (void) fprintf(stderr, "  -S [t] t second stat timeout (%d)\n",
		TMLIMIT);
	    (void) snpf(buf, sizeof(buf),
		"-T %s%ss%s TCP/TPI %s%sSt%s (s) info",

#if	defined(HASSOOPT) || defined(HASSOSTATE) || defined(HASTCPOPT)
		"f",
#else	/* !defined(HASSOOPT) && !defined(HASSOSTATE) && !defined(HASTCPOPT)*/
		"",
#endif	/* defined(HASSOOPT) || defined(HASSOSTATE) || defined(HASTCPOPT)*/

#if 	defined(HASTCPTPIQ)
		"q",
#else	/* !defined(HASTCPTPIQ) */
		" ",
#endif	/* defined(HASTCPTPIQ) */

#if 	defined(HASTCPTPIW)
		"w",
#else	/* !defined(HASTCPTPIW) */
		"",
#endif	/* defined(HASTCPTPIW) */

#if	defined(HASSOOPT) || defined(HASSOSTATE) || defined(HASTCPOPT)
		"Fl,",
#else	/* !defined(HASSOOPT) && !defined(HASSOSTATE) && !defined(HASTCPOPT)*/
		"",
#endif	/* defined(HASSOOPT) || defined(HASSOSTATE) || defined(HASTCPOPT)*/

#if 	defined(HASTCPTPIQ)
		"Q,",
#else	/* !defined(HASTCPTPIQ) */
		"",
#endif	/* defined(HASTCPTPIQ) */

#if 	defined(HASTCPTPIW)
		",Win"
#else	/* !defined(HASTCPTPIW) */
		""
#endif	/* defined(HASTCPTPIW) */

	    );
	    (void) fprintf(stderr, "  %s\n", buf);

#if	defined(HAS_AFS) && defined(HASAOPT)
	    (void) fprintf(stderr,
		"  -A A   AFS name list file (%s)\n", AFSAPATHDEF);
#endif	/* defined(HAS_AFS) && defined(HASAOPT) */

	    (void) fprintf(stderr,
		"  -g [s] exclude(^)|select and print process group IDs\n");
	    (void) fprintf(stderr, "  -i i   select by IPv%s address:",

#if	defined(HASIPv6)
			  "[46]"
#else	/* !defined(HASIPv6) */
			  "4"
#endif	/* defined(HASIPv6) */

			  );
	    (void) fprintf(stderr,
		" [%s][proto][@@host|addr][:svc_list|port_list]\n",

#if	defined(HASIPv6)
		"46"
#else	/* !defined(HASIPv6) */
		"4"
#endif	/* defined(HASIPv6) */

		);

	    (void) fprintf(stderr,
		"  +|-r [%s] repeat every t seconds (%d); %s",

#if	defined(HAS_STRFTIME)
		"t[m<fmt>]",
#else	/* !defined(has_STRFTIME) */
		"t",
#endif	/* defined(HAS_STRFTIME) */

		RPTTM,
		" + until no files, - forever.\n");

#if	defined(HAS_STRFTIME)
	    (void) fprintf(stderr,
		"       An optional suffix to t is m<fmt>; m must separate %s",
		"t from <fmt> and\n");
	    (void) fprintf(stderr, "      <fmt> is an strftime(3) format %s",
		"for the marker line.\n");
#endif	/* defined(HAS_STRFTIME) */

#if	defined(HASTCPUDPSTATE)
	    (void) fprintf(stderr,
		"  -s p:s  exclude(^)|select protocol (p = TCP|UDP) states");
	    (void) fprintf(stderr, " by name(s).\n");
#endif	/* defined(HASTCPUDPSTATE) */

	    (void) fprintf(stderr,
		"  -u s   exclude(^)|select login|UID set s\n");
	    (void) fprintf(stderr,
		"  -x [fl] cross over +d|+D File systems or symbolic Links\n");
	    (void) fprintf(stderr,
		"  names  select named files or files on named file systems\n");
	    (void) report_SECURITY(NULL, "; ");
	    (void) report_WARNDEVACCESS(NULL, NULL, ";");
	    (void) report_HASKERNIDCK(" k", NULL);
	    (void) report_HASDCACHE(0, NULL, NULL);

#if	defined(DIALECT_WARNING)
	    (void) fprintf(stderr, "WARNING: %s\n", DIALECT_WARNING);
#endif	/* defined(DIALECT_WARNING) */

	}
	if (fh) {
	    (void) fprintf(stderr, "%s:\tID    field description\n", Pn);
	    for (i = 0; FieldSel[i].nm; i++) {

#if	!defined(HASPPID)
		if (FieldSel[i].id == LSOF_FID_PPID)
		    continue;
#endif	/* !defined(HASPPID) */

#if	!defined(HASFSTRUCT)
		if (FieldSel[i].id == LSOF_FID_FA
		||  FieldSel[i].id == LSOF_FID_CT
		||  FieldSel[i].id == LSOF_FID_FG
		||  FieldSel[i].id == LSOF_FID_NI)
		    continue;
#else	/* defined(HASFSTRUCT) */
# if	defined(HASNOFSADDR)
		if (FieldSel[i].id == LSOF_FID_FA)
		    continue;
# endif	/* defined(HASNOFSADDR) */

# if	defined(HASNOFSCOUNT)
		if (FieldSel[i].id == LSOF_FID_CT)
		    continue;
# endif	/* !defined(HASNOFSCOUNT) */

# if	defined(HASNOFSFLAGS)
		if (FieldSel[i].id == LSOF_FID_FG)
		    continue;
# endif	/* defined(HASNOFSFLAGS) */

# if	defined(HASNOFSNADDR)
		if (FieldSel[i].id == LSOF_FID_NI)
		    continue;
# endif	/* defined(HASNOFSNADDR) */
#endif	/* !defined(HASFSTRUCT) */

#if	!defined(HASZONES)
		if (FieldSel[i].id == LSOF_FID_ZONE)
		    continue;
#endif	/* !defined(HASZONES) */
 
#if	defined(HASSELINUX)
		if ((FieldSel[i].id == LSOF_FID_CNTX) && !CntxStatus)
		    continue;
#else	/* !defined(HASSELINUX) */
		if (FieldSel[i].id == LSOF_FID_CNTX)
		    continue;
#endif	/* !defined(HASSELINUX) */

		(void) fprintf(stderr, "\t %c    %s\n",
		    FieldSel[i].id, FieldSel[i].nm);
	    }
	}

#if	defined(HASDCACHE)
	if (DChelp)
	    report_HASDCACHE(1, NULL, "    ");
#endif	/* defined(HASDCACHE) */

	if (version) {

	/*
	 * Display version information in reponse to ``-v''.
	 */
	    (void) fprintf(stderr, "%s version information:\n", Pn);
	    (void) fprintf(stderr, "    revision: %s\n", LSOF_VERSION);
	    (void) fprintf(stderr, "    latest revision: %s\n", LSOF_URL);
	    (void) fprintf(stderr, "    latest FAQ: %sFAQ\n",
		LSOF_URL);
	    (void) fprintf(stderr, "    latest man page: %slsof_man\n",
		LSOF_URL);

#if	defined(LSOF_CINFO)
	    if ((cp = isnullstr(LSOF_CINFO)))
		(void) fprintf(stderr, "    configuration info: %s\n", cp);
#endif	/* defined(LSOF_CINFO) */

	    if ((cp = isnullstr(LSOF_CCDATE)))
		(void) fprintf(stderr, "    constructed: %s\n", cp);
	    cp = isnullstr(LSOF_HOST);
	    if (!(cp1 = isnullstr(LSOF_LOGNAME)))
		cp1 = isnullstr(LSOF_USER);
	    if (cp || cp1) {
		if (cp && cp1)
		    cp2 = "by and on";
		else if (cp)
		    cp2 = "on";
		else
		    cp2 = "by";
		(void) fprintf(stderr, "    constructed %s: %s%s%s\n",
		    cp2,
		    cp1 ? cp1 : "",
		    (cp && cp1) ? "@@" : "",
		    cp  ? cp  : ""
		);
	    }

#if	defined(LSOF_BLDCMT)
	    if ((cp = isnullstr(LSOF_BLDCMT)))
		(void) fprintf(stderr, "    builder's comment: %s\n", cp);
#endif	/* defined(LSOF_BLDCMT) */

	    if ((cp = isnullstr(LSOF_CC)))
		(void) fprintf(stderr, "    compiler: %s\n", cp);
	    if ((cp = isnullstr(LSOF_CCV)))
		(void) fprintf(stderr, "    compiler version: %s\n", cp);
	    if ((cp = isnullstr(LSOF_CCFLAGS)))
		(void) fprintf(stderr, "    compiler flags: %s\n", cp);
	    if ((cp = isnullstr(LSOF_LDFLAGS)))
		(void) fprintf(stderr, "    loader flags: %s\n", cp);
	    if ((cp = isnullstr(LSOF_SYSINFO)))
		(void) fprintf(stderr, "    system info: %s\n", cp);
	    (void) report_SECURITY("    ", ".\n");
	    (void) report_WARNDEVACCESS("    ", "are", ".\n");
	    (void) report_HASKERNIDCK("    K", "is");

#if	defined(DIALECT_WARNING)
	    (void) fprintf(stderr, "    WARNING: %s\n", DIALECT_WARNING);
#endif	/* defined(DIALECT_WARNING) */

	    (void) report_HASDCACHE(1, "    ", "\t");
	}
	Exit(xv);
}
@


1.32
log
@Revision 4.88
@
text
@d35 1
a35 1
static char *rcsid = "$Id: usage.c,v 1.31 2013/01/02 17:14:59 abe Exp abe $";
d553 2
a554 1
	    col = print_in_col(col, "-K list tasKs (threads)");
@


1.31
log
@Revision 4.87
@
text
@d35 1
a35 1
static char *rcsid = "$Id: usage.c,v 1.30 2011/09/07 19:13:49 abe Exp abe $";
d389 1
a389 2
	    (void) fprintf(stderr, " [+|-c c] [+|-d s] [+%sD D]",

d391 1
a391 1
		"|-"
d393 1
a393 1
		""
d396 6
d405 1
a405 1
		" [+|-f%s%s%s%s%s%s]%s\n [-F [f]] [-g [s]] [-i [i]]",
d407 6
d440 1
a440 1
		"]",
d442 1
a442 1
		"", "", "", "", "", "",
a444 6
#if	defined(HASEOPT)
		" [+|-e s]"
#else	/* !defined(HASEOPT) */
		""
#endif	/* defined(HASEOPT) */

d472 1
a472 1
		" [-o [o]] [-p s]\n[+|-r [t]]%s [-S [t]] [-T [t]]",
d609 8
@


1.30
log
@Revision 4.85: +|-e addition
@
text
@d35 1
a35 1
static char *rcsid = "$Id: usage.c,v 1.29 2010/07/29 15:59:28 abe Exp abe $";
d548 1
a548 1
	    col = print_in_col(col, "-K list tasKs");
@


1.29
log
@Revision 4.84
@
text
@d35 1
a35 1
static char *rcsid = "$Id: usage.c,v 1.28 2008/10/21 16:21:41 abe Exp abe $";
d400 1
a400 1
		" [+|-f%s%s%s%s%s%s]\n [-F [f]] [-g [s]] [-i [i]]",
d429 1
a429 1
		"]"
d431 1
a431 1
		"", "", "", "", "", ""
d434 6
d462 4
d467 1
a467 1
		" [+|-M] [-o [o]] [-p s]\n[+|-r [t]]%s [-S [t]] [-T [t]]",
d507 1
a507 1
	col = print_in_col(col, "-C no kernel name cache");
d531 5
d555 1
a555 1
	    col = print_in_col(col, "-O avoid overhead *RISKY*");
d708 1
d711 1
a711 1
#if	defined(HASPMAPENABLED)
d713 1
a713 1
#else	/* !defined(HASPMAPENABLED) */
d715 1
a715 1
#endif	/* defined(HASPMAPENABLED) */
d718 4
@


1.28
log
@Revision 4.81
@
text
@d35 1
a35 1
static char *rcsid = "$Id: usage.c,v 1.27 2008/04/15 13:24:19 abe Exp abe $";
d48 1
d76 27
d339 1
a339 1
	int  i;
d347 1
a347 1
		" usage: [-?ab%shlnNoOP%s%stUvV%s]",
d355 6
d489 4
a492 4
	    (void) fprintf(stderr, "  %-23.23s", "-?|-h list help");
	    (void) fprintf(stderr, "  %-25.25s", "-a AND selections (OR)");
	    (void) fprintf(stderr, "  %s\n", "-b avoid kernel blocks");
	    (void) fprintf(stderr, "  %-23.23s", "-c c  cmd c ^c /c/[bix]");
d494 1
a494 1
	    (void) fprintf(stderr, "  %-25.25s", buf);
a495 2
	    (void) fprintf(stderr, "  %s\n", 

d497 1
a497 3
		"-C no kernel name cache");
#else	/* !defined(HASNCACHE) */
		" ");
d500 3
a502 3
	    (void) fprintf(stderr, "  %-23.23s", "+d s  dir s files");
	    (void) fprintf(stderr, "  %-25.25s", "-d s  select by FD set");
	    (void) fprintf(stderr, "  %s\n", "+D D  dir D tree *SLOW?*");
d517 1
a517 1
	    (void) snpf(buf, sizeof(buf), " ");
d520 1
a520 1
	    (void) fprintf(stderr, "  %-23.23s", buf);
d530 1
a530 8
	    (void) fprintf(stderr, "  %-25.25s", buf);
	    (void) fprintf(stderr, "  %s\n", "-l list UID numbers");
	    (void) fprintf(stderr, "  %-23.23s", "-n no host names");
	    (void) fprintf(stderr, "  %-25.25s", "-N select NFS files");
	    (void) fprintf(stderr, "  %s\n", "-o list file offset");
	    (void) fprintf(stderr, "  %-23.23s", "-O avoid overhead *RISKY*");
	    (void) fprintf(stderr, "  %-25.25s", "-P no port names");
	    (void) fprintf(stderr, "  %s\n",
d532 11
d544 1
a544 3
	 	"-R list paRent PID"
#else	/* !defined(HASPPID) */
		""
d547 6
a552 7
	    );
	    (void) fprintf(stderr, "  %-23.23s", "-s list file size");
	    (void) fprintf(stderr, "  %-25.25s", "-t terse listing");
	    (void) fprintf(stderr, "  %s\n", "-T disable TCP/TPI info");
	    (void) fprintf(stderr, "  %-23.23s", "-U select Unix socket");
	    (void) fprintf(stderr, "  %-25.25s", "-v list version info");
	    (void) fprintf(stderr, "  %s\n", "-V verbose search");
d556 1
a556 1
		"-"
d558 1
a558 1
		"+"
d561 1
a561 2
	    );
	    (void) fprintf(stderr, "  %-23.23s", buf);
d576 1
a576 2
	    if (buf[0])
		(void) fprintf(stderr, "  %-25.25s", buf);
d579 1
a579 7
	    (void) fprintf(stderr,
		(buf[0]) ? "  %s\n" : "  %-25.25s", "-z z  zone [z]");
#else	/* !defined(HASZONES) */
# if	defined(HASSELINUX)
	    (void) fprintf(stderr,
		(buf[0]) ? "  %s\n" : "  %-25.25s", "-Z Z  context [Z]");
# endif	/* defined(HASSELINUX) */
d582 7
a588 1
	    (void) fprintf(stderr, "  %s\n", "-- end option scan");
@


1.27
log
@Revision 4.79
@
text
@d35 1
a35 1
static char *rcsid = "$Id: usage.c,v 1.26 2007/04/24 16:16:59 abe Exp abe $";
d319 1
a319 1
		" usage: [-?ab%shlnNoOP%sstUvV%s]",
d333 6
d423 9
a431 1
		" [+|-M] [-o [o]]\n [-p s] [+|-r [t]] [-S [t]] [-T [t]]");
d458 1
a458 1
	    (void) fprintf(stderr, "  %-23.23s", "-c c  cmd c, /c/[bix]");
d770 1
d772 5
@


1.26
log
@Revision 4.78
@
text
@d35 1
a35 1
static char *rcsid = "$Id: usage.c,v 1.25 2006/09/15 18:58:03 abe Exp abe $";
d424 2
a425 1
	    (void) fprintf(stderr, " [-Z [Z]]");
d735 1
d737 12
a748 2
		"  +|-r [t] repeat every t seconds (%d);", RPTTM);
	    (void) fprintf(stderr, " + until no files, - forever\n");
d750 7
d814 4
a817 1
#if	!defined(HASSELINUX)
@


1.25
log
@Revision 4.78, part 1
@
text
@d35 1
a35 1
static char *rcsid = "$Id: usage.c,v 1.24 2006/03/27 23:04:25 abe Exp abe $";
d747 5
d866 5
@


1.24
log
@Revision 4.77
@
text
@d35 1
a35 1
static char *rcsid = "$Id: usage.c,v 1.23 2005/05/11 13:02:46 abe Exp abe $";
d417 1
a417 1
	        " [+|-M] [-o [o]]\n [-p s] [+|-r [t]] [-S [t]] [-T [t]]");
d422 4
d537 5
d669 1
a669 1
#if     defined(HASSOOPT) || defined(HASSOSTATE) || defined(HASTCPOPT)
d687 1
a687 1
#if     defined(HASSOOPT) || defined(HASSOSTATE) || defined(HASTCPOPT)
d789 5
@


1.23
log
@Revision 4.75
@
text
@d35 1
a35 1
static char *rcsid = "$Id: usage.c,v 1.22 2004/07/06 19:09:32 abe Exp abe $";
d359 2
a360 1
	    (void) fprintf(stderr, " [+|-f%s]\n [-F [f]] [-g [s]] [-i [i]]",
d363 27
a389 1
		"[cfgGn]"
d391 1
a391 1
		""
d417 1
a417 1
	        " [+|-M] [-o [o]]\n[-p s] [+|-r [t]] [-S [t]] [-T [t]]");
d434 2
a435 2
		"Defaults in parentheses; comma-separate set (s) items;");
	    (void) fprintf(stderr, " dash-separate ranges.\n");
d532 1
a532 1
		(buf[0]) ? " %s\n" : "  %-25.25s", "-z z  zone [z]");
d541 50
a590 1
		"  +|-f[cfgGn] Ct,Fstr,flaGs,Node %s%s%s%s%s%s%s\n",
d754 20
@


1.22
log
@Revision 4.72
@
text
@d35 1
a35 1
static char *rcsid = "$Id: usage.c,v 1.21 2004/03/10 23:44:56 abe Exp abe $";
d577 2
a578 1
	    (void) fprintf(stderr, "  %-36.36s", "-p s   select by PID set");
d629 1
a629 2
		"  -g [s] select by process group ID set and print");
	    (void) fprintf(stderr, " process group IDs\n");
@


1.21
log
@Revision 4.71
@
text
@d35 1
a35 1
static char *rcsid = "$Id: usage.c,v 1.20 2003/03/21 17:25:10 abe Exp abe $";
d375 13
a387 3
#if	defined(HASMOPT)
	    (void) fprintf(stderr, " [-m m]");
#endif	/* defined(HASMOPT) */
d390 1
a390 1
	        " [+|-M] [-o [o]] [-p s]\n [+|-r [t]] [-S [t]] [-T [t]]");
d548 1
d551 3
a553 3
#else	/* !defined(HASMOPT) */
	    (void) snpf(buf, sizeof(buf), " ");
#endif	/* defined(HASMOPT) */
d556 8
d573 1
a573 1
	    (void) fprintf(stderr, "  %s\n", buf);
d576 4
a579 2
	    (void) fprintf(stderr, "  %-36.36s", buf);
	    (void) fprintf(stderr, "  -p s   select by PID set\n");
a580 3
		"-S [t] t second stat timeout (%d)", TMLIMIT);
	    (void) fprintf(stderr, "  %-36.36s", buf);
	    (void) snpf(buf, sizeof(buf),
@


1.20
log
@Revision 4.67
Add +c for COMMAND column width control.
@
text
@d35 1
a35 1
static char *rcsid = "$Id: usage.c,v 1.19 2002/12/13 14:44:08 abe Exp abe $";
d380 8
a387 3
	    " [+|-M] [-o [o]] [-p s]\n [+|-r [t]] [-S [t]] [-T [t]]");
	    (void) fprintf(stderr,
	    " [-u s] [+|-w] [--] [names]\n");
d481 2
a482 1
	    buf[0] = '\0';
d490 8
a497 1
	    (void) fprintf(stderr, "  %-25.25s", buf);
d562 2
a563 1
	    (void) snpf(buf, sizeof(buf), "-T %ss%s TCP/TPI %sSt%s info (s)",
d565 6
d580 1
a580 1
		" ",
d583 6
d637 2
d662 5
@


1.19
log
@Revision 4.66
@
text
@d35 1
a35 1
static char *rcsid = "$Id: usage.c,v 1.18 2002/12/05 12:08:53 abe Exp abe $";
d349 1
a349 1
	    (void) fprintf(stderr, " [-c c] [+|-d s] [+%sD D]",
d398 2
a399 1
	    (void) fprintf(stderr, "  %-25.23s",
d401 2
d409 3
a411 3
	    (void) fprintf(stderr, "  %s\n", "+d s  dir s files");
	    (void) fprintf(stderr, "  %-23.23s", "-d s  select by FD set");
	    (void) fprintf(stderr, "  %-25.25s", "+D D  dir D tree *SLOW?*");
d429 1
a429 1
	    (void) fprintf(stderr, "  %s\n", buf);
d439 8
a446 8
	    (void) fprintf(stderr, "  %-23.23s", buf);
	    (void) fprintf(stderr, "  %-25.25s", "-l list UID numbers");
	    (void) fprintf(stderr, "  %s\n", "-n no host names");
	    (void) fprintf(stderr, "  %-23.23s", "-N select NFS files");
	    (void) fprintf(stderr, "  %-25.25s", "-o list file offset");
	    (void) fprintf(stderr, "  %s\n", "-O avoid overhead *RISKY*");
	    (void) fprintf(stderr, "  %-23.23s", "-P no port names");
	    (void) fprintf(stderr, "  %-25.25s",
d455 6
a460 6
	    (void) fprintf(stderr, "  %s\n", "-s list file size");
	    (void) fprintf(stderr, "  %-23.23s", "-t terse listing");
	    (void) fprintf(stderr, "  %-25.25s", "-T disable TCP/TPI info");
	    (void) fprintf(stderr, "  %s\n", "-U select Unix socket");
	    (void) fprintf(stderr, "  %-23.23s", "-v list version info");
	    (void) fprintf(stderr, "  %-25.25s", "-V verbose search");
d470 1
a470 1
	    (void) fprintf(stderr, "  %s\n", buf);
d476 1
d480 2
a481 1
	    (void) fprintf(stderr, "  %-23.23s", buf);
d484 1
@


1.18
log
@Revision 4.66
@
text
@d35 1
a35 1
static char *rcsid = "$Id: usage.c,v 1.17 2001/11/01 20:21:11 abe Exp abe $";
d92 6
d212 5
@


1.17
log
@Revision 4.60
@
text
@d35 1
a35 1
static char *rcsid = "$Id: usage.c,v 1.16 2001/10/17 19:24:37 abe Exp abe $";
d48 5
d75 215
a299 1
	int dx = -2;
d381 2
a382 1
		"Defaults in parentheses; comma-separate set (s) items; dash-separate ranges.\n");
d595 4
a598 49
	    (void) fprintf(stderr, "%s can list all files;",

#if	defined(HASSECURITY)
		"Only root"
#else	/* !defined(HASSECURITY) */
		"Anyone"
#endif	/* defined(HASSECURITY) */

	    );
	    (void) fprintf(stderr, " /dev warnings %s;",

#if	defined(WARNDEVACCESS)
		"enabled"
#else	/* !defined(WARNDEVACCESS) */
		"disabled"
#endif	/* defined(WARNDEVACCESS) */

	    );
	    (void) fprintf(stderr, " kernel ID check %s.\n",

#if	defined(HASKERNIDCK)
		"enabled"
#else	/* !defined(HASKERNIDCK) */
		"disabled"
#endif	/* defined(HASKERNIDCK) */

	    );

#if defined(HASDCACHE)
# if	defined(HASENVDC) || defined(HASPERSDC) || defined(HASSYSDC)
	    cp = NULL;
#  if	defined(HASENVDC)
	    if (dx == -2 && (dx = dcpath(1, 0)) >= 0)
		cp = DCpath[1];
#  endif	/* defined(HASENVDC) */
#  if	defined(HASSYSDC)
	    if (!cp)
		cp = HASSYSDC;
#  endif	/* defined(HASSYSDC) */
#  if	defined(HASPERSDC)
	    if (!cp && dx != -1 && (dx = dcpath(1, 0)) >= 0)
		cp = DCpath[3];
#  endif	/* defined(HASPERSDC) */
	    if (cp)
		(void) fprintf(stderr,
		    "%s is the default device cache file read path.\n", cp);
# endif    /* defined(HASENVDC) || defined(HASPERSDC) || defined(HASSYSDC) */
#endif	/* defined(HASDCACHE) */

d623 2
a624 72
	if (DChelp) {

	/*
	 * Display device cache file read-only and write paths.
	 */
	    (void) fprintf(stderr, "%s: device cache file read-only paths:\n",
		Pn);
	    if ((dx = dcpath(1, 0)) < 0)
		(void) fprintf(stderr, "\tnone\n");
	    else {
		(void) fprintf(stderr, "\tNamed via -D: %s\n",
		    DCpath[0] ? DCpath[0] : "none");

# if	defined(HASENVDC)
		(void) fprintf(stderr,
		    "\tNamed in environment variable %s: %s\n",
		    HASENVDC, DCpath[1] ? DCpath[1] : "none");
# endif	/* defined(HASENVDC) */

# if	defined(HASSYSDC)
		if (DCpath[2])
		    (void) fprintf(stderr,
			"\tSystem-wide device cache: %s\n", DCpath[2]);
# endif	/* defined(HASSYSDC) */

# if	defined(HASPERSDC)
		(void) fprintf(stderr,
		    "\tPersonal path format (HASPERSDC): \"%s\"\n",
		    HASPERSDC);
#  if	defined(HASPERSDCPATH)
		(void) fprintf(stderr,
		    "\tModified personal path environment variable: %s\n",
		    HASPERSDCPATH);
		cp = getenv(HASPERSDCPATH);
		(void) fprintf(stderr, "\t%s value: %s\n",
			HASPERSDCPATH, cp ? cp : "none");
#  endif	/* defined(HASPERSDCPATH) */
		(void) fprintf(stderr, "\tPersonal path: %s\n",
		    DCpath[3] ? DCpath[3] : "none");
# endif	/* defined(HASPERSDC) */
	    }
	    (void) fprintf(stderr, "%s: device cache file write paths:\n", Pn);
	    if ((dx = dcpath(2, 0)) < 0)
		(void) fprintf(stderr, "\tnone\n");
	    else {
		(void) fprintf(stderr, "\tNamed via -D: %s\n",
		    DCstate == 2 ? "none"
				 : DCpath[0] ? DCpath[0] : "none");

# if	defined(HASENVDC)
		(void) fprintf(stderr,
		    "\tNamed in environment variable %s: %s\n",
		    HASENVDC, DCpath[1] ? DCpath[1] : "none");
# endif	/* defined(HASENVDC) */

# if	defined(HASPERSDC)
		(void) fprintf(stderr,
		    "\tPersonal path format (HASPERSDC): \"%s\"\n",
		    HASPERSDC);
#  if	defined(HASPERSDCPATH)
		(void) fprintf(stderr,
		    "\tModified personal path environment variable: %s\n",
		    HASPERSDCPATH);
		cp = getenv(HASPERSDCPATH);
		(void) fprintf(stderr, "\t%s value: %s\n",
			HASPERSDCPATH, cp ? cp : "none");
#  endif	/* defined(HASPERSDCPATH) */
		 (void) fprintf(stderr, "\tPersonal path: %s\n",
		    DCpath[3] ? DCpath[3] : "none");
# endif	/* defined(HASPERSDC) */
	    }
	}
d680 4
@


1.16
log
@Revision 4.59
@
text
@d35 1
a35 1
static char *rcsid = "$Id: usage.c,v 1.15 2001/06/19 13:24:29 abe Exp abe $";
d555 1
a555 1
		    cp1 ? "@@" : "",
d559 6
@


1.15
log
@Revision 4.57
@
text
@d35 1
a35 1
static char *rcsid = "$Id: usage.c,v 1.14 2001/02/13 02:11:01 abe Exp abe $";
d359 9
a367 1
		" [proto][@@host|addr][:svc_list|port_list]\n");
@


1.14
log
@Revision 4.55
@
text
@d35 1
a35 1
static char *rcsid = "$Id: usage.c,v 1.13 2000/08/01 17:18:24 abe Exp abe $";
d84 1
a84 1
	    (void) fprintf(stderr, "%s %s (latest revision at %s)\n",
d86 2
d520 6
a525 4
	    (void) fprintf(stderr,
		"    revision: %s -- find the latest revision at:\n    ",
		LSOF_VERSION);
	    (void) fprintf(stderr, "    %s\n", LSOF_URL);
@


1.13
log
@Revision 4.51
Convert to snpf().
@
text
@d35 1
a35 1
static char *rcsid = "$Id: usage.c,v 1.12 2000/05/31 12:59:06 abe Exp abe $";
d164 1
a164 1
	    (void) fprintf(stderr, "  %-23.23s", "-c c  list command c");
@


1.12
log
@Revision 4.50
@
text
@d35 1
a35 1
static char *rcsid = "$Id: usage.c,v 1.11 1999/07/19 13:59:58 abe Exp abe $";
d188 1
a188 1
	    (void) sprintf(buf, "-D D  %s", cp);
d190 1
a190 1
	    (void) strcpy(buf, " ");
d194 1
a194 1
	    (void) sprintf(buf, "-i select IPv%s files",
d225 1
a225 1
	    (void) sprintf(buf, "+|-w  Warnings (%s)",
d239 1
a239 1
		(void) sprintf(buf, "-X %s", HASXOPT);
d241 1
a241 1
	    (void) sprintf(buf, "-X %s", HASXOPT);
d287 1
a287 1
	    (void) sprintf(buf, "-m m   kernel memory (%s)", KMEM);
d289 1
a289 1
	    (void) strcpy(buf, " ");
d293 1
a293 1
	    (void) sprintf(buf, "+|-M   portMap registration (%s)",
d303 1
a303 1
	    (void) sprintf(buf, "-o o   o 0t offset digits (%d)",
d307 1
a307 1
	    (void) sprintf(buf,
d310 1
a310 1
	    (void) sprintf(buf, "-T %ss%s TCP/TPI %sSt%s info (s)",
@


1.11
log
@Revision 4.45
Correct help on +|-L.
@
text
@d35 1
a35 1
static char *rcsid = "$Id: usage.c,v 1.10 99/06/22 09:56:58 abe Exp Locker: abe $";
d275 1
a275 1
						    : "not yet determined"
@


1.10
log
@Revision 4.44
@
text
@d35 1
a35 1
static char *rcsid = "$Id: usage.c,v 1.9 99/05/04 08:14:04 abe Exp Locker: abe $";
d284 1
a284 1
		"  -L [n] list link counts < n (0 = all; default = 0)\n");
@


1.9
log
@Revision 4.43
@
text
@d35 1
a35 1
static char *rcsid = "$Id: usage.c,v 1.8 99/04/27 15:41:03 abe Exp Locker: abe $";
d258 1
a258 1
		(Fsv & FSV_NA) ? "N" : "",
d428 1
a428 1
		||  FieldSel[i].id == LSOF_FID_NA)
@


1.8
log
@Revision 4.43
Add +f flags description.
@
text
@d35 1
a35 1
static char *rcsid = "$Id: usage.c,v 1.7 99/02/15 13:44:16 abe Exp Locker: abe $";
d127 1
a127 1
	    (void) fprintf(stderr, " [+|-f%s] [-F [f]]\n [-g [s]] [-i [i]]",
d141 2
d148 1
a148 1
	    " [+|-M] [-o [o]] [-p s] [+|-r [t]] [-S [t]]\n [-T [t]]");
d282 3
@


1.7
log
@Revision 4.41
Add configuration info display.
@
text
@d35 1
a35 1
static char *rcsid = "$Id: usage.c,v 1.6 99/01/25 07:22:35 abe Exp Locker: abe $";
d130 1
a130 1
		"[CFN]"
d250 1
a250 1
		"  +|-f[CFN] Ct,Fstruct,Node %s%s%s%s%s\n",
d252 1
d254 2
a255 1
		(Fsv & FSV_CT) ? "C" : "",
d422 1
@


1.6
log
@Revision 4.40
@
text
@d35 1
a35 1
static char *rcsid = "$Id: usage.c,v 1.5 98/12/28 10:18:29 abe Exp Locker: abe $";
d509 40
a548 34
		(void) fprintf(stderr, "%s version information:\n", Pn);
		(void) fprintf(stderr,
			"\trevision: %s -- find the latest revision at:\n\t",
			LSOF_VERSION);
		(void) fprintf(stderr, "\t%s\n", LSOF_URL);
		if ((cp = isnullstr(LSOF_CCDATE)))
			(void) fprintf(stderr, "\tconstructed: %s\n", cp);
		cp = isnullstr(LSOF_HOST);
		if (!(cp1 = isnullstr(LSOF_LOGNAME)))
			cp1 = isnullstr(LSOF_USER);
		if (cp || cp1) {
			if (cp && cp1)
				cp2 = "by and on";
			else if (cp)
				cp2 = "on";
			else
				cp2 = "by";
			(void) fprintf(stderr, "\tconstructed %s: %s%s%s\n",
				cp2,
				cp1 ? cp1 : "",
				cp1 ? "@@" : "",
				cp  ? cp  : ""
			);
		}
		if ((cp = isnullstr(LSOF_CC)))
			(void) fprintf(stderr, "\tcompiler: %s\n", cp);
		if ((cp = isnullstr(LSOF_CCV)))
			(void) fprintf(stderr, "\tcompiler version: %s\n", cp);
		if ((cp = isnullstr(LSOF_CCFLAGS)))
			(void) fprintf(stderr, "\tcompiler flags: %s\n", cp);
		if ((cp = isnullstr(LSOF_LDFLAGS)))
			(void) fprintf(stderr, "\tloader flags: %s\n", cp);
		if ((cp = isnullstr(LSOF_SYSINFO)))
			(void) fprintf(stderr, "\tsystem info: %s\n", cp);
@


1.5
log
@Revision 4.39
@
text
@d35 1
a35 1
static char *rcsid = "$Id: usage.c,v 1.4 98/07/17 08:25:11 abe Exp Locker: abe $";
d117 1
a117 1
	    (void) fprintf(stderr, " [-c c] [-d s]");
d120 3
a122 1
	    (void) fprintf(stderr, " [-D D]");
d125 2
d159 4
a162 8
	    (void) fprintf(stderr, "  %-23.23s",
		"-?|-h list help");
	    (void) fprintf(stderr, "  %-25.25s",
		"-a AND selections (OR)");
	    (void) fprintf(stderr, "  %s\n",
		"-b avoid kernel blocks");
	    (void) fprintf(stderr, "  %-23.23s",
		"-c c  list command c");
d171 3
a173 1
	    (void) fprintf(stderr, "  %s\n", "-d s  select by FD set");
d191 1
a191 1
	    (void) fprintf(stderr, "  %-23.23s", buf);
d201 8
a208 8
	    (void) fprintf(stderr, "  %-25.25s", buf);
	    (void) fprintf(stderr, "  %s\n", "-l list UID numbers");
	    (void) fprintf(stderr, "  %-23.23s", "-n no host names");
	    (void) fprintf(stderr, "  %-25.25s", "-N select NFS files");
	    (void) fprintf(stderr, "  %s\n", "-o list file offset");
	    (void) fprintf(stderr, "  %-23.23s", "-O avoid overhead *RISKY*");
	    (void) fprintf(stderr, "  %-25.25s", "-P no port names");
	    (void) fprintf(stderr, "  %s\n",
d211 1
a211 1
		"-R list paRent PID"
d213 1
a213 1
		" "
d217 6
a222 6
	    (void) fprintf(stderr, "  %-23.23s", "-s list file size");
	    (void) fprintf(stderr, "  %-25.25s", "-t terse listing");
	    (void) fprintf(stderr, "  %s\n", "-T disable TCP/TPI info");
	    (void) fprintf(stderr, "  %-23.23s", "-U select Unix socket");
	    (void) fprintf(stderr, "  %-25.25s", "-v list version info");
	    (void) fprintf(stderr, "  %s\n", "-V verbose search");
d232 1
a232 1
	    (void) fprintf(stderr, "  %-23.23s", buf);
d237 1
a237 1
		(void) sprintf(buf, "-X %s\n", HASXOPT);
d239 1
a239 1
	    (void) sprintf(buf, "-X %s\n", HASXOPT);
d241 1
a241 2
#else	/* !defined(HASXOPT) */
	    buf[0] = '\0';
d244 1
a244 2
	    (void) fprintf(stderr, "  %-25.25s", buf);
	    (void) fprintf(stderr, "  --  end option scan\n");
a255 2
	    (void) fprintf(stderr, "  %-36.36s",
		"-F [f] select fields; -F? for help");
d259 3
@


1.4
log
@Revision 4.35
@
text
@d35 1
a35 1
static char *rcsid = "$Id: usage.c,v 1.3 98/05/22 14:01:31 abe Exp Locker: abe $";
d123 1
a123 1
	    (void) fprintf(stderr, " [+|-f] [-F [f]]\n [-g [s]] [-i [i]]");
d125 8
d156 1
a156 1
		"-? list help");
a189 2
	    (void) fprintf(stderr, "  %-25.25s", "+|-f -files +filesys");
	    (void) fprintf(stderr, "  %s\n", "-h list help");
d199 8
a206 8
	    (void) fprintf(stderr, "  %-23.23s", buf);
	    (void) fprintf(stderr, "  %-25.25s", "-l list UID numbers");
	    (void) fprintf(stderr, "  %s\n", "-n no host names");
	    (void) fprintf(stderr, "  %-23.23s", "-N select NFS files");
	    (void) fprintf(stderr, "  %-25.25s", "-o list file offset");
	    (void) fprintf(stderr, "  %s\n", "-O avoid overhead *RISKY*");
	    (void) fprintf(stderr, "  %-23.23s", "-P no port names");
	    (void) fprintf(stderr, "  %-25.25s",
d215 6
a220 6
	    (void) fprintf(stderr, "  %s\n", "-s list file size");
	    (void) fprintf(stderr, "  %-23.23s", "-t terse listing");
	    (void) fprintf(stderr, "  %-25.25s", "-T disable TCP/TPI info");
	    (void) fprintf(stderr, "  %s\n", "-U select Unix socket");
	    (void) fprintf(stderr, "  %-23.23s", "-v display version info");
	    (void) fprintf(stderr, "  %-25.25s", "-V verbose search");
d230 1
a230 1
	    (void) fprintf(stderr, "  %s\n", buf);
d235 1
a235 1
		(void) fprintf(stderr, "  -X %s\n", HASXOPT);
d237 1
a237 1
	    (void) fprintf(stderr, "  -X %s\n", HASXOPT);
d239 2
d243 2
d246 11
d258 3
a329 3
	    (void) fprintf(stderr, "  %-36.36s",
		"-u s   exclude(^)/select login/UID set\n");
	    (void) fprintf(stderr, "  --     end option scan\n");
d354 2
d415 7
@


1.3
log
@Revision 4.33
@
text
@d35 1
a35 1
static char *rcsid = "$Id: usage.c,v 1.2 98/02/23 10:07:05 abe Exp Locker: abe $";
d334 1
a334 1
	    (void) fprintf(stderr, "%s can list all files.",
d343 1
a343 1
	    (void) fprintf(stderr, "  Inaccessible /dev warnings are %s.\n",
d350 9
@


1.2
log
@Revision 4.27
Add +r support.
@
text
@d35 1
a35 1
static char *rcsid = "$Id: usage.c,v 1.1 98/02/15 16:57:24 abe Exp Locker: abe $";
d184 10
a193 1
	    (void) fprintf(stderr, "  %-23.23s", "-i select Internet files");
d318 9
a326 1
	    (void) fprintf(stderr, "  -i i   select by Internet address:");
@


1.1
log
@Initial revision
@
text
@d35 1
a35 1
static char *rcsid = "$Id$";
d134 1
a134 1
	    " [+|-M] [-o [o]] [-p s] [-r [t]] [-S [t]]\n [-T [t]]");
d266 2
a267 1
	    (void) sprintf(buf, "-r [t] repeat every t seconds (%d)", RPTTM);
a268 2
	    (void) fprintf(stderr,
		"  -S [t] t second stat timeout (%d)\n", TMLIMIT);
d296 4
a299 3
	    (void) fprintf(stderr, "  %-36.36s", buf);
	    (void) fprintf(stderr,
		"  -u s   exclude(^)/select login/UID set\n");
d312 3
a314 1
	    (void) fprintf(stderr, "  --     end option scan\n");
@
