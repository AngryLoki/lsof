head	1.9;
access;
symbols;
locks; strict;
comment	@# @;


1.9
date	2003.06.12.00.55.55;	author abe;	state Exp;
branches;
next	1.8;

1.8
date	2003.03.25.18.13.16;	author abe;	state Exp;
branches;
next	1.7;

1.7
date	2002.10.08.20.16.56;	author abe;	state Exp;
branches;
next	1.6;

1.6
date	2002.04.22.20.22.11;	author abe;	state Exp;
branches;
next	1.5;

1.5
date	2001.10.17.19.20.43;	author abe;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.14.13.43.14;	author abe;	state Exp;
branches;
next	1.3;

1.3
date	2001.04.19.15.49.26;	author abe;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.19.12.19.07;	author abe;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.08.02.42.08;	author abe;	state Exp;
branches;
next	;


desc
@Get XNU header files for Darwin.
@


1.9
log
@Revision 4.68
@
text
@#!/bin/sh
#
# get-xnu-headers.sh -- get specified XNU kernel header files
#
# Checks for the availability of XNU (kernel) header files which are
# needed by "lsof".  If the header files are not currently available
# then they will be extracted from an appropriate open source tarball,
# downloaded from ${DS}.
#
# Note: You must supply a registered Darwin user name and its password to
#       download the XNU header file tarball.
#
# Usage: file1 file2 ...
#
# Where: file1	first header file to get
#	 file2	second header file to get
#
# Exit:
#
#	Return code: 0 = all header files are available
#		     1 = not all header files are available
#
#	STDOUT: "" if all header files are available
#		"<error message>" if not all header files are available
#set -x	# for DEBUGging

# Pre-defined constants

DS="http://www.opensource.apple.com/darwinsource"
L=`pwd`/dialects/darwin			# local header file path
P="xnu/bsd"				# xnu tar path prefix
S=`basename $0 .sh`			# script's base name
T=xnu					# tar base name
TB=${T}.tar				# tarball name
TBGZ=${TB}.gz				# gzip'd tarball
TD=/tmp/${USER}.$$			# temporary directory

# Other variables

MH=""					# missing header file status
UH=0					# unavailable header file status

# Check argument count.  There must be at least one argument.

if test $# -lt 1	# {
then
  echo "insufficient arguments: $#"
  exit 1
fi	# }

# Record the header files that aren't already available in ${MH}.

for i in $*
do
  if test ! -r ${L}/${P}/$i
  then
    if test "X$MH" = "X"
    then
      MH=$i
    else
      MH="$MH $i"
    fi
  fi
done
if test "X$MH" = "X"
then

  # All header files are available, so exit cleanly.

  exit 0
fi

# Get the registered Darwin user name and password.

trap 'stty echo; echo TRAP; rm -rf $TD; exit 1' 1 2 3 15
cat << .CAT_MARK

---------------------------------------------------------------------

It's necessary to download a Darwin open source tarball and extract
some some XNU kernel header files from it.  The tarball will be
downloaded to $TD and gunzip'd there.  The resulting tar
file will be twenty to thirty megabytes in size, and the necessary
header files will be extracted from it to ${L}/${T}.

You must first specify your registered Darwin user name and password
in order to download the tarball.

You must then specify the open source branch from which the tarball
should be downloaded.

.CAT_MARK
END=0
while test $END = 0	# {
do
  echo -n "What is your registered Darwin user name? "
  read DUN EXCESS
  if test "X$DUN" = "X"	# {
  then
    echo ""
    echo "+=====================================+"
    echo "| Please enter a non-empty user name. |"
    echo "+=====================================+"
    echo ""
  else
    END=1
  fi	# }
done	# }
stty -echo
END=0
while test $END = 0	# {
do
  echo -n "What is your registered Darwin password? "
  read DPW EXCESS
  if test "X$DPW" = "X"	# {
  then
    echo ""
    echo "+====================================+"
    echo "| Please enter a non-empty password. |"
    echo "+====================================+"
    echo ""
  else
    END=1
  fi	# }
done	# }
stty echo

# Get the branch.

cat << .CAT_MARK


--------------------------------------------------------------------

Now you must specify the open source branch of the CVS repository
from which the header files will be checked out.  These are some
likely open source branches:

    Mac OS X 10.2.2 (kernel version 6.2): 10.2.2
    Mac OS X 10.2.4 (kernel version 6.4): 10.2.4
    Mac OS X 10.2.5 (kernel version 6.5): 10.2.5
    Mac OS X 10.2.6 (kernel version 6.6): 10.2.6

Please specify the last value of a row as the name of an open source
branch from which to fetch the tarball.

.CAT_MARK
END=0
while test $END = 0	# {
do
  echo -n "What branch? "
  read BR EXCESS
  if test "X$BR" = "X"	# {
  then
    echo ""
    echo "+==================================+"
    echo "| Please enter a non-empty branch. |"
    echo "+==================================+"
    echo ""
  else
    END=1
  fi	# }
done	# }

# Make a temporary directory to hold the tarball, download it and gunzip it.

rm -rf $TD
mkdir $TD
echo "Downloading tarball to ${TD}/$TBGZ ..."
(cd $TD;
curl --config - --remote-name ${DS}/tarballs/${BR}/apsl/$TBGZ << _EOF
silent
user ${DUN}:${DPW}
_EOF
)
if test ! -r ${TD}/$TBGZ -o ! -s ${TD}/$TBGZ
then
  echo "${S}: can't download ${TBGZ}."
  rm -rf $TD
  exit 1
fi
echo "Gunzip'ping ${TD}/$TBGZ ..."
gunzip ${TD}/$TBGZ
if test ! -r ${TD}/$TB -o ! -s ${TD}/$TB
then
  echo "${S}: gunzip of ${TD}/$TBGZ failed."
  ls -l ${TD}/$TBGZ
  ls -l ${TD}/$TB
  echo "Hint: examine ${TD}/${TBGZ}."
  echo "      It may have failed to download properly.  If you find it is not"
  echo "      in gzip format and contains HTML, your registered Darwin user"
  echo "      name or password may be incorrect, or the download tarball may"
  echo "      not exist."
  exit 1
fi
ls -l ${TD}/$TB

# Get the required header files from the tarball.

for i in $MH
do
  rm -f ${L}/${P}/$i
  echo -n "Extracting $i ... "
  (cd $L; tar xf ${TD}/$TB ${P}/$i > /dev/null 2>&1)
  if test $? -eq 0
  then
    echo "OK"
  else
    echo "UNAVAILABLE"
    UH=1
  fi
done
rm -rf $TD
exit $UH
@


1.8
log
@Revision 4.67
Install changes from Allan Nathonson of Apple.
@
text
@d7 2
a8 1
# then we will check them out from the Darwin CVS repository.
d10 2
a11 2
# Note: You must be a registered Darwin user in order to access
#       the Darwin sources.
d13 1
a13 1
#       See http://www.opensource.apple.com/tools/cvs/docs.html
d15 1
a15 5
# Usage: dir file1 file2 ...
#
# Where: dir	the Darwin frameworks path -- e.g., /System/Library/Frameworks
#
#	 file1	first header file to get
d25 1
d29 3
a31 1
L=`pwd`/dialects/darwin/include		# local header file path
d33 4
d40 2
a41 5
BR=""					# open source branch
DUN=""					# Darwin registered user name
HS=0					# missing header file status
UH=0					# if 1, some missing header files are
					# also unavailable via CVS
d43 1
a43 1
# Check argument count.  There must be at least two arguments.
d45 1
a45 1
if test $# -lt 2	# {
d51 1
a51 1
# Save frameworks path.
d53 1
a53 6
F=$1
shift

# See if all header files are available in the frameworks tree.

for h in $*	# {
d55 1
a55 1
  if test ! -f ${F}/System.framework/PrivateHeaders/${h}	# {
d57 9
a65 4
    HS=1
  fi	# }
done	# }
if test $HS -eq 0	# {
a66 2
  
  # All header files are available. Return success.
d68 2
d71 1
a71 1
fi	# }
d73 1
a73 2
# Not all header files are available in the framworks tree.  Use cvs to
# get them.
d75 1
a75 3
# First get the registered Darwin user name.

trap 'echo TRAP; exit 1' 1 2 3 15
d78 1
a78 1
-----------------------------------------------------------------
d80 5
a84 2
It's necessary to check out some XNU kernel header files from the
open source CVS repository.  See this URL for more information:
d86 2
a87 1
   http://www.opensource.apple.com/tools/cvs/docs.html
d89 2
a90 3
You must first specify your registered Darwin user name in order
to access the open source repository.  The companion Darwin user
name password must be stored in ~/.cvspass.
a91 2
You must also specify the open source branch from which the headers
should be obtained.
a95 1
  echo ""
d101 4
a104 1
    echo "Please enter a non-empty name."
d109 8
a116 20

# Warn if there's no ~/.cvspass file.

if test ! -f ${HOME}/.cvspass	# {
then
  cat << .CAT_MARK

!!!WARNING!!!   !!!WARNING!!!   !!!WARNING!!!   !!!WARNING!!!   !!!WARNING!!!

There is no ~/.cvspass, so a CVS checkout will fail the authentication
test.

Hint: don't continue; exit, set CVSROOT, and do a cvs login.

!!!WARNING!!!   !!!WARNING!!!   !!!WARNING!!!   !!!WARNING!!!   !!!WARNING!!!
.CAT_MARK

  END=0
  while test $END -eq 0	# {
  do
d118 9
a126 16
    echo -n "Continue (y|n) [n]? "
    read ANS EXCESS
    if test "X$ANS" = "Xn" -o "X$ANS" = "XN" -o "X$ANS" = "X"	# {
    then
      exit 1
    else
      if test "X$ANS" = "Xy" -o "X$ANS" = "XY"	# {
      then
	END=1
      else
	echo ""
	echo "Please answer y or n."
      fi	# }
    fi	# }
  done	# }
fi	#}
d132 1
d139 4
a142 13
    Darwin 1.2.1                          : DARWIN-1-2-1
    Darwin 1.3.1                          : DARWIN-1-3-1
    Darwin 1.4.1                          : DARWIN-1-4-1
    Mac OS X 10.0   (4K78) : xnu-123.5    : not available / tagged
    Mac OS X 10.0.4 (4Q12) : xnu-124.13   : same headers as xnu-123.5
    Mac OS X 10.1   (5G64) : xnu-201      : not available / tagged
    Mac OS X 10.1.1 (5M28) : xnu-201.5    : not available / tagged
    Mac OS X 10.1.2 (5P48) : xnu-201.14   : not available / tagged
    Mac OS X 10.2   (6C115): xnu-344      : not available / tagged
    Mac OS X 10.2.1 (6D52) : xnu-344.2    : same headers as xnu-344
    Mac OS X 10.2.2 (6F21) : xnu-344.12.2 : APPLE-10-2-2
    Mac OS X 10.2.3 (6G30) : xnu-344.23   : APPLE-10-2-3
    Mac OS X 10.2.4 (6I32) : xnu-344.26   : same headers as xnu-344.23
d144 2
a145 2
Please specify a branch to use.  (It needn't be one of the suggested
ones.)
a150 1
  echo ""
d156 4
a159 1
    echo "Please enter a non-empty branch."
d165 1
a165 1
# Now fetch the missing header files, if possible.
d167 34
a200 2
R=${ALT_XNU_CVSROOT:-":pserver:${DUN}@@anoncvs.opensource.apple.com:/cvs/Darwin"}
for h in $*	# {
d202 4
a205 4
  LP=${L}/${h}
  D=`dirname $LP`
  mkdir -p $D
  if test -f $LP	# {
d207 1
a207 3
    LPT=${LP}.old
    rm -f $LPT
    mv $LP $LPT
d209 5
a213 23
    LPT=""
  fi	# }
  echo "Checking out: $h"
  cvs -l -d ${R} checkout -p -r ${BR} xnu/bsd/${h} > $LP 2> /dev/null
  ERR=$?
  if test $ERR -ne 0 -o ! -f $LP -o ! -s $LP	# {
  then
    rm -f $LP
    if test $ERR -ne 0	# {
    then
	echo "WARNING: CVS checkout failed."
    fi	# }
    if test "X$LPT" != "X"	# {
    then
      rm -f $LP
      mv $LPT $LP
      echo "WARNING: using old $LP"
    else
      echo "ERROR: unavailable: $h"
      UH=1
    fi	# }
  fi	# }
done	# }
@


1.7
log
@Revision 4.65
@
text
@d156 13
a168 10
    Darwin 1.2.1: xnu-3-1
    Darwin 1.3.1: xnu-4-2
    Darwin 1.4.1: xnu-9-1
    Mac OS X 10.0   (4K78) : Apple-123-5
    Mac OS X 10.0.4 (4Q12) : Apple-124-13
    Mac OS X 10.1   (5G64) : Apple-201
    Mac OS X 10.1.1 (5M28) : Apple-201-5
    Mac OS X 10.1.2 (5P48) : Apple-201-14
    Mac OS X 10.2   (6C115): Apple-344
    Mac OS X 10.2.1 (6D52) : Apple-344-2
d206 1
a206 1
  cvs -l -d ${R} checkout -p -r ${BR} src/notlive/xnu/bsd/${h} > $LP 2> /dev/null
@


1.6
log
@Revision 4.63
@
text
@d159 7
a165 3
    Mac OS X 10.0   (4K78): Apple-123-5
    Mac OS X 10.0.4 (4Q12): Apple-124-13
    Mac OS X 10.1   (5G64): Apple-201
d203 1
a203 1
  cvs -l -d ${R} checkout -p -r ${BR} xnu/bsd/${h} > $LP 2> /dev/null
@


1.5
log
@Revision 4.59
@
text
@d199 1
a199 1
  cvs -l -d ${R} checkout -p -r ${BR} System/xnu/bsd/${h} > $LP 2> /dev/null
@


1.4
log
@Revision 4.58
@
text
@d158 4
a161 2
    Mac OS X 10.0 (Cheetah4K78): Apple-123-5
    Public Beta (Kodiak1H39): xnu-3
@


1.3
log
@Add more CVS tag info per Allan Nathanson.
@
text
@d59 1
a59 1
  if test ! -f ${D}/System.framework/PrivateHeaders/${h}	# {
@


1.2
log
@Apply "gold release" changes from Allan Nathanson.
@
text
@d156 3
a159 1
    Darwin 1.2.1: xnu-3-1
@


1.1
log
@Initial revision
@
text
@d59 1
a59 1
  if test ! -f ${D}/System.framework/PrivateHeaders/bsd/${h}	# {
@
