head	1.17;
access;
symbols;
locks; strict;
comment	@ * @;


1.17
date	2005.08.12.15.35.14;	author abe;	state Exp;
branches;
next	1.16;

1.16
date	2005.08.08.19.56.44;	author abe;	state Exp;
branches;
next	1.15;

1.15
date	2002.02.26.15.19.35;	author abe;	state Exp;
branches;
next	1.14;

1.14
date	2001.08.14.12.40.12;	author abe;	state Exp;
branches;
next	1.13;

1.13
date	2000.12.04.14.24.15;	author abe;	state Exp;
branches;
next	1.12;

1.12
date	2000.11.03.18.43.08;	author abe;	state Exp;
branches;
next	1.11;

1.11
date	99.06.22.08.13.44;	author abe;	state Exp;
branches;
next	1.10;

1.10
date	99.04.15.06.46.56;	author abe;	state Exp;
branches;
next	1.9;

1.9
date	99.01.25.06.57.37;	author abe;	state Exp;
branches;
next	1.8;

1.8
date	98.10.08.08.30.23;	author abe;	state Exp;
branches;
next	1.7;

1.7
date	98.03.18.15.08.06;	author abe;	state Exp;
branches;
next	1.6;

1.6
date	98.03.06.08.19.16;	author abe;	state Exp;
branches;
next	1.5;

1.5
date	97.07.02.11.20.40;	author abe;	state Exp;
branches;
next	1.4;

1.4
date	97.06.07.20.13.20;	author abe;	state Exp;
branches;
next	1.3;

1.3
date	97.04.15.13.14.31;	author abe;	state Exp;
branches;
next	1.2;

1.2
date	97.04.15.10.41.47;	author abe;	state Exp;
branches;
next	1.1;

1.1
date	97.02.24.07.39.26;	author abe;	state Exp;
branches;
next	;


desc
@Lsof version 4
@


1.17
log
@Revision 4.76
@
text
@/*
 * ddev.c - DEC OSF/1, Digital UNIX, Tru64 UNIX device support functions for
 *	    lsof
 */


/*
 * Copyright 1994 Purdue Research Foundation, West Lafayette, Indiana
 * 47907.  All rights reserved.
 *
 * Written by Victor A. Abell
 *
 * This software is not subject to any license of the American Telephone
 * and Telegraph Company or the Regents of the University of California.
 *
 * Permission is granted to anyone to use this software for any purpose on
 * any computer system, and to alter it and redistribute it freely, subject
 * to the following restrictions:
 *
 * 1. Neither the authors nor Purdue University are responsible for any
 *    consequences of the use of this software.
 *
 * 2. The origin of this software must not be misrepresented, either by
 *    explicit claim or by omission.  Credit to the authors and Purdue
 *    University must appear in documentation and sources.
 *
 * 3. Altered versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 *
 * 4. This notice may not be removed or altered.
 */

#ifndef lint
static char copyright[] =
"@@(#) Copyright 1994 Purdue Research Foundation.\nAll rights reserved.\n";
static char *rcsid = "$Id: ddev.c,v 1.16 2005/08/08 19:56:44 abe Exp abe $";
#endif

#include "lsof.h"


/*
 * Local static values
 */

#if	defined(USELOCALREADDIR)
static struct stat Dirsb;
#endif	/* defined(USELOCALREADDIR) */


/*
 * Local definitions
 */

#define	LIKE_BLK_SPEC	"like block special"
#define	LIKE_CHR_SPEC	"like character special"


/*
 * Local function prototypes
 */

_PROTOTYPE(static int rmdupdev,(struct l_dev ***dp, int n, char *nm));


#if	defined(HASDCACHE)
/*
 * clr_sect() - clear cached clone and pseudo sections
 */

void
clr_sect()
{
	struct clone *c, *c1;

	if (Clone) {
	    for (c = Clone; c; c = c1) {
		c1 = c->next;
		(void) free((FREE_P *)c);
	    }
	    Clone = (struct clone *)NULL;
	}
}
#endif	/* defined(HASDCACHE) */


/*
 * printdevname() - print block and character device names
 */

int
printdevname(dev, rdev, f, nty)
	dev_t *dev;			/* device */
	dev_t *rdev;			/* raw device */
	int f;				/* 1 = follow with '\n' */
	int nty;			/* node type: N_BLK or N_CHR */
{
	struct clone *c;
	struct l_dev *dp;

	readdev(0);
/*
 * Search for clone.
 */

#if     defined(HASDCACHE)

printdevname_again:

#endif  /* defined(HASDCACHE) */

	if ((nty == N_CHR) && Clone && HAVECLONEMAJ && (*dev == DevDev)
	&&  (GET_MAJ_DEV(*rdev) == CLONEMAJ))
	{
	    for (c = Clone; c; c = c->next) {
		if (Devtp[c->dx].rdev == *rdev) {

#if     defined(HASDCACHE)
		    if (DCunsafe && !Devtp[c->dx].v && !vfy_dev(&Devtp[c->dx]))
			goto printdevname_again;
#endif  /* defined(HASDCACHE) */

		    safestrprt(Devtp[c->dx].name, stdout, f);
		    return(1);
		}
	    }
	}
/*
 * Search device table for a full match.
 */

#if	defined(HASBLKDEV)
	if (nty == N_BLK)
	    dp = lkupbdev(dev, rdev, 1, 0);
	else
#endif	/* defined(HASBLKDEV) */

	dp = lkupdev(dev, rdev, 1, 0);
	if (dp) {
	    safestrprt(dp->name, stdout, f);
	    return(1);
	}
/*
 * Search device table for a match without inode number and dev.
 */

#if	defined(HASBLKDEV)
	if (nty == N_BLK)
	    dp = lkupbdev(&DevDev, rdev, 0, 0);
	else
#endif	/* defined(HASBLKDEV) */

	dp = lkupdev(&DevDev, rdev, 0, 0);
	if (dp) {

	/*
	 * A raw device match was found.  Record it as a name column addition.
	 */
	    char *cp, *ttl;
	    int len;

	    ttl = (nty == N_BLK) ? LIKE_BLK_SPEC : LIKE_CHR_SPEC;
	    len = (int)(1 + strlen(ttl) + 1 + strlen(dp->name) + 1);
	    if (!(cp = (char *)malloc((MALLOC_S)(len + 1)))) {
		(void) fprintf(stderr, "%s: no nma space for: (%s %s)\n",
		    Pn, ttl, dp->name);
		Exit(1);
	    }
	    (void) snpf(cp, len + 1, "(%s %s)", ttl, dp->name);
	    (void) add_nma(cp, len);
	    (void) free((FREE_P *)cp);
	    return(0);
	}

#if     defined(HASDCACHE)
/*
 * If the device cache is "unsafe" and we haven't found any match, reload
 * the device cache.
 */
	if (DCunsafe) {
	    (void) rereaddev();
	    goto printdevname_again;
	}
#endif  /* defined(HASDCACHE) */

	return(0);
}


/*
 * readdev() - read names, modes and device types of everything in /dev
 */

void
readdev(skip)
	int skip;			/* skip device cache read if 1 */
{
#if	defined(HASDCACHE)
	int dcrd;
#endif	/* defined(HASDCACHE) */

	struct clone *c;
	DIR *dfp;
	struct DIRTYPE *dp;
	char *fp = (char *)NULL;
	int i = 0;

#if	defined(HASBLKDEV)
	int j = 0;
#endif	/* defined(HASBLKDEV) */

	MALLOC_S nl;
	char *path = (char *)NULL;
	MALLOC_S pl;
	struct stat sb;

	if (Sdev)
	    return;

#if	defined(HASDCACHE)
/*
 * Read device cache, as directed.
 */
	if (!skip) {
	    if (DCstate == 2 || DCstate == 3) {
		if ((dcrd = read_dcache()) == 0)
		    return;
	    }
	} else
	    dcrd = 1;
#endif	/* defined(HASDCACHE) */

	Dstk = (char **)NULL;
	Dstkn = Dstkx = 0;
	(void) stkdir("/dev");
/*
 * Unstack the next /dev or /dev/<subdirectory> directory.
 */
	while (--Dstkx >= 0) {
	    if (!(dfp = OpenDir(Dstk[Dstkx]))) {

#if	defined(WARNDEVACCESS)
		if (!Fwarn) {
		    (void) fprintf(stderr, "%s: WARNING: can't open: ", Pn);
		    safestrprt(Dstk[Dstkx], stderr, 1);
		}
#endif	/* defined(WARNDEVACCESS) */

		(void) free((FREE_P *)Dstk[Dstkx]);
		Dstk[Dstkx] = (char *)NULL;
		continue;
	    }
	    if (path) {
		(void) free((FREE_P *)path);
		path = (char *)NULL;
	    }
	    if (!(path = mkstrcat(Dstk[Dstkx], -1, "/", 1, (char *)NULL, -1,
				  &pl)))
	    {
		(void) fprintf(stderr, "%s: no space for: ", Pn);
		safestrprt(Dstk[Dstkx], stderr, 1);
		Exit(1);
	    }
	    (void) free((FREE_P *)Dstk[Dstkx]);
	    Dstk[Dstkx] = (char *)NULL;
	/*
	 * Scan the directory.
	 */
	    for (dp = ReadDir(dfp); dp; dp = ReadDir(dfp)) {
		if (dp->d_ino == 0 || dp->d_name[0] == '.')
		    continue;
	    /*
	     * Form the full path name and get its status.
	     */
		if (fp) {
		    (void) free((FREE_P *)fp);
		    fp = (char *)NULL;
		}
		if (!(fp = mkstrcat(path, (int)pl, dp->d_name, dp->d_namlen,
			   (char *)NULL, -1, (MALLOC_S *)NULL)))
		{
		    (void) fprintf(stderr, "%s: no space for: ", Pn);
		    safestrprt(path, stderr, 0);
		    safestrprt(dp->d_name, stderr, 1);
		    Exit(1);
		}

#if	defined(USE_STAT)
		if (stat(fp, &sb) != 0)
#else	/* !defined(USE_STAT) */
		if (lstat(fp, &sb) != 0)
#endif	/* defined(USE_STAT) */

		{
		    if (errno == ENOENT)	/* symbolic link to nowhere? */
			continue;

#if	defined(WARNDEVACCESS)
		    if (!Fwarn) {
			int errno_save = errno;

			(void) fprintf(stderr, "%s: can't stat ", Pn);
			safestrprt(fp, stderr, 0);
			(void) fprintf(stderr, ": %s\n", strerror(errno_save));
		    }
#endif	/* defined(WARNDEVACCESS) */

		    continue;
		}
	    /*
	     * If it's a subdirectory, stack its name for later processing.
	     */
		if ((sb.st_mode & S_IFMT) == S_IFDIR) {
		    (void) stkdir(fp);
		    continue;
		}
		if ((sb.st_mode & S_IFMT) == S_IFCHR) {

		/*
		 * Save character device information in Devtp[].
		 */
		    if (i >= Ndev) {
			Ndev += DEVINCR;
			if (!Devtp)
			    Devtp = (struct l_dev *)malloc(
				    (MALLOC_S)(sizeof(struct l_dev)*Ndev));
			else
			    Devtp = (struct l_dev *)realloc(
				    (MALLOC_P *)Devtp,
				    (MALLOC_S)(sizeof(struct l_dev)*Ndev));
			if (!Devtp) {
			    (void) fprintf(stderr,
				"%s: no space for character device\n", Pn);
			    Exit(1);
			}
		    }
		    Devtp[i].inode = (INODETYPE)sb.st_ino;
		    if (!(Devtp[i].name = mkstrcpy(fp, (MALLOC_S *)NULL))) {
			(void) fprintf(stderr, "%s: no space for: ", Pn);
			safestrprt(fp, stderr, 1);
			Exit(1);
		    }
		    Devtp[i].rdev = sb.st_rdev;
		    Devtp[i].v = 0;
		/*
		 * Save clone device location.
		 */
		    if (HAVECLONEMAJ
		    &&   GET_MAJ_DEV(Devtp[i].rdev) == CLONEMAJ)
		    {
			if (!(c = (struct clone *)malloc(sizeof(struct clone))))
			{
			    (void) fprintf(stderr,
				"%s: no space for clone device: ", Pn);
			    safestrprt(fp, stderr, 1);
			    Exit(1);
			}
			c->dx = i;
			c->next = Clone;
			Clone = c;
		    }
		    i++;
		}

#if	defined(HASBLKDEV)
		if ((sb.st_mode & S_IFMT) == S_IFBLK) {

		/*
		 * Save block device information in BDevtp[].
		 */
		    if (j >= BNdev) {
			BNdev += DEVINCR;
			if (!BDevtp)
			    BDevtp = (struct l_dev *)malloc(
				     (MALLOC_S)(sizeof(struct l_dev)*BNdev));
			else
			    BDevtp = (struct l_dev *)realloc(
				     (MALLOC_P *)BDevtp,
				     (MALLOC_S)(sizeof(struct l_dev)*BNdev));
			if (!BDevtp) {
			    (void) fprintf(stderr,
				"%s: no space for block device\n", Pn);
				Exit(1);
			}
		    }
		    BDevtp[j].inode = (INODETYPE)sb.st_ino;
		    BDevtp[j].name = fp;
		    fp = (char *)NULL;
		    BDevtp[j].rdev = sb.st_rdev;
		    BDevtp[j].v = 0;
		    j++;
		}
#endif	/* defined(HASBLKDEV) */

	    }
	    (void) CloseDir(dfp);
	}
/*
 * Free any allocated space.
 */
	if (Dstk) {
	    (void) free((FREE_P *)Dstk);
	    Dstk = (char **)NULL;
	    Dstkn = Dstkx = 0;
	}
	if (fp)
	    (void) free((FREE_P *)fp);
	if (path)
	    (void) free((FREE_P *)path);
/*
 * Reduce the BDevtp[] (optional) and Devtp[] tables to their minimum
 * sizes; allocate and build sort pointer lists; and sort the tables by
 * device number.
 */

#if	defined(HASBLKDEV)
	if (BNdev) {
	    if (BNdev > j) {
		BNdev = j;
		BDevtp = (struct l_dev *)realloc((MALLOC_P *)BDevtp,
			 (MALLOC_S)(sizeof(struct l_dev) * BNdev));
	    }
	    if (!(BSdev = (struct l_dev **)malloc(
		 (MALLOC_S)(sizeof(struct l_dev *) * BNdev))))
	    {
		(void) fprintf(stderr,
		    "%s: no space for block device sort pointers\n", Pn);
		Exit(1);
	    }
	    for (j = 0; j < BNdev; j++) {
		BSdev[j] = &BDevtp[j];
	    }
	    (void) qsort((QSORT_P *)BSdev, (size_t)BNdev,
		(size_t)sizeof(struct l_dev *), compdev);
	    BNdev = rmdupdev(&BSdev, BNdev, "block");
	}

# if	!defined(NOWARNBLKDEV)
	else {
	    if (!Fwarn)
		(void) fprintf(stderr,
		    "%s: WARNING: no block devices found\n", Pn);
	}
# endif	/* !defined(NOWARNBLKDEV) */
#endif	/* defined(HASBLKDEV) */

	if (Ndev) {
	    if (Ndev > i) {
		Ndev = i;
		Devtp = (struct l_dev *)realloc((MALLOC_P *)Devtp,
			(MALLOC_S)(sizeof(struct l_dev) * Ndev));
	    }
	    if (!(Sdev = (struct l_dev **)malloc(
		 (MALLOC_S)(sizeof(struct l_dev *) * Ndev))))
	    {
		(void) fprintf(stderr,
		    "%s: no space for character device sort pointers\n", Pn);
		Exit(1);
	    }
	    for (i = 0; i < Ndev; i++) {
		Sdev[i] = &Devtp[i];
	    }
	    (void) qsort((QSORT_P *)Sdev, (size_t)Ndev,
		(size_t)sizeof(struct l_dev *), compdev);
	    Ndev = rmdupdev(&Sdev, Ndev, "char");
	} else {
	    (void) fprintf(stderr, "%s: no character devices found\n", Pn);
	    Exit(1);
	}

#if	defined(HASDCACHE)
/*
 * Write device cache file, as required.
 */
	if (DCstate == 1 || (DCstate == 3 && dcrd))
	    write_dcache();
#endif	/* defined(HASDCACHE) */

}


#if	defined(USELOCALREADDIR)
/*
 * Copyright (c) 1983, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * This is a hacked version of NetBSD's readdir() function written to work
 * around an apparent bug in the Digital UNIX 3.0 getdirentries() system call
 * and/or their "/dev/fd" filesystem.  The problem is that when applied to
 * "/dev/fs", getdirentries() returns the wrong size, which can cause readdir()
 * to run off the end of it's internal buffer and return bogus file names.
 * 
 * The changes from the original NetBSD file are:
 *
 * - uses of the field dd_flags in the DIR structure have been removed since
 *   Digital UNIX doesn't have this field (it seems to be mostly used for
 *   dealing with whiteout's in NetBSD's union filesystem).
 *
 * - uses of the dd_len field were replaced with dd_bufsiz, since this appears
 *   to be where the Digital UNIX opendir() call stashes the size of the buffer
 *   it mallocs.  Why does Digital UNIX have both?  No idea -- as far as I
 *   could tell  dd_len was always 0.
 *
 * - code within "#ifdef BROKEN_GETDIRENTRIES ... #endif" has been added to
 *   workaround the bug.  Note: this code uses the (apparently) unused field,
 *   dd_len, in the Digital UNIX DIR structure.  This is pretty nasty, but
 *   then, this  whole routine *is* just a hack to get around a (hopefully)
 *   temporary  problem in Digital UNIX.
 *
 * This routine has only been tested on a couple of Digital UNIX 3.0 systems.
 * I make no guarantees that it will work for you...!
 *
 * Duncan McEwan (duncan@@comp.vuw.ac.nz)
 */

/*
 * Additional changes by Vic Abell <abe@@cc.purdue.edu>:
 *
 * - The BROKEN_GETDIRENTRIES symbol was deleted.  Use of this function
 *   is controlled in the lsof distribution by the HASLOCALREADDIR
 *   definition.
 */


/*
 * CloseDir() - close directory
 */

int
CloseDir(dirp)
	register DIR *dirp;
{
	return(closedir(dirp));
}


/*
 * OpenDir() - open directory
 */

DIR *
OpenDir(dir)
	char *dir;
{
	DIR *dirp;

	if ((dirp = opendir(dir))) {

	/*
	 * Get a stat(2) buffer for the directory.
	 *
	 * Warn if the stat(2) buffer operation fails, close the directory,
	 * and respond that the open failed.
	 */
	    if (statsafely(dir, &Dirsb)) {
		int en = errno;

		if (!Fwarn) {
		    (void) fprintf(stderr,
			"%s: WARNING: can't statsafely(", Pn);
		    safestrprt(dir, stderr, 0);
		    (void) fprintf(stderr, "): %s\n", strerror(en));
		}
		(void) CloseDir(dirp);
		dirp = (DIR *)NULL;
	 	errno = en;
	    }
	}
	return(dirp);
}


/*
 * ReadDir() - read next directory entry
 */

extern struct DIRTYPE *
ReadDir(dirp)
	register DIR *dirp;
{
	register struct DIRTYPE *dp;

/*
 * Loop through the directory.
 */
	for (;;) {
	    if (dirp->dd_loc >= dirp->dd_size) {
		dirp->dd_loc = 0;
	    }
	    if (dirp->dd_loc == 0) {
	    	dirp->dd_size = getdirentries(dirp->dd_fd,
			        dirp->dd_buf, dirp->dd_bufsiz, &dirp->dd_seek);

		if (dirp->dd_size <= 0)
		    return((struct DIRTYPE *)NULL);
	    /*
	     * If the size returned by getdirentries() exceeds what it
	     * should be (as determined by a stat(2) of the directory),
	     * set it to the proper value.  This is an adjustment for an
	     * apparent bug in the Digital UNIX 3.[02] getdirentries()
	     * function, when applied to a /dev/fd mount point.
	     *
	     * This check was conceived by Duncan McEwan and modified by
	     * Vic Abell.
	     */
		if (dirp->dd_size > (long)Dirsb.st_size)
		    dirp->dd_size = (long)Dirsb.st_size;
		Dirsb.st_size -= (off_t)dirp->dd_size;
	    }
	    dp = (struct DIRTYPE *)(dirp->dd_buf + dirp->dd_loc);
	    if ((long)dp & 03)		/* bogus pointer check */
		return((struct DIRTYPE *)NULL);
	    if (dp->d_reclen <= 0
	    ||  dp->d_reclen > dirp->dd_bufsiz + 1 - dirp->dd_loc)
		return((struct DIRTYPE *)NULL);
	    dirp->dd_loc += dp->d_reclen;
	    if (dp->d_ino == 0)
		continue;
	    return (dp);
	}
}
#endif	/* defined(USELOCALREADDIR) */


#if	defined(HASDCACHE)
/*
 * rereaddev() - reread device names, modes and types
 */

void
rereaddev()
{
	(void) clr_devtab();

# if	defined(DCACHE_CLR)
	(void) DCACHE_CLR();
# endif	/* defined(DCACHE_CLR) */

	readdev(1);
	DCunsafe = 0;
}
#endif	/* defined(HASDCACHE) */


/*
 * rmdupdev() - remove duplicate (major/minor/inode) devices
 */

static int
rmdupdev(dp, n, nm)
	struct l_dev ***dp;	/* device table pointers address */
	int n;			/* number of pointers */
	char *nm;		/* device table name for error message */
{
	struct clone *c, *cp;
	int i, j, k;
	struct l_dev **p;

	for (i = j = 0, p = *dp; i < n ;) {
	    for (k = i + 1; k < n; k++) {
		if (p[i]->rdev != p[k]->rdev || p[i]->inode != p[k]->inode)
		    break;
	    /*
	     * See if we're deleting a duplicate clone device.  If so,
	     * delete its clone table entry.
	     */
		for (c = Clone, cp = (struct clone *)NULL;
		     c;
		     cp = c, c = c->next)
		{
		    if (&Devtp[c->dx] != p[k])
			continue;
		    if (!cp)
			Clone = c->next;
		    else
			cp->next = c->next;
		    (void) free((FREE_P *)c);
		    break;
		}
	    }
	    if (i != j)
		p[j] = p[i];
	    j++;
	    i = k;
	}
	if (n == j)
	    return(n);
	if (!(*dp = (struct l_dev **)realloc((MALLOC_P *)*dp,
	    (MALLOC_S)(j * sizeof(struct l_dev *)))))
	{
	    (void) fprintf(stderr, "%s: can't realloc %s device pointers\n",
		Pn, nm);
	    Exit(1);
	}
	return(j);
}


#if	defined(HASDCACHE)
/*
 * vfy_dev() - verify a device table entry (usually when DCunsafe == 1)
 *
 * Note: rereads entire device table when an entry can't be verified.
 */

int
vfy_dev(dp)
	struct l_dev *dp;		/* device table pointer */
{
	struct stat sb;

	if (!DCunsafe || dp->v)
	    return(1);

#if	defined(USE_STAT)
	if (stat(dp->name, &sb) != 0
#else	/* !defined(USE_STAT) */
	if (lstat(dp->name, &sb) != 0
#endif	/* defined(USE_STAT) */

	||  dp->rdev != sb.st_rdev
	||  dp->inode != (INODETYPE)sb.st_ino) {
	   (void) rereaddev();
	   return(0);
	}
	dp->v = 1;
	return(1);
}
#endif	/* defined(HASDCACHE) */
@


1.16
log
@Revision 4.76
@
text
@d36 1
a36 1
static char *rcsid = "$Id: ddev.c,v 1.15 2002/02/26 15:19:35 abe Exp abe $";
d171 1
a171 1
	    (void) free((MALLOC_P *)cp);
@


1.15
log
@Revision 4.62
@
text
@d36 1
a36 1
static char *rcsid = "$Id: ddev.c,v 1.14 2001/08/14 12:40:12 abe Exp abe $";
d337 1
a337 1
		    Devtp[i].inode = sb.st_ino;
d386 1
a386 1
		    BDevtp[j].inode = sb.st_ino;
d752 1
a752 1
	||  dp->inode != sb.st_ino) {
@


1.14
log
@Revision 4.58
@
text
@d36 1
a36 1
static char *rcsid = "$Id: ddev.c,v 1.13 2000/12/04 14:24:15 abe Exp abe $";
d55 2
a56 1
#define	LIKE_NODE_TTL	"like device special "
d88 1
a88 1
 * printchdevname() - print character device name
d92 1
a92 1
printchdevname(dev, rdev, f)
d96 1
d108 1
a108 1
printchdevname_again:
d112 1
a112 1
	if (Clone && HAVECLONEMAJ && (*dev == DevDev)
d120 1
a120 1
			goto printchdevname_again;
d131 9
a139 1
	if ((dp = lkupdev(dev, rdev, 1, 0))) {
a145 1
	if ((dp = lkupdev(&DevDev, rdev, 0, 0))) {
d147 9
d159 1
a159 1
	    char *cp;
d162 2
a163 1
	    len = (int)(1 + strlen(LIKE_NODE_TTL) + strlen(dp->name) + 1);
d165 2
a166 2
		(void) fprintf(stderr, "%s: no nma space for: (%s%s)\n",
		    Pn, LIKE_NODE_TTL, dp->name);
d169 1
a169 1
	    (void) snpf(cp, len + 1, "(%s%s)", LIKE_NODE_TTL, dp->name);
d182 1
a182 1
	    goto printchdevname_again;
@


1.13
log
@Revision 4.53
@
text
@d36 1
a36 1
static char *rcsid = "$Id: ddev.c,v 1.12 2000/11/03 18:43:08 abe Exp abe $";
d111 1
a111 1
	&&  (major(*rdev) == CLONEMAJ))
d329 3
a331 1
		    if (HAVECLONEMAJ && major(Devtp[i].rdev) == CLONEMAJ) {
@


1.12
log
@Revision 4.52
@
text
@d36 1
a36 1
static char *rcsid = "$Id: ddev.c,v 1.11 1999/06/22 08:13:44 abe Exp abe $";
d51 11
d91 3
a93 2
printchdevname(rdev, f)
	dev_t *rdev;			/* device */
d110 3
a112 1
	if (Clone && HAVECLONEMAJ && major(*rdev) == CLONEMAJ) {
d127 1
a127 1
 * Search device table for match.
d129 1
a129 1
	if ((dp = lkupdev(rdev, 1, 0))) {
d132 22
@


1.11
log
@Revision 4.44
@
text
@d36 1
a36 1
static char *rcsid = "$Id: ddev.c,v 1.10 99/04/15 06:46:56 abe Exp Locker: abe $";
d379 4
a382 1
	} else {
d387 1
@


1.10
log
@Revision 4.43
Document for Tru64.  Adjust Tru64 IPv6 support.
@
text
@d36 1
a36 1
static char *rcsid = "$Id: ddev.c,v 1.9 99/01/25 06:57:37 abe Exp Locker: abe $";
d98 1
a98 1
	if (Clone && major(*rdev) == major(Clonedev)) {
d293 1
a293 1
		    if (major(Devtp[i].rdev) == major(Clonedev)) {
d297 2
a298 2
				"%s: no space for clone device: %s\n", Pn, fp);
			    safestrprt(Devtp[i].name, stderr, 1);
a609 126
}


/*
 * rw_clone_sect() - read/write the device cache file clone section
 */

int
rw_clone_sect(m)
	int m;				/* mode: 1 = read; 2 = write */
{
	char buf[MAXPATHLEN*2], *cp, *cp1;
	struct clone *c;
	struct l_dev *dp;
	int i, j, len, n;

	if (m == 1) {

	/*
	 * Read the clone section header and validate it.
	 */
	    if (!fgets(buf, sizeof(buf), DCfs)) {

bad_clone_sect:
		if (!Fwarn) {
		    (void) fprintf(stderr,
			"%s: bad clone section header in %s: ",
			Pn, DCpath[DCpathX]);
		    safestrprt(buf, stderr, 1);
		}
		return(1);
	    }
	    (void) crc(buf, strlen(buf), &DCcksum);
	    len = strlen("clone section: ");
	    if (strncmp(buf, "clone section: ", len) != 0)
		goto bad_clone_sect;
	    if ((n = atoi(&buf[len])) < 0)
		goto bad_clone_sect;
	/*
	 * Read the clone section lines and create the Clone list.
	 */
	    for (i = 0; i < n; i++) {
		if (!fgets(buf, sizeof(buf), DCfs)) {
		    if (!Fwarn) {
			(void) fprintf(stderr,
			    "%s: bad clone line in %s: ", Pn, DCpath[DCpathX]);
			safestrprt(buf, stderr, 1);
		    }
		    return(1);
		}
		(void) crc(buf, strlen(buf), &DCcksum);
	    /*
	     * Assemble Devtp[] index and make sure it's correct.
	     */
		for (cp = buf, j = 0; *cp != ' '; cp++) {
		    if (*cp < '0' || *cp > '9') {

bad_clone_index:
			if (!Fwarn) {
			    (void) fprintf(stderr,
				"%s: bad cached clone device index: ", Pn);
			    safestrprt(buf, stderr, 1);
			}
			return(1);
		    }
		    j = (j * 10) + (int)(*cp - '0');
		}
		if (j < 0 || j >= Ndev || !(cp1 = strchr(++cp, '\n')))
		    goto bad_clone_index;
		if (strncmp(cp, Devtp[j].name, (cp1 - cp)) != 0)
		    goto bad_clone_index;
	    /*
	     * Allocate and complete a clone structure.
	     */
		if (!(c = (struct clone *)malloc(sizeof(struct clone)))) {
		    (void) fprintf(stderr,
			"%s: no space for cached clone: ", Pn);
		    safestrprt(buf, stderr, 1);
		    Exit(1);
		}
		c->dx = j;
		c->next = Clone;
		Clone = c;
	    }
	    return(0);
	} else if (m == 2) {

	/*
	 * Write the clone section header.
	 */
	    for (c = Clone, n = 0; c; c = c->next, n++)
		;
	    (void) sprintf(buf, "clone section: %d\n", n);
	    if (wr2DCfd(buf, &DCcksum))
		return(1);
	/*
	 * Write the clone section lines.
	 */
	    for (c = Clone; c; c = c->next) {
		for (dp = &Devtp[c->dx], j = 0; j < Ndev; j++) {
		    if (dp == Sdev[j])
			break;
		}
		if (j >= Ndev) {
		    if (!Fwarn) {
			(void) fprintf(stderr,
			    "%s: can't make index for clone: ", Pn);
			safestrprt(dp->name, stderr, 1);
		    }
		    (void) unlink(DCpath[DCpathX]);
		    (void) close(DCfd);
		    DCfd = -1;
		    return(1);
		}
		(void) sprintf(buf, "%d %s\n", j, dp->name);
		if (wr2DCfd(buf, &DCcksum))
		    return(1);
	    }
	    return(0);
	}
/*
 * A shouldn't-happen case: mode neither 1 nor 2.
 */
	(void) fprintf(stderr, "%s: internal rw_clone_sect error: %d\n",
	    Pn, m);
	Exit(1);
@


1.9
log
@Revision 4.40
@
text
@d2 2
a3 1
 * ddev.c - Digital UNIX (DEC OSF/1) device support functions for lsof
d36 1
a36 1
static char *rcsid = "$Id: ddev.c,v 1.8 98/10/08 08:30:23 abe Exp Locker: abe $";
@


1.8
log
@Revision 4.38
Pick lint.
@
text
@d35 1
a35 1
static char *rcsid = "$Id: ddev.c,v 1.7 98/03/18 15:08:06 abe Exp Locker: abe $";
a37 1

a40 10
#if	defined(USELOCALREADDIR)
_PROTOTYPE(static struct dirent *ReadDir,(DIR *dirp));
#else	/* !defined(USELOCALREADDIR) */
#define	ReadDir	readdir
#endif	/* defined(USELOCALREADDIR) */

_PROTOTYPE(static int rmdupdev,(struct l_dev ***dp, int n, char *nm));
_PROTOTYPE(static void stkdir,(char ***d, int *n, int *x, char *p));


d42 1
a42 1
 * Local static definitions
d46 1
a46 1
static struct stat DirSb;
d50 3
d148 1
a148 4
	int dn = 0;
	struct dirent *dp;
	char **dstk = (char **)NULL;
	int dx = 0;
d177 3
a179 1
	(void) stkdir(&dstk, &dn, &dx, "/dev");
d183 2
a184 2
	while (--dx >= 0) {
	    if (!(dfp = opendir(dstk[dx]))) {
d189 1
a189 1
		    safestrprt(dstk[dx], stderr, 1);
d193 2
a196 14

#if	defined(USELOCALREADDIR)
	    if (fstat(dfp->dd_fd, &DirSb) < 0) {
		if (!Fwarn) {
		    int errno_save = errno;

		    (void) fprintf(stderr, "%s: WARNING: can't stat ", Pn);
		    safestrprt(dstk[dx], stderr, 0);
		    (void) fprintf(stderr, ": %s\n", strerror(errno_save));
		}
		continue;
	    }
#endif	/* defined(USELOCALREADDIR) */

d201 2
a202 1
	    if (!(path = mkstrcat(dstk[dx], -1, "/", 1, (char *)NULL, -1, &pl)))
d205 1
a205 1
		safestrprt(dstk[dx], stderr, 1);
d208 2
a209 2
	    (void) free((FREE_P *)dstk[dx]);
	    dstk[dx] = (char *)NULL;
d258 1
a258 1
		    (void) stkdir(&dstk, &dn, &dx, fp);
d338 1
a338 1
	    (void) closedir(dfp);
d343 5
a347 2
	if (!dstk)
	    (void) free((FREE_P *)dstk);
a489 3
 *
 * - The buffer from an fstat() of the directory is supplied in the
 *   static stat structure DirSb.
d494 1
a494 1
 * get next entry in a directory.
d497 49
a545 1
static struct dirent *
d549 1
a549 1
	register struct dirent *dp;
d551 3
d555 6
a560 6
		if (dirp->dd_loc >= dirp->dd_size) {
			dirp->dd_loc = 0;
		}
		if (dirp->dd_loc == 0) {
			dirp->dd_size = getdirentries(dirp->dd_fd,
			    dirp->dd_buf, dirp->dd_bufsiz, &dirp->dd_seek);
d562 26
a587 26
			if (dirp->dd_size <= 0)
				return((struct dirent *)NULL);
		/*
		 * If the size returned by getdirentries() exceeds what it
		 * should be (as determined by an fstat() of the directory),
		 * set it to the proper value.  This is an adjustment for an
		 * apparent bug in the Digital UNIX 3.[02] getdirentries()
		 * function, when applied to a /dev/fd mount point.
		 *
		 * This check was conceived by Duncan McEwan and modified by
		 * Vic Abell.
		 */
			if (dirp->dd_size > (long)DirSb.st_size)
				dirp->dd_size = (long)DirSb.st_size;
			DirSb.st_size -= (off_t)dirp->dd_size;
		}
		dp = (struct dirent *)(dirp->dd_buf + dirp->dd_loc);
		if ((long)dp & 03)	/* bogus pointer check */
			return((struct dirent *)NULL);
		if (dp->d_reclen <= 0 ||
		    dp->d_reclen > dirp->dd_bufsiz + 1 - dirp->dd_loc)
			return((struct dirent *)NULL);
		dirp->dd_loc += dp->d_reclen;
		if (dp->d_ino == 0)
			continue;
		return (dp);
a789 41
}


/*
 * stkdir() - stack directory name
 */

static void
stkdir(d, n, x, p)
	char ***d;		/* array of directory pointers */
	int *n;			/* number of pointers */
	int *x;			/* current index */
	char *p;		/* directory path */
{
	MALLOC_S len;
/*
 * Provide adequate space for stack pointers.
 */
	if (*x >= *n) {
	    *n += 10;
	    len = (MALLOC_S)(*n * sizeof(char *));
	    if (!*d)
		*d = (char **)malloc(len);
	    else
		*d = (char **)realloc((MALLOC_P *)*d, len);
	    if (!*d) {
		(void) fprintf(stderr,
		    "%s: no space for directory stack at: ", Pn);
		safestrprt(p, stderr, 1);
		Exit(1);
	    }
	}
/*
 * Allocate space for the name, copy it there and put its pointer on the stack.
 */
	if (!((*d)[*x] = mkstrcpy(p, (MALLOC_S *)NULL))) {
	    (void) fprintf(stderr, "%s: no space for: ", Pn);
	    safestrprt(p, stderr, 1);
	    Exit(1);
	}
	*x += 1;
@


1.7
log
@Revision 4.29
Remove bugs causing segmentation faults.
@
text
@d35 1
a35 1
static char *rcsid = "$Id: ddev.c,v 1.6 98/03/06 08:19:16 abe Exp Locker: abe $";
d94 1
a94 1
	readdev();
d316 1
a316 1
				"%s: no space for clone device: %s\n", Pn);
@


1.6
log
@Revision 4.27
@
text
@d35 1
a35 1
static char *rcsid = "$Id: ddev.c,v 1.5 97/07/02 11:20:40 abe Exp Locker: abe $";
a192 1
	    (void) strcpy(path, dstk[dx]);
d302 1
a302 1
		    if ((Devtp[i].name = mkstrcpy(fp, (MALLOC_S *)NULL))) {
@


1.5
log
@Revision 4.13
Change from DEC OSF/1 to Digital UNIX.
@
text
@d35 1
a35 1
static char *rcsid = "$Id: ddev.c,v 1.4 97/06/07 20:13:20 abe Exp Locker: abe $";
d72 5
a76 5
		for (c = Clone; c; c = c1) {
			c1 = c->next;
			(void) free((FREE_P *)c);
		}
		Clone = NULL;
d114 1
a114 4
		    if (f)
			(void) puts(Devtp[c->dx].name);
		    else
			(void) fputs(Devtp[c->dx].name, stdout);
d123 1
a123 4
	    if (f)
		(void) puts(dp->name);
	    else
		(void) fputs(dp->name, stdout);
d158 1
a158 1
	char **dstk = NULL;
d160 1
d168 2
a169 2
	char path[MAXNAMLEN+1];
	int pl;
d194 1
a194 1
	    if ((dfp = opendir(path)) == NULL) {
d197 4
a200 3
		if (!Fwarn)
		    (void) fprintf(stderr, "%s: WARNING: can't open %s\n",
			Pn, path);
d208 7
a214 3
		if (!Fwarn)
		    (void) fprintf(stderr, "%s: WARNING: can't stat %s: %s\n",
			Pn, path, strerror(errno));
d219 10
a228 2
	    (void) strcat(path, "/");
	    pl = strlen(path);
d230 1
a230 1
	    dstk[dx] = NULL;
d240 10
a249 4
		if ((nl = pl + dp->d_namlen) >= sizeof(path)) {
		    (void) fprintf(stderr,
			"%s: /dev entry name too long: %s\n",
			Pn, dp->d_name);
a251 2
		(void) strncpy(&path[pl], dp->d_name, (STRNCPY_L)dp->d_namlen);
		path[nl++] = '\0';
d254 1
a254 1
		if (stat(path, &sb) != 0)
d256 1
a256 1
		if (lstat(path, &sb) != 0)
d264 7
a270 3
		    if (!Fwarn)
			(void) fprintf(stderr, "%s: can't stat %s: %s\n",
			    Pn, path, strerror(errno));
d279 1
a279 1
		    (void) stkdir(&dstk, &dn, &dx, path);
d289 1
a289 1
			if (Devtp == NULL)
d296 1
a296 1
			if (Devtp == NULL) {
d303 3
a305 3
		    if ((Devtp[i].name = (char *)malloc(nl)) == NULL) {
			(void) fprintf(stderr, "%s: no space for /dev/%s\n",
			    Pn, dp->d_name);
a307 1
		    (void) strcpy(Devtp[i].name, path);
d314 2
a315 2
			if ((c = (struct clone *)malloc( sizeof(struct clone)))
			== NULL) {
d317 2
a318 2
				"%s: no space for clone device: %s\n",
				Pn, Devtp[i].name);
d336 1
a336 1
			if (BDevtp == NULL)
d343 1
a343 1
			if (BDevtp == NULL) {
d350 2
a351 6
		    if ((BDevtp[j].name = (char *)malloc(nl)) == NULL) {
			(void) fprintf(stderr, "%s: no space for /dev/%s\n",
			    Pn, dp->d_name);
			Exit(1);
		    }
		    (void) strcpy(BDevtp[j].name, path);
d362 1
a362 1
 * Free any directory stack space.
d364 1
a364 1
	if (dstk != NULL)
d366 4
d383 3
a385 3
	    if ((BSdev = (struct l_dev **)malloc(
		(MALLOC_S)(sizeof(struct l_dev *) * BNdev)))
	    == (struct l_dev **)NULL) {
d387 1
a387 1
		    "%s: no space for block device pointers\n", Pn);
d409 3
a411 3
	    if ((Sdev = (struct l_dev **)malloc(
		(MALLOC_S)(sizeof(struct l_dev *) * Ndev)))
	    == (struct l_dev **)NULL) {
d413 1
a413 1
		    "%s: no space for character device pointers\n", Pn);
d533 1
a533 1
				return (NULL);
d550 1
a550 1
			return (NULL);
d553 1
a553 1
			return (NULL);
d600 1
a600 1
	    if (fgets(buf, sizeof(buf), DCfs) == NULL) {
d603 1
a603 1
		if (!Fwarn)
d605 4
a608 2
			"%s: bad clone section header in %s: %s",
			Pn, DCpath[DCpathX], buf);
d621 2
a622 2
		if (fgets(buf, sizeof(buf), DCfs) == NULL) {
		    if (!Fwarn)
d624 3
a626 2
			    "%s: bad clone line in %s: %s",
			    Pn, DCpath[DCpathX], buf);
d637 1
a637 1
			if (!Fwarn)
d639 3
a641 2
				"%s: bad cached clone device index: %s",
				Pn, buf);
d646 1
a646 1
		if (j < 0 || j >= Ndev || (cp1 = strchr(++cp, '\n')) == NULL)
d653 1
a653 2
		if ((c = (struct clone *)malloc(sizeof(struct clone)))
		== NULL) {
d655 2
a656 2
			"%s: no space for cached clone: %s",
			Pn, buf);
d683 1
a683 1
		    if (!Fwarn)
d685 3
a687 2
			    "%s: can't make index for clone: %s\n",
			    Pn, dp->name);
d774 17
a790 26
	if (*d == NULL) {

	/*
	 * Allocate first entry.
	 */
		if ((*d = (char **)malloc(sizeof(char *))) == NULL) {

stkdir_nospace:

			(void) fprintf(stderr,
				"%s: no space for directory stack at %s\n",
				Pn, p);
			Exit(1);
		}
		*n = 1;
		*x = 0;
	} else if (*x >= *n) {

	/*
	 * Allocate additional space as required.
	 */
		*n += 1;
		if ((*d = (char **)realloc((MALLOC_P *)*d,
		          (MALLOC_S)(*n * sizeof(char *))))
		== NULL)
			goto stkdir_nospace;
d795 4
a798 3
	if (((*d)[*x] = (char *)malloc((MALLOC_S)(strlen(p) + 1))) == NULL) {
		(void) fprintf(stderr, "%s: no space for %s\n", Pn, p);
		Exit(1);
a799 1
	(void) strcpy((*d)[*x], p);
@


1.4
log
@Revision 4.10
Use lstat() instead of stat() to reduce duplicates.
Remove remaining duplicates.
@
text
@d2 1
a2 1
 * ddev.c - DEC OSF/1 device support functions for lsof
d35 1
a35 1
static char *rcsid = "$Id: ddev.c,v 1.3 97/04/15 13:14:31 abe Exp Locker: abe $";
d240 8
a247 1
		if (lstat(path, &sb) != 0) {
d382 3
a384 2
	    (void) fprintf(stderr, "%s: no block devices found\n", Pn);
	    Exit(1);
d459 1
a459 1
 * around an apparent bug in DEC's OSF/1 3.0 getdirentries() system call
d461 2
a462 3
 * "/dev/fd", getdirentries() returns the wrong size, which can cause
 * readdir() to run off the end of it's internal buffer and return bogus
 * file names.
d466 2
a467 2
 * - uses of the field dd_flags in the DIR structure have been removed
 *   since OSF doesn't have this field (it seems to be mostly used for
d470 4
a473 4
 * - uses of the dd_len field were replaced with dd_bufsiz, since this
 *   appears to be where OSF's opendir() call stashes the size of the buffer
 *   it mallocs.  Why does OSF have both?  No idea -- as far as I could tell
 *   dd_len was always 0.
d477 3
a479 3
 *   dd_len, in OSF's DIR structure.  This is pretty nasty, but then, this
 *   whole routine *is* just a hack to get around a (hopefully) temporary
 *   problem in OSF.
d481 1
a481 1
 * This routine has only been tested on a couple of our OSF/1 3.0 systems.
d523 1
a523 1
		 * apparent bug in the DEC OSF/1 3.[02] getdirentries()
d809 4
d814 2
@


1.3
log
@Revision 4.04
Supply missing continue statement.
@
text
@d35 1
a35 1
static char *rcsid = "$Id: ddev.c,v 1.2 97/04/15 10:41:47 abe Exp Locker: abe $";
d48 1
d240 1
a240 1
		if (stat(path, &sb) != 0) {
d373 1
d398 1
d684 54
d802 1
a802 1
	if (stat(dp->name, &sb) != 0
@


1.2
log
@Revision 4.04
@
text
@d35 1
a35 1
static char *rcsid = "$Id: ddev.c,v 1.1 97/02/24 07:39:26 abe Exp Locker: abe $";
d206 1
@


1.1
log
@Initial revision
@
text
@d35 1
a35 1
static char *rcsid = "$Id: ddev.c,v 1.21 96/10/28 13:26:00 abe Exp $";
d60 1
d62 20
d97 7
d105 13
a117 3
		for (c = Clone; c; c = c->next) {
			if (Devtp[c->dx].rdev == *rdev)
				break;
d119 1
a119 7
		if (c) {
			if (f)
				(void) puts(Devtp[c->dx].name);
			else
				(void) fputs(Devtp[c->dx].name, stdout);
			return(1);
		}
d124 6
a129 6
	if ((dp = lkupdev(rdev, 1)) != (struct l_dev *)NULL) {
		if (f)
			(void) puts(dp->name);
		else
			(void) fputs(dp->name, stdout);
		return(1);
d131 12
d152 2
a153 1
readdev()
d183 7
a189 4
	if (DCstate == 2 || DCstate == 3) {
	    if ((dcrd = read_dcache()) == 0)
		return;
	}
a276 1
		    Devtp[i].rdev = sb.st_rdev;
d284 2
a324 1
		    BDevtp[j].rdev = sb.st_rdev;
d332 2
d539 1
a539 1
 * clr_sect() - clear cached clone and pseudo sections
d543 1
a543 1
clr_sect()
d545 1
a545 1
	struct clone *c, *c1;
d547 6
a552 7
	if (Clone) {
		for (c = Clone; c; c = c1) {
			c1 = c->next;
			(void) free((FREE_P *)c);
		}
		Clone = NULL;
	}
d727 27
@
