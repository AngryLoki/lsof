head	1.19;
access;
symbols;
locks; strict;
comment	@ * @;


1.19
date	2005.08.08.19.56.44;	author abe;	state Exp;
branches;
next	1.18;

1.18
date	2004.03.10.23.50.35;	author abe;	state Exp;
branches;
next	1.17;

1.17
date	2002.01.16.15.05.05;	author abe;	state Exp;
branches;
next	1.16;

1.16
date	2001.11.01.20.28.18;	author abe;	state Exp;
branches;
next	1.15;

1.15
date	2001.10.17.19.17.13;	author abe;	state Exp;
branches;
next	1.14;

1.14
date	2001.01.02.12.40.20;	author abe;	state Exp;
branches;
next	1.13;

1.13
date	2000.07.31.18.31.33;	author abe;	state Exp;
branches;
next	1.12;

1.12
date	99.11.28.06.39.40;	author abe;	state Exp;
branches;
next	1.11;

1.11
date	99.04.15.06.47.26;	author abe;	state Exp;
branches;
next	1.10;

1.10
date	99.03.29.07.11.57;	author abe;	state Exp;
branches;
next	1.9;

1.9
date	99.01.25.06.58.45;	author abe;	state Exp;
branches;
next	1.8;

1.8
date	98.08.03.07.41.04;	author abe;	state Exp;
branches;
next	1.7;

1.7
date	98.05.22.07.11.00;	author abe;	state Exp;
branches;
next	1.6;

1.6
date	98.03.06.08.19.31;	author abe;	state Exp;
branches;
next	1.5;

1.5
date	97.10.23.12.19.25;	author abe;	state Exp;
branches;
next	1.4;

1.4
date	97.09.23.09.47.32;	author abe;	state Exp;
branches;
next	1.3;

1.3
date	97.08.15.08.18.36;	author abe;	state Exp;
branches;
next	1.2;

1.2
date	97.07.02.11.21.11;	author abe;	state Exp;
branches;
next	1.1;

1.1
date	97.02.24.07.39.41;	author abe;	state Exp;
branches;
next	;


desc
@Lsof version 4
@


1.19
log
@Revision 4.76
@
text
@/*
 * dsock.c - DEC OSF/1, Digital UNIX, Tru64 UNIX socket processing functions
 *	     for lsof
 */


/*
 * Copyright 1994 Purdue Research Foundation, West Lafayette, Indiana
 * 47907.  All rights reserved.
 *
 * Written by Victor A. Abell
 *
 * This software is not subject to any license of the American Telephone
 * and Telegraph Company or the Regents of the University of California.
 *
 * Permission is granted to anyone to use this software for any purpose on
 * any computer system, and to alter it and redistribute it freely, subject
 * to the following restrictions:
 *
 * 1. Neither the authors nor Purdue University are responsible for any
 *    consequences of the use of this software.
 *
 * 2. The origin of this software must not be misrepresented, either by
 *    explicit claim or by omission.  Credit to the authors and Purdue
 *    University must appear in documentation and sources.
 *
 * 3. Altered versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 *
 * 4. This notice may not be removed or altered.
 */

#ifndef lint
static char copyright[] =
"@@(#) Copyright 1994 Purdue Research Foundation.\nAll rights reserved.\n";
static char *rcsid = "$Id: dsock.c,v 1.18 2004/03/10 23:50:35 abe Exp abe $";
#endif


#include "lsof.h"


/*
 * process_socket() - process socket
 */

void
process_socket(sa)
	KA_T sa;			/* socket address in kernel */
{
	struct domain d;
	unsigned char *fa = (unsigned char *)NULL;
	int fam;
	int fp, lp;
	struct inpcb inp;
	KA_T ka;
	unsigned char *la = (unsigned char *)NULL;
	struct mbuf mb;
	struct protosw p;
	struct socket s;
	struct tcpcb t;
	struct unpcb uc, unp;
	struct sockaddr_un *ua = NULL;
	struct sockaddr_un un;

	(void) snpf(Lf->type, sizeof(Lf->type), "sock");
	Lf->inp_ty = 2;
/*
 * Read the socket, protocol, and domain structures.
 */
	if (!sa) {
	    enter_nm("no socket address");
	    return;
	}
	if (kread(sa, (char *) &s, sizeof(s))) {
	    (void) snpf(Namech, Namechl, "can't read socket struct from %s",
		print_kptr(sa, (char *)NULL, 0));
	    enter_nm(Namech);
	    return;
	}
	if (!s.so_type) {
	    enter_nm("no socket type");
	    return;
	}
	if (!s.so_proto
	||  kread((KA_T)s.so_proto, (char *)&p, sizeof(p))) {
	    (void) snpf(Namech, Namechl, "can't read protocol switch from %s",
		print_kptr((KA_T)s.so_proto, (char *)NULL, 0));
	    enter_nm(Namech);
	    return;
	}
	if (!p.pr_domain
	||  kread((KA_T)p.pr_domain, (char *)&d, sizeof(d))) {
	    (void) snpf(Namech, Namechl, "can't read domain struct from %s",
		print_kptr((KA_T)p.pr_domain, (char *)NULL, 0));
	    enter_nm(Namech);
	    return;
	}
/*
 * Save size information.
 */
	if (Fsize) {
	    if (Lf->access == 'r')
		Lf->sz = (SZOFFTYPE)s.so_rcv.sb_cc;
	    else if (Lf->access == 'w')
		Lf->sz = (SZOFFTYPE)s.so_snd.sb_cc;
	    else
		Lf->sz = (SZOFFTYPE)(s.so_rcv.sb_cc + s.so_snd.sb_cc);
	    Lf->sz_def = 1;
	} else
	    Lf->off_def = 1;

#if	defined(HASTCPTPIQ)
	Lf->lts.rq = s.so_rcv.sb_cc;
	Lf->lts.sq = s.so_snd.sb_cc;
	Lf->lts.rqs = Lf->lts.sqs = 1;
#endif	/* defined(HASTCPTPIQ) */

#if	defined(HASSOOPT)
	Lf->lts.ltm = (unsigned int)s.so_linger;
	Lf->lts.opt = (unsigned int)s.so_options;
	Lf->lts.pqlen = (unsigned int)s.so_q0len;
	Lf->lts.qlen = (unsigned int)s.so_qlen;
	Lf->lts.qlim = (unsigned int)s.so_qlimit;
	Lf->lts.rbsz = (unsigned long)s.so_rcv.sb_mbmax;
	Lf->lts.sbsz = (unsigned long)s.so_snd.sb_mbmax;
	Lf->lts.pqlens = Lf->lts.qlens = Lf->lts.qlims = Lf->lts.rbszs
		       = Lf->lts.sbszs = (unsigned char)1;
#endif	/* defined(HASSOOPT) */

#if	defined(HASSOSTATE)
	Lf->lts.ss = (unsigned int)s.so_state;
#endif	/* defined(HASSOSTATE) */

/*
 * Process socket by the associated domain family.
 */
	switch ((fam = d.dom_family)) {
/*
 * Process an Internet domain socket.
 */
	case AF_INET:

#if	defined(HASIPv6)
	case AF_INET6:
	    (void) snpf(Lf->type, sizeof(Lf->type),
		(fam == AF_INET) ? "IPv4" : "IPv6");
#else	/* !defined(HASIPv6) */
	    (void) snpf(Lf->type, sizeof(Lf->type), "inet");
#endif	/* defined(HASIPv6) */

	    if (Fnet) {
		if (!FnetTy
		||  ((FnetTy == 4) && (fam == AF_INET))

#if	defined(HASIPv6)
		||  ((FnetTy == 6) && (fam == AF_INET6))
#endif	/* defined(HASIPv6) */
		)

		    Lf->sf |= SELNET;
	    }
	    printiproto(p.pr_protocol);
	/*
	 * Read protocol control block.
	 */
	    if (!s.so_pcb
	    ||  kread((KA_T)s.so_pcb, (char *)&inp, sizeof(inp))) {
		(void) snpf(Namech, Namechl, "can't read inpcb at %s",
		    print_kptr((KA_T)s.so_pcb, (char *)NULL, 0));
		enter_nm(Namech);
		return;
	    }
	/*
	 * Print Internet socket information.
	 */
	    ka = (KA_T)(inp.inp_ppcb ? inp.inp_ppcb : s.so_pcb);
	    enter_dev_ch(print_kptr((ka & 0xffffffff), (char *)NULL, 0));

#if	defined(HASIPv6)
	    if ((fam == AF_INET && IN6_IS_ADDR_UNSPECIFIED(&inp.inp_laddr))
	    ||   IN6_IS_ADDR_V4MAPPED(&inp.inp_laddr)) {
		la = (unsigned char *)&IN6_EXTRACT_V4ADDR(&inp.inp_laddr);
		fam = AF_INET;
	    } else {
		la = (unsigned char *)&inp.inp_laddr;
		fam = AF_INET6;
	    }
#else	/* !defined(HASIPv6) */
	    la = (unsigned char *)&inp.inp_laddr;
#endif	/* defined(HASIPv6) */

	    lp = (int)ntohs(inp.inp_lport);

#if	defined(HASIPv6)
	    if (fam == AF_INET) {
		if (inp.inp_fport
		||  IN6_EXTRACT_V4ADDR(&inp.inp_faddr) != INADDR_ANY)
		{
		    fa = (unsigned char *)&IN6_EXTRACT_V4ADDR(&inp.inp_faddr);
		    fp = (int)ntohs(inp.inp_fport);
		}
	    } else {
		if (inp.inp_fport || !IN6_IS_ADDR_UNSPECIFIED(&inp.inp_faddr))
		{
		    fa = (unsigned char *)&inp.inp_faddr;
		    fp = (int)ntohs(inp.inp_fport);
		}
	    }
#else	/* !defined(HASIPv6) */
	    if (inp.inp_faddr.s_addr != INADDR_ANY || inp.inp_fport != 0) {
		fa = (unsigned char *)&inp.inp_faddr;
		fp = (int)ntohs(inp.inp_fport);
	    }
#endif	/* defined(HASIPv6) */

	    if (fa || la)
		(void) ent_inaddr(la, lp, fa, fp, fam);
	    if (p.pr_protocol == IPPROTO_TCP && inp.inp_ppcb
	    &&  !kread((KA_T)inp.inp_ppcb, (char *)&t, sizeof(t))) {
		Lf->lts.type = 0;
		Lf->lts.state.i = (int)t.t_state;

#if	defined(HASSOOPT)
		Lf->lts.kai = (unsigned int)t.t_timer[TCPT_KEEP];
#endif	/* defined(HASSOOPT) */

#if	defined(HASTCPOPT)
		Lf->lts.mss = (unsigned long)t.t_maxseg;
		Lf->lts.msss = (unsigned char)1;
		Lf->lts.topt = (unsigned int)t.t_flags;
#endif	/* defined(HASTCPOPT) */

	    }
	    break;
/*
 * Process a ROUTE domain socket.
 */
	case AF_ROUTE:
	    (void) snpf(Lf->type, sizeof(Lf->type), "rte");
	    if (s.so_pcb) {
		ka = (KA_T)(s.so_pcb);
		enter_dev_ch(print_kptr((ka & 0xffffffff), (char *)NULL, 0));
	    } else
		(void) snpf(Namech, Namechl, "no protocol control block");
	    if (!Fsize)
		Lf->off_def = 1;
	    break;
/*
 * Process a Unix domain socket.
 */
	case AF_UNIX:
	    if (Funix)
		Lf->sf |= SELUNX;
	    (void) snpf(Lf->type, sizeof(Lf->type), "unix");
	/*
	 * Read Unix protocol control block and the Unix address structure.
	 */
	    enter_dev_ch(print_kptr((sa & 0xffffffff), (char *)NULL, 0));
	    if (kread((KA_T) s.so_pcb, (char *) &unp, sizeof(unp))) {
		(void) snpf(Namech, Namechl, "can't read unpcb at %s",
		    print_kptr((KA_T)s.so_pcb, (char *)NULL, 0));
		break;
	    }
	    if ((struct socket *)sa != unp.unp_socket) {
		(void) snpf(Namech, Namechl, "unp_socket (%s) mismatch",
		    print_kptr((KA_T)unp.unp_socket, (char *)NULL, 0));
		break;
	    }
	    if (unp.unp_addr) {
		if (kread((KA_T) unp.unp_addr, (char *) &mb, sizeof(mb))) {
		    (void) snpf(Namech, Namechl, "can't read unp_addr at %s",
			print_kptr((KA_T)unp.unp_addr, (char *)NULL, 0));
		    break;
		}
		ua = (struct sockaddr_un *)((char *)&mb
		   +  (mb.m_hdr.mh_data - (caddr_t)unp.unp_addr));
		ua->sun_family = AF_UNIX;
	    }
	    if (!ua) {
		ua = &un;
		(void) zeromem((char *)ua, sizeof(un));
		ua->sun_family = AF_UNSPEC;
	    }
	/*
	 * Print information on Unix socket that has no address bound
	 * to it, although it may be connected to another Unix domain
	 * socket as a pipe.
	 */
	    if (ua->sun_family != AF_UNIX) {
		if (ua->sun_family == AF_UNSPEC) {
		    if (unp.unp_conn) {
			if (kread((KA_T)unp.unp_conn, (char *)&uc, sizeof(uc)))
			    (void) snpf(Namech, Namechl,
				"can't read unp_conn at %s",
				print_kptr((KA_T)unp.unp_conn,(char *)NULL,0));
			else {
			    ka = (KA_T)uc.unp_socket;
			    (void) snpf(Namech, Namechl, "->%s",
				print_kptr((ka & 0xffffffff), (char *)NULL, 0));
			}
		    } else
			(void) snpf(Namech, Namechl, "->(none)");
		} else
		    (void) snpf(Namech, Namechl, "unknown sun_family (%d)",
			ua->sun_family);
		break;
	    }
	    if (ua->sun_path[0]) {
		if (mb.m_len >= sizeof(struct sockaddr_un))
		    mb.m_len = sizeof(struct sockaddr_un) - 1;
		*((char *)ua + mb.m_len) = '\0';
		if (Sfile && is_file_named(ua->sun_path, 0))
		    Lf->sf |= SELNM;
		if (!Namech[0])
		    (void) snpf(Namech, Namechl, "%s", ua->sun_path);
	    } else
		(void) snpf(Namech, Namechl, "no address");
	    break;
	default:
	    printunkaf(fam, 1);
	}
	if (Namech[0])
	    enter_nm(Namech);
}
@


1.18
log
@Revision 4.71
@
text
@d36 1
a36 1
static char *rcsid = "$Id: dsock.c,v 1.17 2002/01/16 15:05:05 abe Exp abe $";
d122 1
d127 2
a128 2
	Lf->lts.qlens = Lf->lts.qlims = Lf->lts.rbszs
		      = Lf->lts.sbszs = (unsigned char)1;
@


1.17
log
@Update ent_inaddr() usage.
@
text
@d36 1
a36 1
static char *rcsid = "$Id: dsock.c,v 1.16 2001/11/01 20:28:18 abe Exp abe $";
d119 15
d222 11
@


1.16
log
@Revision 4.60
@
text
@d36 1
a36 1
static char *rcsid = "$Id: dsock.c,v 1.15 2001/10/17 19:17:13 abe Exp abe $";
a58 1
	int ofam = -1;
a167 1
		ofam = fam;
d202 1
a202 1
		(void) ent_inaddr(la, lp, fa, fp, fam, ofam);
@


1.15
log
@Revision 4.59
@
text
@d36 1
a36 1
static char *rcsid = "$Id: dsock.c,v 1.14 2001/01/02 12:40:20 abe Exp abe $";
d59 1
d169 1
d204 1
a204 1
		(void) ent_inaddr(la, lp, fa, fp, fam);
@


1.14
log
@Revision 4.54
@
text
@d36 1
a36 1
static char *rcsid = "$Id: dsock.c,v 1.13 2000/07/31 18:31:33 abe Exp abe $";
d136 11
a146 2
	    if (Fnet)
		Lf->sf |= SELNET;
@


1.13
log
@Revision 4.51
Convert to snpf().
@
text
@d36 1
a36 1
static char *rcsid = "$Id: dsock.c,v 1.12 1999/11/28 06:39:40 abe Exp abe $";
a159 1
		Lf->type[3] = '4';
a162 1
		Lf->type[3] = '6';
@


1.12
log
@Revision 4.47
@
text
@d36 1
a36 1
static char *rcsid = "$Id: dsock.c,v 1.11 99/04/15 06:47:26 abe Exp Locker: abe $";
d66 1
a66 1
	(void) strcpy(Lf->type, "sock");
d76 2
a77 2
	    (void) sprintf(Namech, "can't read socket struct from %s",
		print_kptr(sa, (char *)NULL));
d87 2
a88 2
	    (void) sprintf(Namech, "can't read protocol switch from %s",
		print_kptr((KA_T)s.so_proto, (char *)NULL));
d94 2
a95 2
	    (void) sprintf(Namech, "can't read domain struct from %s",
		print_kptr((KA_T)p.pr_domain, (char *)NULL));
d130 2
a131 1
	    (void) strcpy(Lf->type, (fam == AF_INET) ? "IPv4" : "IPv6");
d133 1
a133 1
	    (void) strcpy(Lf->type, "inet");
d144 2
a145 2
		(void) sprintf(Namech, "can't read inpcb at %s",
		    print_kptr((KA_T)s.so_pcb, (char *)NULL));
d153 1
a153 1
	    enter_dev_ch(print_kptr((ka & 0xffffffff), (char *)NULL));
d206 1
a206 1
	    (void) strcpy(Lf->type, "rte");
d209 1
a209 1
		enter_dev_ch(print_kptr((ka & 0xffffffff), (char *)NULL));
d211 1
a211 1
		(void) strcpy(Namech, "no protocol control block");
d221 1
a221 1
	    (void) strcpy(Lf->type, "unix");
d225 1
a225 1
	    enter_dev_ch(print_kptr((sa & 0xffffffff), (char *)NULL));
d227 2
a228 2
		(void) sprintf(Namech, "can't read unpcb at %s",
		    print_kptr((KA_T)s.so_pcb, (char *)NULL));
d232 2
a233 2
		(void) sprintf(Namech, "unp_socket (%s) mismatch",
		    print_kptr((KA_T)unp.unp_socket, (char *)NULL));
d238 2
a239 2
		    (void) sprintf(Namech, "can't read unp_addr at %s",
			print_kptr((KA_T)unp.unp_addr, (char *)NULL));
d260 3
a262 2
			    (void) sprintf(Namech, "can't read unp_conn at %s",
				print_kptr((KA_T)unp.unp_conn, (char *)NULL));
d265 2
a266 2
			    (void) sprintf(Namech, "->%s",
				print_kptr((ka & 0xffffffff), (char *)NULL));
d269 1
a269 1
			(void) strcpy(Namech, "->(none)");
d271 1
a271 1
		    (void) sprintf(Namech, "unknown sun_family (%d)",
d282 1
a282 1
		    (void) strcpy(Namech, ua->sun_path);
d284 1
a284 1
		(void) strcpy(Namech, "no address");
@


1.11
log
@Revision 4.43
Document for Tru64.  Adjust Tru64 IPv6 support.
@
text
@d36 1
a36 1
static char *rcsid = "$Id: dsock.c,v 1.10 99/03/29 07:11:57 abe Exp Locker: abe $";
d285 1
a285 1
	    printunkaf(fam);
@


1.10
log
@Revision 4.42
T5.0 updates; use knlist(3); file name reporting improvements.
@
text
@d2 2
a3 1
 * dsock.c - Digital UNIX (DEC OSF/1) socket processing functions for lsof
d36 1
a36 1
static char *rcsid = "$Id: dsock.c,v 1.9 99/01/25 06:58:45 abe Exp Locker: abe $";
a129 1

d155 10
a164 2
	    la = (fam == AF_INET6) ? (unsigned char *)&inp.inp_laddr
	       :  (unsigned char *)&inp.inp_laddr.s6_un.sa6_laddr[3];
d174 1
a174 1
		||  inp.inp_faddr.s6_un.sa6_laddr[3] != INADDR_ANY)
d176 1
a176 1
		    fa = (unsigned char *)&inp.inp_faddr.s6_un.sa6_laddr[3];
d192 1
@


1.9
log
@Revision 4.40
@
text
@d35 1
a35 1
static char *rcsid = "$Id: dsock.c,v 1.8 98/08/03 07:41:04 abe Exp Locker: abe $";
d126 9
a136 1
	    (void) strcpy(Lf->type, "inet");
d153 5
d159 2
d162 17
d183 1
d185 1
a185 1
		(void) ent_inaddr(la, lp, fa, fp, AF_INET);
d270 1
a270 1
		else
@


1.8
log
@Revision 4.36
Change raw socket handling.
@
text
@d35 1
a35 1
static char *rcsid = "$Id: dsock.c,v 1.7 98/05/22 07:11:00 abe Exp Locker: abe $";
d235 1
a235 1
		if (Sfile && is_file_named(ua->sun_path, VSOCK))
@


1.7
log
@Revision 4.33
@
text
@d35 1
a35 1
static char *rcsid = "$Id: dsock.c,v 1.6 98/03/06 08:19:31 abe Exp Locker: abe $";
a58 1
	struct rawcb raw;
a59 1
	struct sockaddr sad;
d84 5
a88 3
	if (s.so_proto == NULL
	||  kread((KA_T) s.so_proto, (char *) &p, sizeof(p))) {
	    enter_nm("no protocol switch");
d91 3
a93 2
	if (kread((KA_T) p.pr_domain, (char *) &d, sizeof(d))) {
	    (void) sprintf(Namech, "can't read domain struct from %#x",
d133 5
a137 2
	    if (!s.so_pcb) {
		enter_nm("no protocol control block");
d140 10
a149 58
	    if (s.so_type == SOCK_RAW) {

	    /*
	     * Print raw socket information.
	     */
		if (kread((KA_T) s.so_pcb, (char *)&raw, sizeof(raw))) {
		    (void) sprintf(Namech, "can't read rawcb at %s",
			print_kptr((KA_T)s.so_pcb, (char *)NULL));
		    enter_nm(Namech);
		    return;
		}
		ka = (KA_T)s.so_pcb;
		enter_dev_ch(print_kptr((ka & 0xffffffff), (char *)NULL));
		if (raw.rcb_laddr
		&& !kread((KA_T)raw.rcb_laddr, (char *)&sad, sizeof(sad))) {
		    if (sad.sa_family == AF_INET)
			la = (unsigned char *)&sad.sa_data[2];
		    else if (sad.sa_family)
			printrawaddr(&sad);
		}
		if (raw.rcb_faddr
		&& !kread((KA_T)raw.rcb_faddr, (char *)&sad, sizeof(sad))) {
		    if (sad.sa_family == AF_INET)
			fa = (unsigned char *)&sad.sa_data[2];
		    else if (sad.sa_family) {
			(void) strcat(endnm(), "->");
			printrawaddr(&sad);
		    }
		}
		if (fa || la)
		    (void) ent_inaddr(la, -1, fa, -1, AF_INET);
	    } else {

	    /*
	     * Print Internet socket information.
	     */
		if (kread((KA_T) s.so_pcb, (char *) &inp, sizeof(inp))
		||  (struct socket *)sa != inp.inp_socket) {
		    (void) sprintf(Namech, "can't read inpcb at %s",
			print_kptr((KA_T)s.so_pcb, (char *)NULL));
		    enter_nm(Namech);
		    return;
		}
		ka = (KA_T)(inp.inp_ppcb ? inp.inp_ppcb : s.so_pcb);
		enter_dev_ch(print_kptr((ka & 0xffffffff), (char *)NULL));
		la = (unsigned char *)&inp.inp_laddr;
		lp = (int)ntohs(inp.inp_lport);
		if (inp.inp_faddr.s_addr != INADDR_ANY || inp.inp_fport != 0) {
		    fa = (unsigned char *)&inp.inp_faddr;
		    fp = (int)ntohs(inp.inp_fport);
		}
		if (fa || la)
		    (void) ent_inaddr(la, lp, fa, fp, AF_INET);
		if (p.pr_protocol == IPPROTO_TCP && inp.inp_ppcb
		&&  !kread((KA_T)inp.inp_ppcb, (char *)&t, sizeof(t))) {
		    Lf->lts.type = 0;
		    Lf->lts.state.i = (int)t.t_state;
		}
d151 7
d160 13
d197 1
a197 1
			break;
d199 2
a200 2
		ua = (struct sockaddr_un *)((char *) &mb
		   +  (mb.m_hdr.mh_data - (caddr_t) unp.unp_addr));
d203 1
a203 1
	    if (ua == NULL) {
d217 1
a217 1
			    (void)sprintf(Namech, "can't read unp_conn at %#x",
@


1.6
log
@Revision 4.27
@
text
@d35 1
a35 1
static char *rcsid = "$Id: dsock.c,v 1.5 97/10/23 12:19:25 abe Exp Locker: abe $";
d51 1
a51 1
	struct in_addr *fa = (struct in_addr *)NULL;
d56 1
a56 1
	struct in_addr *la = (struct in_addr *)NULL;
d152 1
a152 1
			la = (struct in_addr *)&sad.sa_data[2];
d159 1
a159 1
			fa = (struct in_addr *)&sad.sa_data[2];
d166 1
a166 1
		    (void) ent_inaddr(la, -1, fa, -1);
d181 1
a181 1
		la = &inp.inp_laddr;
d184 1
a184 1
		    fa = &inp.inp_faddr;
d188 1
a188 1
		    (void) ent_inaddr(la, lp, fa, fp);
@


1.5
log
@Revision 4.18
@
text
@d35 1
a35 1
static char *rcsid = "$Id: dsock.c,v 1.4 97/09/23 09:47:32 abe Exp Locker: abe $";
d48 1
a48 1
	caddr_t sa;			/* socket address in kernel */
a50 1
	char dev_ch[32];
d55 1
d67 1
a67 1
        (void) strcpy(Lf->type, "sock");
d72 3
a74 3
	if (sa == NULL) {
		enter_nm("no socket address");
		return;
d76 5
a80 8
        if (kread((KA_T) sa, (char *) &s, sizeof(s))) {
                (void) sprintf(Namech, "can't read socket struct from %#x", sa);
                enter_nm(Namech);
                return;
        }
	if ( ! s.so_type) {
                enter_nm("no socket type");
                return;
d82 5
a86 1
        if (s.so_proto == NULL
d88 9
a96 9
                enter_nm("no protocol switch");
                return;
        }
        if (kread((KA_T) p.pr_domain, (char *) &d, sizeof(d))) {
                (void) sprintf(Namech, "can't read domain struct from %#x",
                        p.pr_domain);
                enter_nm(Namech);
                return;
        }
d101 7
a107 7
		if (Lf->access == 'r')
			Lf->sz = (SZOFFTYPE)s.so_rcv.sb_cc;
		else if (Lf->access == 'w')
			Lf->sz = (SZOFFTYPE)s.so_snd.sb_cc;
		else
			Lf->sz = (SZOFFTYPE)(s.so_rcv.sb_cc + s.so_snd.sb_cc);
		Lf->sz_def = 1;
d109 1
a109 1
		Lf->off_def = 1;
d125 4
a128 4
		if (Fnet)
			Lf->sf |= SELNET;
		(void) strcpy(Lf->type, "inet");
		printiproto(p.pr_protocol);
d132 14
a145 3
		if (s.so_pcb == NULL) {
			enter_nm("no protocol control block");
			return;
d147 16
a162 10
		if (s.so_type == SOCK_RAW) {

		/*
		 * Print raw socket information.
		 */
		    if (kread((KA_T) s.so_pcb, (char *)&raw, sizeof(raw))) {
			(void) sprintf(Namech, "can't read rawcb at %#x",
				s.so_pcb);
			enter_nm(Namech);
			return;
d164 4
a167 21
		    (void) sprintf(dev_ch, "0x%08x", s.so_pcb);
		    enter_dev_ch(dev_ch);
		    if (raw.rcb_laddr
		    && !kread((KA_T)raw.rcb_laddr, (char *)&sad, sizeof(sad))) {
			if (sad.sa_family == AF_INET)
			    la = (struct in_addr *)&sad.sa_data[2];
			else if (sad.sa_family)
			    printrawaddr(&sad);
		    }
		    if (raw.rcb_faddr
		    && !kread((KA_T)raw.rcb_faddr, (char *)&sad, sizeof(sad))) {
			if (sad.sa_family == AF_INET)
			    fa = (struct in_addr *)&sad.sa_data[2];
			else if (sad.sa_family) {
			    (void) strcat(endnm(), "->");
			    printrawaddr(&sad);
			}
		    }
		    if (fa || la)
			(void) ent_inaddr(la, -1, fa, -1);
		} else {
d169 9
a177 27
		/*
		 * Print Internet socket information.
		 */
		    if (kread((KA_T) s.so_pcb, (char *) &inp, sizeof(inp))
		    ||  (struct socket *)sa != inp.inp_socket) {
			(void) sprintf(Namech, "can't read inpcb at %#x",
			    s.so_pcb);
			enter_nm(Namech);
			return;
		    }
		    (void) sprintf(dev_ch, "0x%08x",
			(inp.inp_ppcb == NULL) ? s.so_pcb : inp.inp_ppcb);
		    enter_dev_ch(dev_ch);
		    la = &inp.inp_laddr;
		    lp = (int)ntohs(inp.inp_lport);
		    if (inp.inp_faddr.s_addr != INADDR_ANY || inp.inp_fport
		    != 0) {
			fa = &inp.inp_faddr;
			fp = (int)ntohs(inp.inp_fport);
		    }
		    if (fa || la)
			(void) ent_inaddr(la, lp, fa, fp);
		    if (p.pr_protocol == IPPROTO_TCP && inp.inp_ppcb
		    &&  kread((KA_T)inp.inp_ppcb, (char *)&t, sizeof(t)) == 0) {
			Lf->lts.type = 0;
			Lf->lts.state.i = (int)t.t_state;
		    }
d179 17
a195 1
		break;
d200 3
a202 3
		if (Funix)
			Lf->sf |= SELUNX;
		(void) strcpy(Lf->type, "unix");
d206 15
a220 5
		(void) sprintf(dev_ch, "0x%08x", sa);
		enter_dev_ch(dev_ch);
		if (kread((KA_T) s.so_pcb, (char *) &unp, sizeof(unp))) {
			(void) sprintf(Namech, "can't read unpcb at %#x",
				s.so_pcb);
d223 9
a231 21
		if ((struct socket *)sa != unp.unp_socket) {
			(void) sprintf(Namech, "unp_socket (%#x) mismatch",
				unp.unp_socket);
			break;
		}
		if (unp.unp_addr) {
		    if (kread((KA_T) unp.unp_addr, (char *) &mb, sizeof(mb))) {
			(void) sprintf(Namech,
				"can't read unp_addr at %#x",
				unp.unp_addr);
			break;
		    }
		    ua = (struct sockaddr_un *) ((char *) &mb +
			 (mb.m_hdr.mh_data - (caddr_t) unp.unp_addr));
		    ua->sun_family = AF_UNIX;
		}
		if (ua == NULL) {
			ua = &un;
			(void) zeromem((char *)ua, sizeof(un));
			ua->sun_family = AF_UNSPEC;
		}
d237 13
a249 28
		if (ua->sun_family != AF_UNIX) {
			if (ua->sun_family == AF_UNSPEC) {
				if (unp.unp_conn) {
					if (kread((KA_T) unp.unp_conn,
						(char *) &uc, sizeof(uc))) {
					    (void) sprintf(Namech,
						"can't read unp_conn at %#x",
						unp.unp_conn);
					} else {
					    (void) sprintf(Namech,
						"->0x%08x", uc.unp_socket);
					}
				} else
					(void) strcpy(Namech, "->(none)");
			} else
				(void) sprintf(Namech,
					"unknown sun_family (%d)",
					ua->sun_family);
			break;
		}
		if (ua->sun_path[0]) {
			if (mb.m_len >= sizeof(struct sockaddr_un))
				mb.m_len = sizeof(struct sockaddr_un) - 1;
			*((char *)ua + mb.m_len) = '\0';
			if (Sfile && is_file_named(ua->sun_path, VSOCK))
				Lf->sf |= SELNM;
			else
				(void) strcpy(Namech, ua->sun_path);
d251 2
a252 1
			(void) strcpy(Namech, "no address");
d254 12
d267 1
a267 1
		printunkaf(fam);
d270 1
a270 1
		enter_nm(Namech);
@


1.4
log
@Revision 4.16
Expanded TCPTPI info support
@
text
@d35 1
a35 1
static char *rcsid = "$Id: dsock.c,v 1.3 97/08/15 08:18:36 abe Exp Locker: abe $";
d101 1
a101 1
			Lf->sz = (unsigned long)s.so_rcv.sb_cc;
d103 1
a103 1
			Lf->sz = (unsigned long)s.so_snd.sb_cc;
d105 1
a105 1
			Lf->sz = (unsigned long)s.so_rcv.sb_cc + s.so_snd.sb_cc;
@


1.3
log
@Revision 4.15
@
text
@d35 1
a35 1
static char *rcsid = "$Id: dsock.c,v 1.2 97/07/02 11:21:11 abe Exp Locker: abe $";
a38 1
#define	TCPSTATES		/* activate tcpstates[] */
a42 25
 * print_tcptpistate() - print TCP/TPI state
 */

void
print_tcptpistate(nl)
	int nl;				/* 1 == '\n' required */
{
	int s;

	if (Lf->lts.type == 0) {
	    if ((s = Lf->lts.state.i) < 0 || s >= TCP_NSTATES) {
		(void) printf("%sUNKNOWN TCP STATE: %d%s%s",
		    Ffield ? "" : "(", s, Ffield ? "" : ")", nl ? "\n" : "");
		return;
	    }
	    (void) printf("%s%s%s%s", Ffield ? "" : "(", tcpstates[s],
		Ffield ? "" : ")", nl ? "\n" : "");
	    return;
	}
	if (nl)
	    putchar('\n');
}


/*
d97 1
a97 1
 * Set size, based on access type.
d109 7
@


1.2
log
@Revision 4.13
Change from DEC OSF/1 to Digital UNIX.
@
text
@d35 1
a35 1
static char *rcsid = "$Id: dsock.c,v 1.1 97/02/24 07:39:41 abe Exp Locker: abe $";
d39 1
d44 25
d88 1
d209 5
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * dsock.c - DEC OSF/1 socket processing functions for lsof
d35 1
a35 1
static char *rcsid = "$Id: dsock.c,v 1.15 96/12/28 11:31:41 abe Exp $";
@
