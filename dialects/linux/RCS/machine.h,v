head	1.37;
access;
symbols;
locks; strict;
comment	@ * @;


1.37
date	2014.10.13.22.25.58;	author abe;	state Exp;
branches;
next	1.36;

1.36
date	2012.04.10.16.39.50;	author abe;	state Exp;
branches;
next	1.35;

1.35
date	2011.09.07.19.07.45;	author abe;	state Exp;
branches;
next	1.34;

1.34
date	2010.07.29.16.02.50;	author abe;	state Exp;
branches;
next	1.33;

1.33
date	2008.10.21.16.17.21;	author abe;	state Exp;
branches;
next	1.32;

1.32
date	2008.05.09.12.53.49;	author abe;	state Exp;
branches;
next	1.31;

1.31
date	2008.04.15.13.32.26;	author abe;	state Exp;
branches;
next	1.30;

1.30
date	2007.04.24.16.20.53;	author abe;	state Exp;
branches;
next	1.29;

1.29
date	2006.03.27.22.57.11;	author abe;	state Exp;
branches;
next	1.28;

1.28
date	2005.08.29.10.22.41;	author abe;	state Exp;
branches;
next	1.27;

1.27
date	2005.08.08.19.52.33;	author abe;	state Exp;
branches;
next	1.26;

1.26
date	2005.05.11.12.53.27;	author abe;	state Exp;
branches;
next	1.25;

1.25
date	2004.10.17.21.55.08;	author abe;	state Exp;
branches;
next	1.24;

1.24
date	2004.07.06.19.19.44;	author abe;	state Exp;
branches;
next	1.23;

1.23
date	2004.03.10.23.51.11;	author abe;	state Exp;
branches;
next	1.22;

1.22
date	2003.10.07.14.27.47;	author abe;	state Exp;
branches;
next	1.21;

1.21
date	2002.12.03.18.23.08;	author abe;	state Exp;
branches;
next	1.20;

1.20
date	2002.02.26.15.20.15;	author abe;	state Exp;
branches;
next	1.19;

1.19
date	2001.06.06.12.36.18;	author abe;	state Exp;
branches;
next	1.18;

1.18
date	2001.02.13.13.56.19;	author abe;	state Exp;
branches;
next	1.17;

1.17
date	2000.12.05.20.27.09;	author abe;	state Exp;
branches;
next	1.16;

1.16
date	2000.12.05.20.22.14;	author abe;	state Exp;
branches;
next	1.15;

1.15
date	2000.11.03.18.04.38;	author abe;	state Exp;
branches;
next	1.14;

1.14
date	2000.08.01.15.40.35;	author abe;	state Exp;
branches;
next	1.13;

1.13
date	2000.03.16.15.56.17;	author abe;	state Exp;
branches;
next	1.12;

1.12
date	99.07.08.14.50.35;	author abe;	state Exp;
branches;
next	1.11;

1.11
date	99.01.25.07.07.14;	author abe;	state Exp;
branches;
next	1.10;

1.10
date	98.12.28.19.34.10;	author abe;	state Exp;
branches;
next	1.9;

1.9
date	98.12.28.09.40.39;	author abe;	state Exp;
branches;
next	1.8;

1.8
date	98.06.29.15.38.15;	author abe;	state Exp;
branches;
next	1.7;

1.7
date	98.06.25.07.19.36;	author abe;	state Exp;
branches;
next	1.6;

1.6
date	98.03.18.15.27.44;	author abe;	state Exp;
branches;
next	1.5;

1.5
date	98.02.16.19.51.18;	author abe;	state Exp;
branches;
next	1.4;

1.4
date	98.02.13.12.50.19;	author abe;	state Exp;
branches;
next	1.3;

1.3
date	98.01.28.06.59.38;	author abe;	state Exp;
branches;
next	1.2;

1.2
date	98.01.26.15.30.19;	author abe;	state Exp;
branches;
next	1.1;

1.1
date	97.12.30.08.15.43;	author abe;	state Exp;
branches;
next	;


desc
@/proc-based Linux lsof dialect sources
@


1.37
log
@Revision 4.88
@
text
@/*
 * machine.h - Linux definitions for /proc-based lsof
 */


/*
 * Copyright 1997 Purdue Research Foundation, West Lafayette, Indiana
 * 47907.  All rights reserved.
 *
 * Written by Victor A. Abell
 *
 * This software is not subject to any license of the American Telephone
 * and Telegraph Company or the Regents of the University of California.
 *
 * Permission is granted to anyone to use this software for any purpose on
 * any computer system, and to alter it and redistribute it freely, subject
 * to the following restrictions:
 *
 * 1. Neither the authors nor Purdue University are responsible for any
 *    consequences of the use of this software.
 *
 * 2. The origin of this software must not be misrepresented, either by
 *    explicit claim or by omission.  Credit to the authors and Purdue
 *    University must appear in documentation and sources.
 *
 * 3. Altered versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 *
 * 4. This notice may not be removed or altered.
 */


/*
 * $Id: machine.h,v 1.36 2012/04/10 16:39:50 abe Exp abe $
 */


#if	!defined(LSOF_MACHINE_H)
#define	LSOF_MACHINE_H	1


#include <sys/types.h>
#include <sys/param.h>


/*
 * CAN_USE_CLNT_CREATE is defined for those dialects where RPC clnt_create()
 * can be used to obtain a CLIENT handle in lieu of clnttcp_create().
 */

#define	CAN_USE_CLNT_CREATE	1


/*
 * DEVDEV_PATH defines the path to the directory that contains device
 * nodes.
 */

#define	DEVDEV_PATH	"/dev"


/*
 * GET_MAX_FD is defined for those dialects that provide a function other than
 * getdtablesize() to obtain the maximum file descriptor number plus one.
 */

/* #define	GET_MAX_FD	?	*/


/*
 * HASAOPT is defined for those dialects that have AFS support; it specifies
 * that the default path to an alternate AFS kernel name list file may be
 * supplied with the -A <path> option.
 */

/* #define	HASAOPT		1 */


/*
 * HASBLKDEV is defined for those dialects that want block device information
 * recorded in BDevtp[].
 */

/* #define	HASBLKDEV	1 */


/*
 * HASDCACHE is defined for those dialects that support a device cache
 * file.
 *
 * CAUTION!!!  Do not enable HASDCACHE for /proc-based Linux lsof.  The source
 *	       code cannot support it.
 *
 * The presence of NEVER_HASDCACHE in this comment prevents the Customize
 * script from offering to change HASDCACHE.
 *
 *
 * HASENVDC defined the name of an environment variable that contains the
 * device cache file path.  The HASENVDC environment variable is ignored when
 * the lsof process is setuid(root) or its real UID is 0.
 *
 * HASPERSDC defines the format for the last component of a personal device
 * cache file path.  The first will be the home directory of the real UID that
 * executes lsof.
 *
 * HASPERSDCPATH defines the environment variable whose value is the middle
 * component of the personal device cache file path.  The middle component
 * follows the home directory and precedes the results of applying HASPERSDC.
 * The HASPERSDCPATH environment variable is ignored when the lsof process is
 * setuid(root) or its real UID is 0.
 *
 * HASSYSDC defines a public device cache file path.  When it's defined, it's
 * used as the path from which to read the device cache.
 *
 * Consult the 00DCACHE and 00FAQ files of the lsof distribution for more
 * information on device cache file path construction.
 *
 * CAUTION!!!  Do not enable HASDCACHE for /proc-based Linux lsof.  The source
 *	       code cannot support it.
 */

/* #define	HASDCACHE	1  !!!DON'T ENABLE!!! -- see above comment */
/* #define	HASENVDC	"LSOFDEVCACHE" */
/* #define	HASPERSDC	"%h/%p.lsof_%L" */
/* #define	HASPERSDCPATH	"LSOFPERSDCPATH" */
/* #define	HASSYSDC	"/your/choice/of/path" */


/*
 * HASCDRNODE is defined for those dialects that have CD-ROM nodes.
 */

/* #define	HASCDRNODE	1 */


/*
 * HASFIFONODE is defined for those dialects that have FIFO nodes.
 */

/* #define	HASFIFONODE	1 */


/*
 * HASEOPT is defined for dialects that support the -e option
 */

#define	HASEOPT	1


/*
 * HASFSINO is defined for those dialects that have the file system
 * inode element, fs_ino, in the lfile structure definition in lsof.h.
 */

/* #define	HASFSINO	1 */


/*
 * HASFSTRUCT is defined if the dialect has a file structure.
 *
 * FSV_DEFAULT defines the default set of file structure values to list.
 * It defaults to zero (0), but may be made up of a combination of the
 * FSV_* symbols from lsof.h.
 *
 *   HASNOFSADDR  -- has no file structure address
 *   HASNOFSFLAGS -- has no file structure flags
 *   HASNOFSCOUNT -- has no file structure count
 *   HASNOFSNADDR -- has no file structure node address
 */

#define	HASFSTRUCT	1
/* #define	FSV_DEFAULT	FSV_? | FSV_? | FSV_? */
#define	HASNOFSADDR	1	/* has no file structure address */
/* #define	HASNOFSFLAGS	1	has no file structure flags */
#define	HASNOFSCOUNT	1	/* has no file structure count */
#define	HASNOFSNADDR	1	/* has no file structure node address */


/*
 * HASGNODE is defined for those dialects that have gnodes.
 */

/* #define	HASGNODE	1 */


/*
 * HASHSNODE is defined for those dialects that have High Sierra nodes.
 */

/* #define	HASHSNODE	1 */


/*
 * HASINODE is defined for those dialects that have inodes and wish to
 * use readinode() from node.c.
 */

/* #define	HASINODE	1 */


/*
 * HASINTSIGNAL is defined for those dialects whose signal function returns
 * an int.
 */

/* #define	HASINTSIGNAL	1 */


/*
 * HASKERNIDCK is defined for those dialects that support the comparison of
 * the build to running kernel identity.
 */

/* #define	HASKERNIDCK	1	*/


/*
 * HASKOPT is defined for those dialects that support the -k option of
 * reading the kernel's name list from an optional file.
 */

/* #define	HASKOPT	1 */


/*
 * HASLFILEADD is defined for those dialects that need additional elements
 * in struct lfile.  The HASLFILEADD definition is a macro that defines
 * them.  If any of the additional elements need to be preset in the
 * alloc_lfile() function of proc.c, the SETLFILEADD macro may be defined
 * to do that.
 *
 * If any additional elements need to be cleared in alloc_lfile() or in the
 * free_proc() function of proc.c, the CLRLFILEADD macro may be defined to
 * do that.  Note that CLRLFILEADD takes one argument, the pointer to the
 * lfile struct.  The CLRLFILEADD macro is expected to expand to statements
 * that are complete -- i.e., have terminating semi-colons -- so the macro is
 * called without a terminating semicolon by proc.c.
 *
 * The HASXOPT definition may be used to select the conditions under which
 * private lfile elements are used.
 */

/* #define HASLFILEADD int ... */
/* #define CLRLFILEADD(lf)	(lf)->... = (type)NULL;	*/
/* #define SETLFILEADD Lf->... */


/*
 * HASLWP is defined for dialects that have LWP support inside processes.
 */

#define	HASLWP	1


/*
 * HASMNTSTAT indicates the dialect supports the mount stat(2) result option
 * in its l_vfs and mounts structures.
 */

/* #define	HASMNTSTAT	1	*/


/*
 * HASMNTSUP is defined for those dialects that support the mount supplement
 * option.
 */

#define	HASMNTSUP	1


/*
 * HASMOPT is defined for those dialects that support the reading of
 * kernel memory from an alternate file.
 */

/* #define	HASMOPT	1 */


/*
 * HASNCACHE is defined for those dialects that have a kernel name cache
 * that lsof can search.  A value of 1 directs printname() to prefix the
 * cache value with the file system directory name; 2, avoid the prefix.
 *
 * NCACHELDPFX is a set of C commands to execute before calling ncache_load().
 *
 * NCACHELDSFX is a set of C commands to execute after calling ncache_load().
 */

/* #define	HASNCACHE	1 */
/* #define	NCACHELDPFX	??? */
/* #define	NCACHELDSFX	??? */


/*
 * HASNLIST is defined for those dialects that use nlist() to acccess
 * kernel symbols.
 */

/* #define	HASNLIST	1 */


/*
 * HASPIPEFN is defined for those dialects that have a special function to
 * process DTYPE_PIPE file structure entries.  Its value is the name of the
 * function.
 *
 * NOTE: don't forget to define a prototype for this function in dproto.h.
 */

/* #define	HASPIPEFN	process_pipe? */


/*
 * HASPIPENODE is defined for those dialects that have pipe nodes.
 */

/* #define	HASPIPENODE	1 */


/*
 * HASEPTOPTS is defined for dialects that support the +|-E options.
 */

#define		HASEPTOPTS	1


/*
 * HASPMAPENABLED is defined when the reporting of portmapper registration
 * info is enabled by default.
 */

/* #define	HASPMAPENABLED	1 */


/*
 * HASPPID is defined for those dialects that support identification of
 * the parent process IDentifier (PPID) of a process.
 */

#define	HASPPID		1


/*
 * HASPRINTDEV, HASPRINTINO, HASPRINTNM, HASPRINTOFF, and HASPRINTSZ
 * define private dialect-specific functions for printing DEVice numbers,
 * INOde numbers, NaMes, file OFFsets, and file SiZes.  The functions are
 * called from print_file().
 */

/* #define	HASPRINTDEV	print_dev?	*/
/* #define	HASPRINTINO	print_ino?	*/
/* #define	HASPRINTNM	print_nm?	*/
/* #define	HASPRINTOFF	print_off?	*/
/* #define	HASPRINTSZ	print_sz?	*/


/*
 * HASPRIVFILETYPE and PRIVFILETYPE are defined for dialects that have a
 * file structure type that isn't defined by a DTYPE_* symbol.  They are
 * used in lib/prfp.c to select the type's processing.
 *
 * PRIVFILETYPE is the definition of the f_type value in the file struct.
 *
 * HASPRIVFILETYPE is the name of the processing function.
 */

/* #define	HASPRIVFILETYPE	process_shmf?	*/
/* #define	PRIVFILETYPE	??	*/


/*
 * HASPRIVNMCACHE is defined for dialects that have a private method for
 * printing cached NAME column values for some files.  HASPRIVNAMECACHE
 * is defined to be the name of the function.
 *
 * The function takes one argument, a struct lfile pointer to the file, and
 * returns non-zero if it prints a name to stdout.
 */

/* #define	HASPRIVNMCACHE	<function name>	*/


/*
 * HASPRIVPRIPP is defined for dialects that have a private function for
 * printing IP protocol names.  When HASPRIVPRIPP isn't defined, the
 * IP protocol name printing function defaults to printiprto().
 */

/* #define	HASPRIVPRIPP	1	*/


/*
 * HASPROCFS is defined for those dialects that have a proc file system --
 * usually /proc and usually in SYSV4 derivatives.
 *
 * HASFSTYPE is defined as 1 for those systems that have a file system type
 * string, st_fstype, in the stat() buffer; 2, for those systems that have a
 * file system type integer in the stat() buffer, named MOUNTS_STAT_FSTYPE;
 * 0, for systems whose stat(2) structure has no file system type member.  The
 * additional symbols MOUNTS_FSTYPE, RMNT_FSTYPE, and RMNT_STAT_FSTYPE may be
 * defined in dlsof.h to direct how the readmnt() function in lib/rmnt.c
 * preserves these stat(2) and getmntent(3) buffer values in the local mounts
 * structure.
 *
 * The defined value is the string that names the file system type.
 *
 * The HASPROCFS definition usually must be accompanied by the HASFSTYPE
 * definition and the providing of an fstype element in the local mounts
 * structure (defined in dlsof.h).
 *
 * The HASPROCFS definition may be accompanied by the HASPINODEN definition.
 * HASPINODEN specifies that searching for files in HASPROCFS is to be done
 * by inode number.
 */

/* #define	HASPROCFS	"proc?" */
/* #define	HASFSTYPE	1 */
/* #define	HASPINODEN	1 */


/*
 * HASRNODE is defined for those dialects that have rnodes.
 */

/* #define	HASRNODE	1 */


/*
 * Define HASSECURITY to restrict the listing of all open files to the
 * root user.  When HASSECURITY is defined, the non-root user may list
 * only files whose processes have the same user ID as the real user ID
 * (the one that its user logged on with) of the lsof process.
 */

/* #define	HASSECURITY	1 */


/*
 * If HASSECURITY is defined, define HASNOSOCKSECURITY to allow users
 * restricted by HASSECURITY to list any open socket files, provide their
 * listing is selected by the "-i" option.
 */

/* #define	HASNOSOCKSECURITY	1	*/


/*
 * HASSETLOCALE is defined for those dialects that have <locale.h> and
 * setlocale().
 *
 * If the dialect also has wide character support for language locales,
 * HASWIDECHAR activates lsof's wide character support and WIDECHARINCL
 * defines the header file (if any) that must be #include'd to use the
 * mblen() and mbtowc() functions.
 */

#define	HASSETLOCALE	1
#define	HASWIDECHAR	1
#define	WIDECHARINCL	<wctype.h>


/*
 * HASSNODE is defined for those dialects that have snodes.
 */

/* #define	HASSNODE	1 */


/*
 * HASSOOPT, HASSOSTATE and HASTCPOPT define the availability of information
 * on socket options (SO_* symbols), socket states (SS_* symbols) and TCP
 * options.
 */

/* #define	HASSOOPT	1	has socket option information */
/* #define	HASSOSTATE	1	has socket state information */
/* #define	HASTCPOPT	1	has TCP options or flags */


/*
 * Define HASSPECDEVD to be the name of a function that handles the results
 * of a successful stat(2) of a file name argument.
 *
 * For example, HASSPECDEVD() for Darwin makes sure that st_dev is set to
 * what stat("/dev") returns -- i.e., what's in DevDev.
 *
 * The function takes two arguments:
 *
 *	1: pointer to the full path name of file
 *	2: pointer to the stat(2) result
 *
 * The function returns void.
 */

/* #define	HASSPECDEVD	process_dev_stat */


/*
 * HASSTREAMS is defined for those dialects that support streams.
 */

/* #define	HASSTREAMS	1 */


/*
 * HASTASKS is defined for those dialects that have task reporting support.
 */

#define	HASTASKS	1


/*
 * HASTCPTPIQ is defined for dialects where it is possible to report the
 * TCP/TPI Recv-Q and Send-Q values produced by netstat.
 */

#define	HASTCPTPIQ	1


/*
 * HASTCPTPIW is defined for dialects where it is possible to report the
 * TCP/TPI send and receive window sizes produced by netstat.
 */

/* #define	HASTCPTPIW	1 */


/*
 * HASTCPUDPSTATE is defined for dialects that have TCP and UDP state
 * support -- i.e., for the "-stcp|udp:state" option and its associated
 * speed improvements.
 */

#define	HASTCPUDPSTATE	1


/*
 * HASTMPNODE is defined for those dialects that have tmpnodes.
 */

/* #define	HASTMPNODE	1 */


/*
 * HASVNODE is defined for those dialects that use the Sun virtual file system
 * node, the vnode.  BSD derivatives usually do; System V derivatives prior to
 * R4 usually don't.
 * doesn't.
 */

/* #define	HASVNODE	1 */


/*
 * HASXOPT is defined for those dialects that have an X option.  It
 * defines the text for the usage display.  HASXOPT_VALUE defines the
 * option's default binary value -- 0 or 1.
 */

#define	HASXOPT		"skip TCP&UDP* files"
#define	HASXOPT_VALUE	0


/*
 * INODETYPE and INODEPSPEC define the internal node number type and its
 * printf specification modifier.  These need not be defined and lsof.h
 * can be allowed to define defaults.
 *
 * These are defined here, because they must be used in dlsof.h.
 */

#define	INODETYPE	unsigned long long
					/* inode number internal storage type */
#define	INODEPSPEC	"ll"	 	/* INODETYPE printf specification
					 * modifier */


/*
 * UID_ARG defines the size of a User ID number when it is passed
 * as a function argument.
 */

#define	UID_ARG	u_int


/*
 * Each USE_LIB_<function_name> is defined for dialects that use the
 * <function_name> in the lsof library.
 *
 * Note: other definitions and operations may be required to condition the
 * library function source code.  They may be found in the dialect dlsof.h
 * header files.
 */

/* #define	USE_LIB_CKKV			1	   ckkv.c */
/* #define	USE_LIB_COMPLETEVFS		1	   cvfs.c */
/* #define	USE_LIB_FIND_CH_INO		1	   fino.c */
/* #define	USE_LIB_IS_FILE_NAMED		1	   isfn.c */
/* #define	USE_LIB_LKUPDEV			1	   lkud.c */
/* #define	USE_LIB_PRINTDEVNAME		1	   pdvn.c */
/* #define	USE_LIB_PROCESS_FILE		1	   prfp.c */
/* #define	USE_LIB_PRINT_TCPTPI		1	   ptti.c */
/* #define	USE_LIB_READDEV			1	   rdev.c */
/* #define	USE_LIB_READMNT			1	   rmnt.c */
/* #define	USE_LIB_REGEX			1	   regex.c */
/* #define	USE_LIB_RNAM			1	   rnam.c */
/* #define	USE_LIB_RNCH			1	   rnch.c */
/* #define	USE_LIB_RNMH			1	   rnmh.c */
/* #define	USE_LIB_SNPF			1	   snpf.c */
#define	snpf	snprintf	   /* use the system's snprintf() */


/*
 * WARNDEVACCESS is defined for those dialects that should issue a warning
 * when lsof can't access /dev (or /device) or one of its sub-directories.
 * The warning can be inhibited by the lsof caller with the -w option.
 *
 * CAUTION!!!  Don't enable the WARNDEVACCESS definiton for /proc-based Linux
 *	       lsof; it doesn't process /dev at all.
 *
 * The presence of NEVER_WARNDEVACCESS in this comment prevents the Customize
 * script from offering to change WARNDEVACCESS.
 */

/* #define	WARNDEVACCESS	1  DON'T ENABLE!!! -- see above comment */


/*
 * WARNINGSTATE is defined for those dialects that want to suppress all lsof
 * warning messages.
 */

/* #define	WARNINGSTATE	1	warnings are enabled by default */


/*
 * WILLDROPGID is defined for those dialects whose lsof executable runs
 * setgid(not_real_GID) and whose setgid power can be relinquished after
 * the dialect's initialize() function has been executed.
 */

/* #define	WILLDROPGID	1 */


/*
 * zeromem is a macro that uses bzero or memset.
 */

#define	zeromem(a, l)	bzero(a, l)

#endif	/* !defined(LSOF_MACHINE_H) */
@


1.36
log
@Revision 4.86
@
text
@d34 1
a34 1
 * $Id: machine.h,v 1.35 2011/09/07 19:07:45 abe Exp abe $
d320 7
@


1.35
log
@Revision 4.58: +|-e aoption addition
@
text
@d34 1
a34 1
 * $Id: machine.h,v 1.34 2010/07/29 16:02:50 abe Exp abe $
d591 1
a591 1
#define	USE_LIB_IS_FILE_NAMED			1	/* isfn.c */
@


1.34
log
@Revision 4.84
@
text
@d34 1
a34 1
 * $Id: machine.h,v 1.33 2008/10/21 16:17:21 abe Exp abe $
d143 7
@


1.33
log
@Revision 4.81
@
text
@d34 1
a34 1
 * $Id: machine.h,v 1.32 2008/05/09 12:53:49 abe Exp abe $
d491 7
@


1.32
log
@Revision 4.80
@
text
@d34 1
a34 1
 * $Id: machine.h,v 1.31 2008/04/15 13:32:26 abe Exp abe $
d507 9
@


1.31
log
@Revision 4.79
@
text
@d34 1
a34 1
 * $Id: machine.h,v 1.30 2007/04/24 16:20:53 abe Exp abe $
d530 1
a530 1
#define	HASXOPT		"skip TCP&UDP files"
@


1.30
log
@Revision 4.78
@
text
@d34 1
a34 1
 * $Id: machine.h,v 1.29 2006/03/27 22:57:11 abe Exp abe $
d164 1
a164 1
/* #define	HASFSTRUCT	1 */
d166 1
a166 1
/* #define	HASNOFSADDR	1	has no file structure address */
d168 2
a169 2
/* #define	HASNOFSCOUNT	1	has no file structure count */
/* #define	HASNOFSNADDR	1	has no file structure node address */
@


1.29
log
@Revision 4.77
@
text
@d34 1
a34 1
 * $Id: machine.h,v 1.28 2005/08/29 10:22:41 abe Exp abe $
d241 7
@


1.28
log
@Revision 4.76
@
text
@d34 1
a34 1
 * $Id: machine.h,v 1.27 2005/08/08 19:52:33 abe Exp abe $
d157 5
d166 4
@


1.27
log
@Revision 4.76
@
text
@d34 1
a34 1
 * $Id: machine.h,v 1.26 2005/05/11 12:53:27 abe Exp abe $
d233 8
d429 1
a429 1
/* #define	WIDECHARINCL	<wchar.h>	*/
@


1.26
log
@Revision 4.75
@
text
@d34 1
a34 1
 * $Id: machine.h,v 1.25 2004/10/17 21:55:08 abe Exp abe $
d214 11
a224 2
 * to do that.  The HASXOPT definition may be used to select the conditions
 * under which private lfile elements are used.
d228 1
d510 14
@


1.25
log
@Revision 4.73
@
text
@d34 1
a34 1
 * $Id: machine.h,v 1.24 2004/07/06 19:19:44 abe Exp abe $
d496 2
a497 2
/* #define	HASXOPT		"help text for X option" */
/* #define	HASXOPT_VALUE	1 */
@


1.24
log
@Revision 4.72
@
text
@d34 1
a34 1
 * $Id: machine.h,v 1.23 2004/03/10 23:51:11 abe Exp abe $
d402 5
d410 2
@


1.23
log
@Revision 4.71
@
text
@d34 1
a34 1
 * $Id: machine.h,v 1.22 2003/10/07 14:27:47 abe Exp abe $
d222 8
@


1.22
log
@Revision 4.69
@
text
@d34 1
a34 1
 * $Id: machine.h,v 1.21 2002/12/03 18:23:08 abe Exp abe $
d406 11
@


1.21
log
@Revision 4.66
@
text
@d34 1
a34 1
 * $Id: machine.h,v 1.20 2002/02/26 15:20:15 abe Exp abe $
d55 8
a234 3
 * HASNCAPID is defined for those dialects with a searchable kernel name
 * cache whose cache and vnodes are linked by a capability ID.
 *
a240 1
/* #define	HASNCAPID	1	*/
@


1.20
log
@Revision 4.62
@
text
@d34 1
a34 1
 * $Id: machine.h,v 1.19 2001/06/06 12:36:18 abe Exp abe $
d376 9
@


1.19
log
@Revision 4.57
@
text
@d34 1
a34 1
 * $Id: machine.h,v 1.18 2001/02/13 13:56:19 abe Exp abe $
d483 1
a483 1
/* #define	USE_LIB_PRINTCHDEVNAME		1	   pdvn.c */
@


1.18
log
@Revision 4.55
@
text
@d34 1
a34 1
 * $Id: machine.h,v 1.17 2000/12/05 20:27:09 abe Exp abe $
d376 8
@


1.17
log
@Revision 4.53
@
text
@d34 1
a34 1
 * $Id: machine.h,v 1.16 2000/12/05 20:22:14 abe Exp abe $
d480 1
@


1.16
log
@Revision 4.53
@
text
@d34 1
a34 1
 * $Id: machine.h,v 1.15 2000/11/03 18:04:38 abe Exp abe $
d379 7
a400 7


/*
 * HASSNODE is defined for those dialects that have snodes.
 */

/* #define	HASSNODE	1 */
@


1.15
log
@Revision 4.52
@
text
@d34 1
a34 1
 * $Id: machine.h,v 1.14 2000/08/01 15:40:35 abe Exp abe $
d376 18
@


1.14
log
@Revision 4.51
Convert to snpf().
@
text
@d34 1
a34 1
 * $Id: machine.h,v 1.13 2000/03/16 15:56:17 abe Exp abe $
d229 4
d237 2
@


1.13
log
@linux/proc
@
text
@d34 1
a34 1
 * $Id: machine.h,v 1.12 1999/07/08 14:50:35 abe Exp abe $
d459 2
@


1.12
log
@Revision 4.45
@
text
@d34 1
a34 1
 * $Id: machine.h,v 1.11 99/01/25 07:07:14 abe Exp Locker: abe $
d224 2
a225 1
 * that lsof can search.
d318 9
d330 8
a337 2
 * HASFSTYPE is defined for those systems that have a file system type
 * string, st_fstype, in the stat() buffer.
@


1.11
log
@Revision 4.40
@
text
@d34 1
a34 1
 * $Id: machine.h,v 1.10 98/12/28 19:34:10 abe Exp Locker: abe $
d38 2
a39 2
#if	!defined(MACHINE_H)
#define	MACHINE_H	1
d118 1
a118 1
/* #define	HASSYSDC	"/var/adm/lsof.dc" */
d250 1
a250 1
/* #define	HASPIPEFN	process_pipe */
d283 5
a287 5
/* #define	HASPRINTDEV	print_dev	*/
/* #define	HASPRINTINO	print_ino	*/
/* #define	HASPRINTNM	print_nm	*/
/* #define	HASPRINTOFF	print_off	*/
/* #define	HASPRINTSZ	print_sz	*/
d300 1
a300 1
/* #define	HASPRIVFILETYPE	process_shmf	*/
d334 1
a334 1
/* #define	HASPROCFS	"proc" */
d483 1
a483 1
#endif	/* !defined(MACHINE_H) */
@


1.10
log
@Revision 4.39
@
text
@d34 1
a34 1
 * $Id: machine.h,v 1.9 98/12/28 09:40:39 abe Exp Locker: abe $
d47 8
d433 1
a433 1
/* #define	USE_LIB_IS_FILE_NAMED		1	   isfn.c */
@


1.9
log
@Revision 4.39
@
text
@d34 1
a34 1
 * $Id: machine.h,v 1.8 98/06/29 15:38:15 abe Exp Locker: abe $
d191 13
@


1.8
log
@Revision 4.35
@
text
@d34 1
a34 1
 * $Id: machine.h,v 1.7 98/06/25 07:19:36 abe Exp Locker: abe $
d136 12
a190 24


/*
 * HASLFILEADD is defined for those dialects that need additional elements
 * in struct lfile.  The HASLFILEADD definition is a macro that defines
 * them.  If any of the additional elements need to be preset in the
 * alloc_lfile() function of proc.c, the SETLFILEADD macro may be defined
 * to do that.  The HASXOPT definition may be used to select the conditions
 * under which private lfile elements are used.
 *
 * Field identifiers 1 through 9 are reserved for dialect-specific field
 * output.  Define the string HASFIELDAP<x> as the help (-F?) name of the
 * private field and LISTLFIELAP<x> as a macro to list the field output.
 * (<x> is the field identifier character.)  HASFIELDAP<x> is used in proc.c
 * and store.c; LISTFIELDAP<x>, in proc.c.
 *
 * See ../dialectx/ptx for an example of the use of HASLFILEADD, SETLFILEADD,
 * and HASXOPT.
 */

/* #define HASLFILEADD <macro of new element definitions>; */
/* #define SETLFILEADD <macro of code to preset new elements>; */
/* #define HASFIELDAP1 <string name of field for -F? output> */
/* #define LISTLFILEAP1 <macro to list field output>; */
@


1.7
log
@Revision 4.34
Skip kernel identity check.
@
text
@d34 1
a34 1
 * $Id: machine.h,v 1.6 98/03/18 15:27:44 abe Exp Locker: abe $
d163 8
@


1.6
log
@Remove rvfs.c reference.
@
text
@d34 1
a34 1
 * $Id: machine.h,v 1.5 98/02/16 19:51:18 abe Exp Locker: abe $
d413 1
@


1.5
log
@Revision 4.26
@
text
@d34 1
a34 1
 * $Id: machine.h,v 1.4 98/02/13 12:50:19 abe Exp Locker: abe $
a421 1
/* #define	USE_LIB_READVFS			1	   rvfs.c */
@


1.4
log
@Revision 4.26
Disable HASPROCFS.
@
text
@d34 1
a34 1
 * $Id: machine.h,v 1.3 98/01/28 06:59:38 abe Exp Locker: abe $
d312 3
a314 3
 * The HASPROCFS definition may be accompanied by the HASPINFO definition.
 * HASPINFO names the subdirectory of HASPROCFS that contains read-only
 * information (typically /pinfo).
d317 3
a319 3
/* #define		HASPROCFS	"proc" */
/* #define		HASFSTYPE	1 */
/* #define		HASPINFO	"/pinfo" */
a412 1
/* #define	USE_LIB_CK_FILE_ARG		1	   ckfa.c */
@


1.3
log
@Revision 4.24
Define NEVER_HASDCACHE and NEVER_WARNDEVACCESS.
@
text
@d34 1
a34 1
 * $Id: machine.h,v 1.2 98/01/26 15:30:19 abe Exp Locker: abe $
d317 1
a317 1
#define		HASPROCFS	"proc"
@


1.2
log
@Revision 4.24
Warn against enabling HASDCACHE and define the CANT_DO_DCACHE symbol in a
comment to keep Customize from defining HASDCACHE.
@
text
@d34 1
a34 1
 * $Id: machine.h,v 1.1 97/12/30 08:15:43 abe Exp Locker: abe $
d78 2
a79 2
 * The presence of CANT_DO_DCACHE in this comment prevents the Customize
 * script from allowing device cache processing to be enabled.
d433 6
d441 1
a441 1
#define	WARNDEVACCESS	1
@


1.1
log
@Initial revision
@
text
@d34 1
a34 1
 * $Id$
d75 7
d101 3
d106 1
a106 1
/* #define	HASDCACHE	1 */
@
