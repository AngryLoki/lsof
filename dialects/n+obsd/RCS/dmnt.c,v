head	1.12;
access;
symbols;
locks; strict;
comment	@ * @;


1.12
date	2005.08.08.19.53.24;	author abe;	state Exp;
branches;
next	1.11;

1.11
date	2004.12.30.18.42.24;	author abe;	state Exp;
branches;
next	1.10;

1.10
date	2004.07.06.19.20.18;	author abe;	state Exp;
branches;
next	1.9;

1.9
date	2002.06.17.01.44.11;	author abe;	state Exp;
branches;
next	1.8;

1.8
date	2000.08.09.14.56.10;	author abe;	state Exp;
branches;
next	1.7;

1.7
date	2000.08.01.12.45.01;	author abe;	state Exp;
branches;
next	1.6;

1.6
date	98.07.17.08.50.12;	author abe;	state Exp;
branches;
next	1.5;

1.5
date	98.03.18.15.27.06;	author abe;	state Exp;
branches;
next	1.4;

1.4
date	98.03.06.08.24.41;	author abe;	state Exp;
branches;
next	1.3;

1.3
date	98.02.13.12.46.42;	author abe;	state Exp;
branches;
next	1.2;

1.2
date	97.07.02.11.12.27;	author abe;	state Exp;
branches;
next	1.1;

1.1
date	97.02.24.07.36.06;	author abe;	state Exp;
branches;
next	;


desc
@Lsof version 4
@


1.12
log
@Revision 4.76
@
text
@/*
 * dmnt.c - NetBSD and OpenBSD mount support functions for lsof
 */


/*
 * Copyright 1994 Purdue Research Foundation, West Lafayette, Indiana
 * 47907.  All rights reserved.
 *
 * Written by Victor A. Abell
 *
 * This software is not subject to any license of the American Telephone
 * and Telegraph Company or the Regents of the University of California.
 *
 * Permission is granted to anyone to use this software for any purpose on
 * any computer system, and to alter it and redistribute it freely, subject
 * to the following restrictions:
 *
 * 1. Neither the authors nor Purdue University are responsible for any
 *    consequences of the use of this software.
 *
 * 2. The origin of this software must not be misrepresented, either by
 *    explicit claim or by omission.  Credit to the authors and Purdue
 *    University must appear in documentation and sources.
 *
 * 3. Altered versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 *
 * 4. This notice may not be removed or altered.
 */

#ifndef lint
static char copyright[] =
"@@(#) Copyright 1994 Purdue Research Foundation.\nAll rights reserved.\n";
static char *rcsid = "$Id: dmnt.c,v 1.11 2004/12/30 18:42:24 abe Exp abe $";
#endif


#if     defined(NETBSDV) && defined(HASSTATVFS)
/*
 * NetBSD needs the statvfs structure to be defined without the 
 * pre-definition of _KERNEL.
 */
  
#include <sys/statvfs.h>
#endif  /* defined(NETBSDV) && defined(HASSTATVFS) */

#include "lsof.h"


/*
 * Local static definitions
 */

static struct mounts *Lmi = (struct mounts *)NULL;	/* local mount info */
static int Lmist = 0;					/* Lmi status */


/*
 * readmnt() - read mount table
 */

struct mounts *
readmnt()
{
	char *dn = (char *)NULL;
	char *ln;
	struct mounts *mtp;
	int n;
	struct stat sb;

#if	defined(HASPROCFS)
	unsigned char procfs = 0;
#endif	/* defined(HASPROCFS) */

#if	defined(HASSTATVFS)
	struct statvfs *mb = (struct statvfs *)NULL;
#else	/* !defined(HASSTATVFS) */
	struct statfs *mb = (struct statfs *)NULL;
#endif	/* defined(HASSTATVFS) */

	if (Lmi || Lmist)
	    return(Lmi);
/*
 * Access mount information.
 */
	if ((n = getmntinfo(&mb, MNT_NOWAIT)) <= 0) {
	    (void) fprintf(stderr, "%s: no mount information\n", Pn);
	    return(0);
	}
/*
 * Read mount information.
 */
	for (; n; n--, mb++) {
	    if (mb->f_fstypename[0] == '\0')
		continue;
	    mb->f_fstypename[MFSNAMELEN - 1] = '\0';
	/*
	 * Interpolate a possible symbolic directory link.
	 */
	    if (dn)
		(void) free((FREE_P *)dn);
	    if (!(dn = mkstrcpy(mb->f_mntonname, (MALLOC_S *)NULL))) {

no_space_for_mount:

		(void) fprintf(stderr, "%s: no space for mount at ", Pn);
		safestrprt(mb->f_mntonname, stderr, 0);
		(void) fprintf(stderr, " (");
		safestrprt(mb->f_mntfromname, stderr, 0);
		(void) fprintf(stderr, ")\n");
		Exit(1);
	    }
	    if ((ln = Readlink(dn)) == NULL) {
		if (!Fwarn) {
		    (void) fprintf(stderr,
			"      Output information may be incomplete.\n");
		}
		continue;
	    }
	    if (ln != dn) {
		(void) free((FREE_P *)dn);
		dn = ln;
	    }
	    if (*dn != '/')
		continue;
	/*
	 * Stat() the directory.
	 */
	    if (statsafely(dn, &sb)) {
		if (!Fwarn) {
		    (void) fprintf(stderr, "%s: WARNING: can't stat() ", Pn);
		    safestrprt(mb->f_fstypename, stderr, 0);
		    (void) fprintf(stderr, " file system ");
		    safestrprt(mb->f_mntonname, stderr, 1);
		    (void) fprintf(stderr,
			"      Output information may be incomplete.\n");
		}
		(void) bzero((char *)&sb, sizeof(sb));

#if	defined(HASSTATVFS)
		sb.st_dev = (dev_t)mb->f_fsid;
#else	/* !defined(HASSTATVFS) */
		sb.st_dev = (dev_t)mb->f_fsid.val[0];
#endif	/* defined(HASSTATVFS) */

		sb.st_mode = S_IFDIR | 0777;
		if (!Fwarn) {
		    (void) fprintf(stderr,
			"      assuming \"dev=%x\" from mount table\n",
			sb.st_dev);
		}
	    }
	/*
	 * Allocate and fill a local mount structure.
	 */
	    if (!(mtp = (struct mounts *)malloc(sizeof(struct mounts))))
		goto no_space_for_mount;
	    mtp->dir = dn;
	    dn = (char *)NULL;

#if	defined(HASPROCFS)
	    if (strcmp(mb->f_fstypename, MOUNT_PROCFS) == 0) {

	    /*
	     * Save information on exactly one procfs file system.
	     */
		if (procfs)
		    Mtprocfs = (struct mounts *)NULL;
		else {
		    procfs = 1;
		    Mtprocfs = mtp;
		}
	    }
#endif	/* defined(HASPROCFS) */

	    mtp->next = Lmi;
	    mtp->dev = sb.st_dev;
	    mtp->rdev = sb.st_rdev;
	    mtp->inode = (INODETYPE)sb.st_ino;
	    mtp->mode = sb.st_mode;
	/*
	 * Interpolate a possible file system (mounted-on) device name link.
	 */
	    if (!(dn = mkstrcpy(mb->f_mntfromname, (MALLOC_S *)NULL)))
		goto no_space_for_mount;
	    mtp->fsname = dn;
	    ln = Readlink(dn);
	    dn = (char *)NULL;
	/*
	 * Stat() the file system (mounted-on) name and add file system
	 * information to the local mount table entry.
	 */
	    if (!ln || statsafely(ln, &sb))
		sb.st_mode = 0;
	    mtp->fsnmres = ln;
	    mtp->fs_mode = sb.st_mode;
	    Lmi = mtp;
	}
/*
 * Clean up and return local mount info table address.
 */
	if (dn)
	    (void) free((FREE_P *)dn);
	Lmist = 1;
	return(Lmi);
}


/*
 * readvfs() - read vfs structure
 */

struct l_vfs *
readvfs(vm)
	KA_T vm;			/* kernel mount address from vnode */
{
	struct mount m;
	struct l_vfs *vp;
/*
 * Search for match on existing entry.
 */
	for (vp = Lvfs; vp; vp = vp->next) {
	    if (vm == vp->addr)
		return(vp);
	}
/*
 * Read the (new) mount structure, allocate a local entry, and fill it.
 */
	if (kread(vm, (char *)&m, sizeof(m)) != 0)
	    return((struct l_vfs *)NULL);
	if (!(vp = (struct l_vfs *)malloc(sizeof(struct l_vfs)))) {
	    (void) fprintf(stderr, "%s: PID %d, no space for vfs\n",
		Pn, Lp->pid);
	    Exit(1);
	}
	if (!(vp->dir = mkstrcpy(m.m_stat.f_mntonname, (MALLOC_S *)NULL))
	||  !(vp->fsname = mkstrcpy(m.m_stat.f_mntfromname, (MALLOC_S *)NULL)))
	{
	    (void) fprintf(stderr, "%s: PID %d, no space for mount names\n",
		Pn, Lp->pid);
	    Exit(1);
	}
	vp->addr = vm;

#if	defined(HASSTATVFS)
	vp->fsid = m.m_stat.f_fsidx;
#else	/* !defined(HASSTATVFS) */
	vp->fsid = m.m_stat.f_fsid;
#endif	/* defined(HASSTATVFS) */

	(void) snpf(vp->type, sizeof(vp->type), "%s", m.m_stat.f_fstypename);
	vp->next = Lvfs;
	Lvfs = vp;
	return(vp);
}
@


1.11
log
@Revision 4.74
@
text
@d35 1
a35 1
static char *rcsid = "$Id: dmnt.c,v 1.10 2004/07/06 19:20:18 abe Exp abe $";
d180 1
a180 1
	    mtp->inode = sb.st_ino;
@


1.10
log
@Revision 4.72
@
text
@d35 1
a35 1
static char *rcsid = "$Id: dmnt.c,v 1.9 2002/06/17 01:44:11 abe Exp abe $";
d39 9
@


1.9
log
@Revision 4.64
@
text
@d35 1
a35 1
static char *rcsid = "$Id: dmnt.c,v 1.8 2000/08/09 14:56:10 abe Exp abe $";
a58 1
	struct statfs *mb = (struct statfs *)NULL;
d67 6
d131 4
d136 2
d236 4
d241 2
@


1.8
log
@Revision 4.51
Plug memory leak.
@
text
@d35 1
a35 1
static char *rcsid = "$Id: dmnt.c,v 1.7 2000/08/01 12:45:01 abe Exp abe $";
d111 2
@


1.7
log
@Convert to snpf().
@
text
@d35 1
a35 1
static char *rcsid = "$Id: dmnt.c,v 1.6 1998/07/17 08:50:12 abe Exp abe $";
a197 1

d226 1
@


1.6
log
@Revision 4.35
@
text
@d35 1
a35 1
static char *rcsid = "$Id: dmnt.c,v 1.5 98/03/18 15:27:06 abe Exp Locker: abe $";
d225 1
a225 2
	(void) strncpy(vp->type, m.m_stat.f_fstypename, MFSNAMELEN - 1);
	vp->type[MFSNAMELEN - 1] = '\0';
@


1.5
log
@Revision 4.29
Convert readmnt() to return local mount info table pointer.
@
text
@d35 1
a35 1
static char *rcsid = "$Id: dmnt.c,v 1.4 98/03/06 08:24:41 abe Exp Locker: abe $";
d47 1
d68 1
a68 1
	if (Lmi)
d183 1
@


1.4
log
@Revision 4.27
@
text
@d35 1
a35 1
static char *rcsid = "$Id: dmnt.c,v 1.3 98/02/13 12:46:42 abe Exp Locker: abe $";
d43 1
a43 1
 * Local static information
d46 1
d48 1
d53 1
a53 1
int
a56 1
	int err = 0;
d67 2
d89 9
a97 2
		err = 1;
		break;
a103 1
		err = 2;
a121 1
		err = 2;
d134 2
a135 4
	    if (!(mtp = (struct mounts *)malloc(sizeof(struct mounts)))) {
		err = 1;
		break;
	    }
d154 1
a154 1
	    mtp->next = Mtab;
d162 2
a163 4
	    if (!(dn = mkstrcpy(mb->f_mntfromname, (MALLOC_S *)NULL))) {
		err = 1;
		break;
	    }
d175 1
a175 1
	    Mtab = mtp;
d178 1
a178 1
 * Clean up and handle errors.
d182 1
a182 12
	switch(err) {
	case 1:
	    (void) fprintf(stderr, "%s: no space for mount at ", Pn);
	    safestrprt(mb->f_mntonname, stderr, 0);
	    (void) fprintf(stderr, " (");
	    safestrprt(mb->f_mntfromname, stderr, 0);
	    (void) fprintf(stderr, ")\n");
	    return(0);
	case 2:
	    return(1);
	}
	return(1);
@


1.3
log
@Revision 4.26
@
text
@d35 1
a35 1
static char *rcsid = "$Id: dmnt.c,v 1.2 97/07/02 11:12:27 abe Exp Locker: abe $";
d57 1
a57 1
	struct statfs *mb = NULL;
d85 1
a85 1
	    if (!(dn = (char *)malloc((MALLOC_S)strlen(mb->f_mntonname)+1))) {
a88 1
	    (void) strcpy(dn, mb->f_mntonname);
d106 4
a110 4
			"%s: WARNING: can't stat() %s file system %s\n",
			Pn, mb->f_fstypename,
			mb->f_mntonname);
		    (void) fprintf(stderr,
d156 1
a156 2
	    if (!(dn = (char *)malloc((MALLOC_S) strlen(mb->f_mntfromname)+1)))
	    {
a159 1
	    (void) strcpy(dn, mb->f_mntfromname);
d180 5
a184 2
	    (void) fprintf(stderr, "%s: no space for mount at %s (%s)\n",
		Pn, mb->f_mntonname, mb->f_mntfromname);
d199 1
a199 1
	struct mount *vm;		/* mount address in vnode */
d208 2
a209 2
		if (vm == vp->addr)
			return(vp);
d214 6
a219 6
	if (kread((KA_T)vm, (char *)&m, sizeof(m)) != 0)
		return(NULL);
	if ((vp = (struct l_vfs *)malloc(sizeof(struct l_vfs))) == NULL) {
		(void) fprintf(stderr, "%s: PID %d, no space for vfs\n",
			Pn, Lp->pid);
		Exit(1);
d221 6
a226 7
	if ((vp->dir = (char *)malloc(strlen(m.m_stat.f_mntonname)+1))
	== NULL
	||  (vp->fsname = (char *)malloc(strlen(m.m_stat.f_mntfromname)+1))
	== NULL) {
		(void) fprintf(stderr, "%s: PID %d, no space for mount names\n",
			Pn, Lp->pid);
		Exit(1);
a227 2
	(void) strcpy(vp->dir, m.m_stat.f_mntonname);
	(void) strcpy(vp->fsname, m.m_stat.f_mntfromname);
@


1.2
log
@Revision 4.13
Indicate sources are shared by NetBSD and OpenBSD.
@
text
@d35 1
a35 1
static char *rcsid = "$Id: dmnt.c,v 1.1 97/02/24 07:36:06 abe Exp Locker: abe $";
d54 1
a54 1
	char *dn = NULL;
d70 2
a71 2
		(void) fprintf(stderr, "%s: no mount information\n", Pn);
		return(0);
d77 3
a79 3
		if (mb->f_fstypename[0] == '\0')
			continue;
		mb->f_fstypename[MFSNAMELEN - 1] = '\0';
d83 11
a93 6
		if (dn)
			(void) free((FREE_P *)dn);
		if ((dn = (char *)malloc((MALLOC_S)strlen(mb->f_mntonname)+1))
		== NULL) {
			err = 1;
			break;
d95 7
a101 13
		(void) strcpy(dn, mb->f_mntonname);
		if ((ln = Readlink(dn)) == NULL) {
		    if (!Fwarn) {
			(void) fprintf(stderr,
			    "      Output information may be incomplete.\n");
			}
			err = 2;
			continue;
		}
		if (ln != dn) {
			(void) free((FREE_P *)dn);
			dn = ln;
		}
d105 8
a112 17
		if (statsafely(dn, &sb)) {
		    if (!Fwarn) {
			(void) fprintf(stderr,
			    "%s: WARNING: can't stat() %s file system %s\n",
			    Pn, mb->f_fstypename,
			    mb->f_mntonname);
			(void) fprintf(stderr,
			    "      Output information may be incomplete.\n");
		    }
		    err = 2;
		    (void) bzero((char *)&sb, sizeof(sb));
		    sb.st_dev = (dev_t)mb->f_fsid.val[0];
		    sb.st_mode = S_IFDIR | 0777;
		    if (!Fwarn)
			(void) fprintf(stderr,
			    "      assuming \"dev=%x\" from mount table\n",
			    sb.st_dev);
d114 10
d127 6
a132 10
		if ((mtp=(struct mounts *)malloc(sizeof(struct mounts))) == NULL
		||  (mtp->fsname = (char *)malloc((MALLOC_S)
			strlen(mb->f_mntfromname)+1)) == NULL)
		{
			err = 1;
			break;
		}
		(void) strcpy(mtp->fsname, mb->f_mntfromname);
		mtp->dir = dn;
		dn = NULL;
d135 1
a135 1
		if (strcmp(mb->f_fstypename, MOUNT_PROCFS) == 0) {
d137 8
a144 9
		/*
		 * Save information on exactly one procfs file system.
		 */
			if (procfs)
				Mtprocfs = NULL;
			else {
				procfs = 1;
				Mtprocfs = mtp;
			}
d146 1
d149 26
a174 6
		mtp->next = Mtab;
		mtp->dev = sb.st_dev;
		mtp->rdev = sb.st_rdev;
		mtp->inode = sb.st_ino;
		mtp->mode = sb.st_mode;
		Mtab = mtp;
d177 1
a177 1
 * Handle errors.
d179 2
d183 3
a185 3
		(void) fprintf(stderr, "%s: no space for mount at %s (%s)\n",
			Pn, mb->f_mntonname, mb->f_mntfromname);
		return(0);
d187 1
a187 1
		return(1);
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * dmnt.c - NetBSD mount support functions for lsof
d35 1
a35 1
static char *rcsid = "$Id: dmnt.c,v 1.5 96/04/05 09:58:19 abe Exp $";
@
