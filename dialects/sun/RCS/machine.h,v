head	1.48;
access;
symbols;
locks; strict;
comment	@ * @;


1.48
date	2018.02.14.14.24.07;	author abe;	state Exp;
branches;
next	1.47;

1.47
date	2011.09.07.19.16.00;	author abe;	state Exp;
branches;
next	1.46;

1.46
date	2011.08.07.22.53.42;	author abe;	state Exp;
branches;
next	1.45;

1.45
date	2010.07.29.16.03.00;	author abe;	state Exp;
branches;
next	1.44;

1.44
date	2009.03.25.19.22.16;	author abe;	state Exp;
branches;
next	1.43;

1.43
date	2008.10.21.16.16.42;	author abe;	state Exp;
branches;
next	1.42;

1.42
date	2007.04.24.16.23.15;	author abe;	state Exp;
branches;
next	1.41;

1.41
date	2006.03.27.22.57.33;	author abe;	state Exp;
branches;
next	1.40;

1.40
date	2005.08.29.10.22.41;	author abe;	state Exp;
branches;
next	1.39;

1.39
date	2005.08.08.19.55.41;	author abe;	state Exp;
branches;
next	1.38;

1.38
date	2005.05.11.12.54.26;	author abe;	state Exp;
branches;
next	1.37;

1.37
date	2004.12.30.18.42.59;	author abe;	state Exp;
branches;
next	1.36;

1.36
date	2004.10.17.21.56.28;	author abe;	state Exp;
branches;
next	1.35;

1.35
date	2004.07.06.19.17.17;	author abe;	state Exp;
branches;
next	1.34;

1.34
date	2004.02.24.13.47.19;	author abe;	state Exp;
branches;
next	1.33;

1.33
date	2004.01.14.11.29.31;	author abe;	state Exp;
branches;
next	1.32;

1.32
date	2003.10.13.13.30.04;	author abe;	state Exp;
branches;
next	1.31;

1.31
date	2002.12.03.18.23.08;	author abe;	state Exp;
branches;
next	1.30;

1.30
date	2002.06.17.01.42.31;	author abe;	state Exp;
branches;
next	1.29;

1.29
date	2002.02.26.15.22.16;	author abe;	state Exp;
branches;
next	1.28;

1.28
date	2001.06.06.15.36.37;	author abe;	state Exp;
branches;
next	1.27;

1.27
date	2001.02.13.14.19.21;	author abe;	state Exp;
branches;
next	1.26;

1.26
date	2000.12.05.20.28.07;	author abe;	state Exp;
branches;
next	1.25;

1.25
date	2000.12.05.20.24.07;	author abe;	state Exp;
branches;
next	1.24;

1.24
date	2000.12.04.14.35.13;	author abe;	state Exp;
branches;
next	1.23;

1.23
date	2000.11.03.18.35.55;	author abe;	state Exp;
branches;
next	1.22;

1.22
date	2000.08.01.15.21.11;	author abe;	state Exp;
branches;
next	1.21;

1.21
date	2000.03.16.15.56.27;	author abe;	state Exp;
branches;
next	1.20;

1.20
date	99.10.22.08.23.52;	author abe;	state Exp;
branches;
next	1.19;

1.19
date	99.07.08.14.51.05;	author abe;	state Exp;
branches;
next	1.18;

1.18
date	99.01.25.07.18.39;	author abe;	state Exp;
branches;
next	1.17;

1.17
date	98.12.28.19.34.56;	author abe;	state Exp;
branches;
next	1.16;

1.16
date	98.12.28.09.35.42;	author abe;	state Exp;
branches;
next	1.15;

1.15
date	98.06.29.15.49.44;	author abe;	state Exp;
branches;
next	1.14;

1.14
date	98.06.25.07.22.16;	author abe;	state Exp;
branches;
next	1.13;

1.13
date	98.03.23.07.55.03;	author abe;	state Exp;
branches;
next	1.12;

1.12
date	98.03.18.16.20.21;	author abe;	state Exp;
branches;
next	1.11;

1.11
date	98.02.16.19.55.09;	author abe;	state Exp;
branches;
next	1.10;

1.10
date	97.12.11.16.01.47;	author abe;	state Exp;
branches;
next	1.9;

1.9
date	97.11.06.09.23.57;	author abe;	state Exp;
branches;
next	1.8;

1.8
date	97.10.24.07.58.45;	author abe;	state Exp;
branches;
next	1.7;

1.7
date	97.09.23.09.52.02;	author abe;	state Exp;
branches;
next	1.6;

1.6
date	97.07.22.10.43.52;	author abe;	state Exp;
branches;
next	1.5;

1.5
date	97.05.28.16.06.58;	author abe;	state Exp;
branches;
next	1.4;

1.4
date	97.04.23.15.53.07;	author abe;	state Exp;
branches;
next	1.3;

1.3
date	97.04.16.07.43.48;	author abe;	state Exp;
branches;
next	1.2;

1.2
date	97.04.07.08.27.05;	author abe;	state Exp;
branches;
next	1.1;

1.1
date	97.02.24.07.47.20;	author abe;	state Exp;
branches;
next	;


desc
@Lsof version 4
@


1.48
log
@Revision 4.90
@
text
@/*
 * machine.h - Solaris definitions for lsof
 */


/*
 * Copyright 1994 Purdue Research Foundation, West Lafayette, Indiana
 * 47907.  All rights reserved.
 *
 * Written by Victor A. Abell
 *
 * This software is not subject to any license of the American Telephone
 * and Telegraph Company or the Regents of the University of California.
 *
 * Permission is granted to anyone to use this software for any purpose on
 * any computer system, and to alter it and redistribute it freely, subject
 * to the following restrictions:
 *
 * 1. Neither the authors nor Purdue University are responsible for any
 *    consequences of the use of this software.
 *
 * 2. The origin of this software must not be misrepresented, either by
 *    explicit claim or by omission.  Credit to the authors and Purdue
 *    University must appear in documentation and sources.
 *
 * 3. Altered versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 *
 * 4. This notice may not be removed or altered.
 */


/*
 * $Id: machine.h,v 1.47 2011/09/07 19:16:00 abe Exp abe $
 */

#if	!defined(LSOF_MACHINE_H)
#define	LSOF_MACHINE_H  1

# if	defined(HAS_LGRP_ROOT_CONFLICT)
/*
 * <sys/lgrp.h> must be #include'd early on some older Solaris systems at
 * version 9 and Solaris 10 before _KMEMUSER or _KERNEL are defined to avoid
 * a conflict with the use of lgrp_root as an external symbol in <sys/lgrp.h>
 * and a macro in <sys/lgrp_user.h>.
 */

#include <sys/lgrp.h>
# endif	/* defined(HAS_LGRP_ROOT_CONFLICT) */


# if	solaris>=100000
#  if	!defined(HAS_AIO_REQ_STRUCT)
/*
 * When <sys.aio_req.h> lacks one, define a dummy aio_req structure for
 * Solaris >= 10 systems.
 *
 * If this definition causes compilation errors for <sys/vnode.h>, especially
 * with Solaris 11, it may be necessary to comment out the following structure
 * definition.  I don't know a test that will determine the possibility of
 * compilation errors.
 */

typedef struct aio_req { int dummy; } aio_req_t;

#  endif	/* !defined(HAS_AIO_REQ_STRUCT) */

/*
 * Include <sys/utsname.h> so it won't be corrupted for 32 bit compilations
 * when _KERNEL is defined for some include files in dlsof.h.
 *
 * Daniel Trinkle identified this requirement.
 */

#include <sys/utsname.h>
# endif	/* solaris>=100000 */


# if	solaris>=20600
/*
 * <sys/poll.h> must be #include'd for Solaris >= 2.6 while _KMEMUSER is
 * defined.  Since <netdb.h> also #include's <sys/poll.h> and <netdb.h>
 * is #include'd from lsof.h, we must perform some early #include magic
 * here to set things up properly.
 */

#define	_KMEMUSER	1
#define	__BIT_TYPES_DEFINED__	1	/* work around to keep the BIND
					 * <sys/bitypes.h> from colliding with
					 * the Solaris <sys/int_types.h> */

#  if	defined(HAS_PAD_MUTEX)
/*
 * Some versions of Solaris 11 need to have the pad_mutex_t typedef defined.
 * However, it is only defined by <sys/mutex.h> when _KERNEL is defined, and
 * doing that causes other difficulties.
 *
 * So <sys/mutex.h> is included here, followed by a copy of its pad_mutex_t
 * typedef, all outside the _KERNEL definition.
 *
 * This brute force work-around was supplied by Carson Gaspar.
 */

#include	<sys/mutex.h>
typedef struct pad_mutex {
	kmutex_t	pad_mutex;
#   if	defined(_LP64)
	char		pad_pad[64 - sizeof (kmutex_t)];
#   endif	/* defined(_LP64) */
} pad_mutex_t;
#  endif	/* defined(HAS_PAD_MUTEX) */

#include <sys/poll.h>

# if	solaris>=80000
#include <sys/wait.h>
#include <sys/types32.h>
#define	_KERNEL	1
#include <netinet/in.h>
#undef	_KERNEL
#define	ipa_32	s6_ipaddr.ipa_32
# endif	/* solaris>=80000 */

# endif	/* solaris>=20600 */


/*
 * CAN_USE_CLNT_CREATE is defined for those dialects where RPC clnt_create()
 * can be used to obtain a CLIENT handle in lieu of clnttcp_create().
 */

# if	solaris>=20501
#define	CAN_USE_CLNT_CREATE	1
# endif	/* solaris>=20501 */


/*
 * DEVDEV_PATH defines the path to the directory that contains device
 * nodes.
 */

# if	solaris<100000
#define	DEVDEV_PATH	"/dev"
# else	/* solaris>=100000 */
#define	DEVDEV_PATH	"/devices"
# endif	/* solaris<100000 */


/*
 * GET_MAX_FD is defined for those dialects that provide a function other than
 * getdtablesize() to obtain the maximum file descriptor number plus one.
 */

# if	solaris<20500
#define	GET_MAX_FD	get_max_fd
# endif	/* solaris<20500 */


/*
 * HASAOPT is defined for those dialects that have AFS support; it specifies
 * that the default path to an alternate AFS kernel name list file may be
 * supplied with the -A <path> option.
 */

#define	HASAOPT		1


/*
 * HASBLKDEV is defined for those dialects that want block device information
 * recorded in BDevtp[].
 */

#define	HASBLKDEV	1


/*
 * HASDCACHE is defined for those dialects that support a device cache
 * file.
 *
 * HASENVDC defined the name of an environment variable that contains the
 * device cache file path.  The HASENVDC environment variable is ignored when
 * the lsof process is setuid(root) or its real UID is 0.
 *
 * HASPERSDC defines the format for the last component of a personal device
 * cache file path.  The first will be the home directory of the real UID that
 * executes lsof.
 *
 * HASPERSDCPATH defines the environment variable whose value is the middle
 * component of the personal device cache file path.  The middle component
 * follows the home directory and precedes the results of applying HASPERSDC.
 * The HASPERSDCPATH environment variable is ignored when the lsof process is
 * setuid(root) or its real UID is 0.
 *
 * HASSYSDC defines a public device cache file path.  When it's defined, it's
 * used as the path from which to read the device cache.
 *
 * Consult the 00DCACHE and 00FAQ files of the lsof distribution for more
 * information on device cache file path construction.
 */

#define	HASDCACHE	1
#define	HASENVDC	"LSOFDEVCACHE"
#define	HASPERSDC	"%h/%p.lsof_%L"
#define	HASPERSDCPATH	"LSOFPERSDCPATH"
/* #define	HASSYSDC	"/your/choice/of/path" */


/*
 * HASCDRNODE is defined for those dialects that have CD-ROM nodes.
 */

/* #define	HASCDRNODE	1 */


/*
 * HASEOPT is defined for dialects that support the +|-e option.
 */

/* #define	HASEOPT	1 */


/*
 * HASFIFONODE is defined for those dialects that have FIFO nodes.
 */

#define	HASFIFONODE	1


/*
 * HASFSINO is defined for those dialects that have the file system
 * inode element, fs_ino, in the lfile structure definition in lsof.h.
 */

#define	HASFSINO	1


/*
 * HASFSTRUCT is defined if the dialect has a file structure.
 *
 * FSV_DEFAULT defines the default set of file structure values to list.
 * It defaults to zero (0), but may be made up of a combination of the
 * FSV_* symbols from lsof.h.
 *
 * If any file structure value is unavailable, its use may be suppressed
 * with any of the following definitions:
 *
 *   HASNOFSADDR  -- has no file structure address
 *   HASNOFSFLAGS -- has no file structure flags
 *   HASNOFSCOUNT -- has no file structure count
 *   HASNOFSNADDR -- has no file structure node address
 */

#define	HASFSTRUCT	1
/* #define	FSV_DEFAULT	FSV_? | FSV_? | FSV_? */
/* #define	HASNOFSADDR	1	has no file structure address */
/* #define	HASNOFSFLAGS	1	has no file structure flags */
/* #define	HASNOFSCOUNT	1	has no file structure count */
/* #define	HASNOFSNADDR	1	has no file structure node address */


/*
 * HASGNODE is defined for those dialects that have gnodes.
 */

/* #define	HASGNODE	1 */


/*
 * HASHSNODE is defined for those dialects that have High Sierra nodes.
 */

#define	HASHSNODE	1


/*
 * HASINODE is defined for those dialects that have inodes and wish to
 * use readinode() from node.c.
 */

/* #define	HASINODE	1	*/


/*
 * HASINTSIGNAL is defined for those dialects whose signal function returns
 * an int.
 */

/* #define	HASINTSIGNAL	1 */


/*
 * HASKERNIDCK is defined for those dialects that support the comparison of
 * the build to running kernel identity.
 */

#define	HASKERNIDCK	1


/*
 * HASKOPT is defined for those dialects that support the -k option of
 * reading the kernel's name list from an optional file.
 */

#define	HASKOPT	1


/*
 * HASLFILEADD is defined for those dialects that need additional elements
 * in struct lfile.  The HASLFILEADD definition is a macro that defines them.
 *
 * If any additional elements need to be preset in the alloc_lfile() function
 * of proc.c, the SETLFILEADD macro may be defined to do that.
 *
 * If any additional elements need to be cleared in alloc_lfile() or in the
 * free_proc() function of proc.c, the CLRLFILEADD macro may be defined to
 * do that.  Note that CLRLFILEADD takes one argument, the pointer to the
 * lfile struct.  The CLRLFILEADD macro is expected to expand to statements
 * that are complete -- i.e., have terminating semi-colons -- so the macro is
 * called without a terminating semicolon by proc.c.
 *
 * The HASXOPT definition may be used to select the conditions under which
 * private lfile elements are used.
 */

# if	solaris>=10000 && defined(HAS_V_PATH)
#define	HASLFILEADD	KA_T V_path;
#define	CLRLFILEADD(lf)	(lf)->V_path = (KA_T)NULL;
#define SETLFILEADD Lf->V_path = (KA_T)NULL;
# endif	/* solaris>=10000 && defined(HAS_V_PATH) */


/*
 * HASMNTSTAT indicates the dialect supports the mount stat(2) result option
 * in its l_vfs and mounts structures.
 */

# if	solaris>=10000 && defined(HAS_V_PATH)
#define	HASMNTSTAT	1
# endif	/* solaris>=10000 && defined(HAS_V_PATH) */


/*
 * HASMNTSUP is defined for those dialects that support the mount supplement
 * option.
 */

/* #define	HASMNTSUP	1	*/


/*
 * HASMOPT is defined for those dialects that support the reading of
 * kernel memory from an alternate file.
 */

#define	HASMOPT	1


/*
 * HASNCACHE is defined for those dialects that have a kernel name cache
 * that lsof can search.  A value of 1 directs printname() to prefix the
 * cache value with the file system directory name; 2, avoid the prefix.
 *
 * NCACHELDPFX is a set of C commands to execute before calling ncache_load().
 *
 * NCACHELDSFX is a set of C commands to execute after calling ncache_load().
 */

# if	solaris>=10000 && defined(HAS_V_PATH)
/* #define	HASNCACHE	1	*/
#else	/* solaris<10 || !defined(HAS_V_PATH) */
#define	HASNCACHE	1
# endif	/* solaris>=10000 && defined(HAS_V_PATH) */

#define	NCACHELDPFX	open_kvm();	/* do before calling ncache_load() */

/* #define	NCACHELDSFX	??? */


/*
 * HASNLIST is defined for those dialects that use nlist() to acccess
 * kernel symbols.
 */

#define	HASNLIST	1


/*
 * HASPIPEFN is defined for those dialects that have a special function to
 * process DTYPE_PIPE file structure entries.  Its value is the name of the
 * function.
 *
 * NOTE: don't forget to define a prototype for this function in dproto.h.
 */

/* #define	HASPIPEFN	process_pipe? */


/*
 * HASPIPENODE is defined for those dialects that have pipe nodes.
 */

/* #define	HASPIPENODE	1 */


/*
 * HASPMAPENABLED is defined when the reporting of portmapper registration
 * info is enabled by default.
 */

/* #define	HASPMAPENABLED	1 */


/*
 * HASPPID is defined for those dialects that support identification of
 * the parent process IDentifier (PPID) of a process.
 */

#define	HASPPID		1


/*
 * HASPRINTDEV, HASPRINTINO, HASPRINTNM, HASPRINTOFF, and HASPRINTSZ
 * define private dialect-specific functions for printing DEVice numbers,
 * INOde numbers, NaMes, file OFFsets, and file SiZes.  The functions are
 * called from print_file().
 */

# if	solaris<100000
#define	HASPRINTDEV	print_dev
# endif	/* solaris<100000 */

/* #define	HASPRINTINO	print_ino?	*/
/* #define	HASPRINTNM	print_nm?	*/
/* #define	HASPRINTOFF	print_off?	*/
/* #define	HASPRINTSZ	print_sz?	*/


/*
 * HASPRIVFILETYPE and PRIVFILETYPE are defined for dialects that have a
 * file structure type that isn't defined by a DTYPE_* symbol.  They are
 * used in lib/prfp.c to select the type's processing.
 *
 * PRIVFILETYPE is the definition of the f_type value in the file struct.
 *
 * HASPRIVFILETYPE is the name of the processing function.
 */

/* #define	HASPRIVFILETYPE	process_shmf?	*/
/* #define	PRIVFILETYPE	??	*/


/*
 * HASPRIVNMCACHE is defined for dialects that have a private method for
 * printing cached NAME column values for some files.  HASPRIVNAMECACHE
 * is defined to be the name of the function.
 *
 * The function takes one argument, a struct lfile pointer to the file, and
 * returns non-zero if it prints a name to stdout.
 */

# if	solaris>=10000 && defined(HAS_V_PATH)
#define	HASPRIVNMCACHE	print_v_path
# else	/* solaris<10 || !defined(HAS_V_PATH) */
#  if	defined(HASVXFSRNL)
#define	HASPRIVNMCACHE	print_vxfs_rnl_path
#  else	/* !defined(HASVXFSRNL) */
/* #define	HASPRIVNMCACHE	<function name>	*/
#  endif	/* defined(HASVXFSRNL) */
# endif	/* solaris>=10000 && defined(HAS_V_PATH) */


/*
 * HASPRIVPRIPP is defined for dialects that have a private function for
 * printing IP protocol names.  When HASPRIVPRIPP isn't defined, the
 * IP protocol name printing function defaults to printiprto().
 */

/* #define	HASPRIVPRIPP	1	*/


/*
 * HASPROCFS is defined for those dialects that have a proc file system --
 * usually /proc and usually in SYSV4 derivatives.
 *
 * HASFSTYPE is defined as 1 for those systems that have a file system type
 * string, st_fstype, in the stat() buffer; 2, for those systems that have a
 * file system type integer in the stat() buffer, named MOUNTS_STAT_FSTYPE;
 * 0, for systems whose stat(2) structure has no file system type member.  The
 * additional symbols MOUNTS_FSTYPE, RMNT_FSTYPE, and RMNT_STAT_FSTYPE may be
 * defined in dlsof.h to direct how the readmnt() function in lib/rmnt.c
 * preserves these stat(2) and getmntent(3) buffer values in the local mounts
 * structure.
 *
 * The defined value is the string that names the file system type.
 *
 * The HASPROCFS definition usually must be accompanied by the HASFSTYPE
 * definition and the providing of an fstype element in the local mounts
 * structure (defined in dlsof.h).
 *
 * The HASPROCFS definition may be accompanied by the HASPINODEN definition.
 * HASPINODEN specifies that searching for files in HASPROCFS is to be done
 * by inode number.
 */

#define	HASPROCFS	"proc"
#define	HASFSTYPE	1
#define	HASPINODEN	1


/*
 * HASRNODE is defined for those dialects that have rnodes.
 */

#define	HASRNODE	1


/*
 * Define HASSECURITY to restrict the listing of all open files to the
 * root user.  When HASSECURITY is defined, the non-root user may list
 * only files whose processes have the same user ID as the real user ID
 * (the one that its user logged on with) of the lsof process.
 */

/* #define	HASSECURITY	1	*/


/*
 * If HASSECURITY is defined, define HASNOSOCKSECURITY to allow users
 * restricted by HASSECURITY to list any open socket files, provide their
 * listing is selected by the "-i" option.
 */

/* #define	HASNOSOCKSECURITY	1	*/


/*
 * HASSETLOCALE is defined for those dialects that have <locale.h> and
 * setlocale().
 *
 * If the dialect also has wide character support for language locales,
 * HASWIDECHAR activates lsof's wide character support and WIDECHARINCL
 * defines the header file (if any) that must be #include'd to use the
 * mblen() and mbtowc() functions.
 *
 * If a special definition is required (e.g., for Solaris) before #include'ing
 * <ctype.h>, do that here.
 */

#define	HASSETLOCALE	1
#define	HASWIDECHAR	1
#define	WIDECHARINCL	<wchar.h>
#define __XPG4_CHAR_CLASS__
#include	<ctype.h>
#undef __XPG4_CHAR_CLASS__


/*
 * HASSNODE is defined for those dialects that have snodes.
 */

#define	HASSNODE	1


/*
 * HASTASKS is defined for those dialects that have task reporting support.
 */

/* #define	HASTASKS	1 */


/*
 * HASSOOPT, HASSOSTATE and HASTCPOPT define the availability of information
 * on socket options (SO_* symbols), socket states (SS_* symbols) and TCP
 * options.
 */

# if	solaris>=20600
#define	HASSOOPT	1	/* has socket option information */
/* #define	HASSOSTATE	1	has socket state information */
#define	HASTCPOPT	1	/* has TCP options or flags */
# endif	/* solaris>=20600 */


/*
 * Define HASSPECDEVD to be the name of a function that handles the results
 * of a successful stat(2) of a file name argument.
 *
 * For example, HASSPECDEVD() for Darwin makes sure that st_dev is set to
 * what stat("/dev") returns -- i.e., what's in DevDev.
 *
 * The function takes two arguments:
 *
 *	1: pointer to the full path name of file
 *	2: pointer to the stat(2) result
 *
 * The function returns void.
 */

/* #define	HASSPECDEVD	process_dev_stat */


/*
 * HASSTREAMS is defined for those dialects that support streams.
 */

#define	HASSTREAMS	1


/*
 * HASTCPTPIQ is defined for dialects where it is possible to report the
 * TCP/TPI Recv-Q and Send-Q values produced by netstat.
 */

# if	solaris==20300 || solaris>=20500
#define	HASTCPTPIQ	1
# endif	/* solaris==20300 || solaris>=20500 */


/*
 * HASTCPTPIW is defined for dialects where it is possible to report the
 * TCP/TPI send and receive window sizes produced by netstat.
 */

# if	solaris==20300 || solaris>=20500
#define	HASTCPTPIW	1
# endif	/* solaris==20300 || solaris>=20500 */


/*
 * HASTCPUDPSTATE is defined for dialects that have TCP and UDP state
 * support -- i.e., for the "-stcp|udp:state" option and its associated
 * speed improvements.
 */

#define	HASTCPUDPSTATE	1


/*
 * HASTMPNODE is defined for those dialects that have tmpnodes.
 */

#define	HASTMPNODE	1


/*
 * HASVNODE is defined for those dialects that use the Sun virtual file system
 * node, the vnode.  BSD derivatives usually do; System V derivatives prior to
 * R4 usually don't.
 */

#define	HASVNODE	1


/*
 * HASXOPT is defined for those dialects that have an X option.  It
 * defines the text for the usage display.  HASXOPT_VALUE defines the
 * option's default binary value -- 0 or 1.
 */

# if	solaris>=10000 && defined(HAS_V_PATH)
#define	HASXOPT		"report deleted paths"
#define	HASXOPT_VALUE	0
# endif	/* solaris>=10000 && defined(HAS_V_PATH) */


/*
 * INODETYPE and INODEPSPEC define the internal node number type and its
 * printf specification modifier.  These need not be defined and lsof.h
 * can be allowed to define defaults.
 *
 * These are defined here, because they must be used in dlsof.h.
 */

# if	solaris>=20501
#define	INODETYPE	unsigned long long
					/* inode number internal storage type */
#define	INODEPSPEC	"ll"		/* INODETYPE printf specification
					 * modifier */
# endif	/* solaris>=20501 */


/*
 * UID_ARG defines the size of a User ID number when it is passed
 * as a function argument.
 */

#define	UID_ARG	long


/*
 * Each USE_LIB_<function_name> is defined for dialects that use the
 * <function_name> in the lsof library.
 *
 * Note: other definitions and operations may be required to condition the
 * library function source code.  They may be found in the dialect dlsof.h
 * header files.
 */

#define	USE_LIB_CKKV				1	/* ckkv.c */
#define	USE_LIB_COMPLETEVFS			1	/* cvfs.c */
#define	USE_LIB_FIND_CH_INO			1	/* fino.c */
/* #define	USE_LIB_IS_FILE_NAMED		1	   isfn.c */
#define	USE_LIB_LKUPDEV				1	/* lkud.c */
/* #define	USE_LIB_PRINTDEVNAME		1	   pdvn.c */
/* #define	USE_LIB_PROCESS_FILE		1	   prfp.c */
/* #define	USE_LIB_PRINT_TCPTPI		1	   ptti.c */
/* #define	USE_LIB_READDEV			1	   rdev.c */
/* #define	USE_LIB_READMNT			1	   rmnt.c */
/* #define	USE_LIB_REGEX			1	   regex.c */
/* #define	USE_LIB_RNAM			1	   rnam.c */

# if	solaris<90000
#define	USE_LIB_RNCH				1	/* rnch.c */
# endif	/* solaris<90000 */

/* #define	USE_LIB_RNMH			1	   rnmh.c */

# if	solaris<20600
#define	USE_LIB_SNPF				1	/* snpf.c */
# else	/* solaris>=20600 */
#define	snpf	snprintf	   /* use the system's snprintf() */
# endif	/* solaris<20600 */


/*
 * WARNDEVACCESS is defined for those dialects that should issue a warning
 * when lsof can't access /dev (or /device) or one of its sub-directories.
 * The warning can be inhibited by the lsof caller with the -w option.
 */

#define	WARNDEVACCESS	1


/*
 * WARNINGSTATE is defined for those dialects that want to suppress all lsof
 * warning messages.
 */

/* #define	WARNINGSTATE	1	warnings are enabled by default */


/*
 * WILLDROPGID is defined for those dialects whose lsof executable runs
 * setgid(not_real_GID) and whose setgid power can be relinquished after
 * the dialect's initialize() function has been executed.
 */

#define	WILLDROPGID	1


/*
 * zeromem is a macro that uses bzero or memset.
 */

#define	zeromem(a, l)		memset((void *)a, 0, l)

#endif	/* !defined(LSOF_MACHINE_H) */
@


1.47
log
@Revision 4.85
@
text
@d34 1
a34 1
 * $Id: machine.h,v 1.46 2011/08/07 22:53:42 abe Exp abe $
d53 1
d55 7
a61 2
 * Define a dummy aio_req structure for Solaris >= 10, because #include'ing
 * <sys/aio_req.h> with _KERNEL defined creates too many problems.
d66 2
@


1.46
log
@Revision 4.85, part 1
@
text
@d34 1
a34 1
 * $Id: machine.h,v 1.45 2010/07/29 16:03:00 abe Exp abe $
d207 7
@


1.45
log
@Revision 4.84
@
text
@d34 1
a34 1
 * $Id: machine.h,v 1.44 2009/03/25 19:22:16 abe Exp abe $
a36 1

d38 1
a38 1
#define	LSOF_MACHINE_H	1
d40 1
a40 2

# if	solaris>=90000
d43 3
a45 11
 * version 9 and above before _KMEMUSER or _KERNEL are defined to avoid a
 * conflict with the use of lgrp_root as an external symbol in <sys/lgrp.h>
 * and a macro in <sys/lgrp_user.h>.  Some instances of those Solaris
 * versions do not need the early #include.
 *
 * I have not been able to devise a Configure script test that can determine
 * when <sys/lgrp.h> must be #include'd early.
 *
 * If compiling lsof on your version of Solaris reports an error in the
 * redefinition of the lgrp_root identifier, try enabling the folowing
 * #include.
d48 2
a49 2
/* #include <sys/lgrp.h> */
# endif	/* solaris>=90000 */
d83 22
@


1.44
log
@Revision 4.82
@
text
@d34 1
a34 1
 * $Id: machine.h,v 1.43 2008/10/21 16:16:42 abe Exp abe $
d44 12
a55 3
 * <sys/lgrp.h> must be #include'd for Solaris >= 9 before _KMEMUSER or
 * _KERNEL are defined to avoid a conflict with the use of lgrp_root as
 * an external symbol in <sys/lgrp.h> and a macro in <sys/lgrp_user.h>.
d58 1
a58 1
#include <sys/lgrp.h>
d537 7
@


1.43
log
@Revision 4.81
@
text
@d34 1
a34 1
 * $Id: machine.h,v 1.42 2007/04/24 16:23:15 abe Exp abe $
d60 9
d392 1
d394 2
@


1.42
log
@Revision 4.78
@
text
@d34 1
a34 1
 * $Id: machine.h,v 1.41 2006/03/27 22:57:33 abe Exp abe $
d574 9
@


1.41
log
@Revision 4.77
@
text
@d34 1
a34 1
 * $Id: machine.h,v 1.40 2005/08/29 10:22:41 abe Exp abe $
d79 1
@


1.40
log
@Revision 4.76
@
text
@d34 1
a34 1
 * $Id: machine.h,v 1.39 2005/08/08 19:55:41 abe Exp abe $
d197 8
d209 4
d595 4
a598 2
/* #define	HASXOPT		"help text for X option" */
/* #define	HASXOPT_VALUE	1 */
@


1.39
log
@Revision 4.76
@
text
@d34 1
a34 1
 * $Id: machine.h,v 1.38 2005/05/11 12:54:26 abe Exp abe $
d275 10
d402 4
a405 1
#else	/* solaris<10 || !defined(HAS_V_PATH) */
d407 1
@


1.38
log
@Revision 4.75
@
text
@d34 1
a34 1
 * $Id: machine.h,v 1.37 2004/12/30 18:42:59 abe Exp abe $
d260 1
a260 1
 * that are complete -- i.e., have terminating sem-colons -- so the macro is
a270 4
#else	/* solaris<10 || !defined(HAS_V_PATH) */
/* #define HASLFILEADD int ... */
/* #define	CLRLFILEADD(lf)	(lf)->... = (type)NULL;	*/
/* #define SETLFILEADD Lf->...	*/
d361 1
d573 16
@


1.37
log
@Revision 4.74
@
text
@d34 1
a34 1
 * $Id: machine.h,v 1.36 2004/10/17 21:56:28 abe Exp abe $
d251 14
a264 5
 * in struct lfile.  The HASLFILEADD definition is a macro that defines
 * them.  If any of the additional elements need to be preset in the
 * alloc_lfile() function of proc.c, the SETLFILEADD macro may be defined
 * to do that.  The HASXOPT definition may be used to select the conditions
 * under which private lfile elements are used.
d269 2
d273 2
a276 1
/* #define SETLFILEADD Lf->... */
a277 1

@


1.36
log
@Revision 4.73
@
text
@d34 1
a34 1
 * $Id: machine.h,v 1.35 2004/07/06 19:17:17 abe Exp abe $
d258 3
d262 2
d293 3
d297 1
d382 3
d386 1
@


1.35
log
@Revision 4.72
@
text
@d34 1
a34 1
 * $Id: machine.h,v 1.34 2004/02/24 13:47:19 abe Exp abe $
d443 8
d454 5
@


1.34
log
@Revision 4.71
Add "-Tf" support.
@
text
@d34 1
a34 1
 * $Id: machine.h,v 1.33 2004/01/14 11:29:31 abe Exp abe $
d262 8
@


1.33
log
@Revision 4.70
@
text
@d33 5
a88 5
 * $Id: machine.h,v 1.32 2003/10/13 13:30:04 abe Exp abe $
 */


/*
d93 1
a93 1
#if	solaris>=20501
d95 1
a95 1
#endif	/* solaris>=20501 */
d103 1
a103 1
#if	solaris<100000
d105 1
a105 1
#else	/* solaris>=100000 */
d107 1
a107 1
#endif	/* solaris<100000 */
d115 1
a115 1
#if	solaris<20500
d117 1
a117 1
#endif	/* solaris<20500 */
d448 13
d490 1
a490 1
#if	solaris==20300 || solaris>=20500
d492 1
a492 1
#endif	/* solaris==20300 || solaris>=20500 */
d500 1
a500 1
#if	solaris==20300 || solaris>=20500
d502 1
a502 1
#endif	/* solaris==20300 || solaris>=20500 */
@


1.32
log
@Revision 4.69
Solaris 10 port
@
text
@d37 1
a37 1
# if	solaris>=100000
d39 1
a39 1
 * <sys/lgrp.h> must be #include'd for Solaris >= 10 before _KMEMUSER or
d45 1
a45 1
# endif	/* solaris>=10000 */
d48 10
d84 1
a84 1
 * $Id: machine.h,v 1.31 2002/12/03 18:23:08 abe Exp abe $
@


1.31
log
@Revision 4.66
@
text
@d37 11
d50 1
a50 1
 * <sys/poll.h> must be #include'd for Solaris 2.6 while _KMEMUSER is
d74 1
a74 1
 * $Id: machine.h,v 1.30 2002/06/17 01:42:31 abe Exp abe $
d89 12
a264 3
 * HASNCAPID is defined for those dialects with a searchable kernel name
 * cache whose cache and vnodes are linked by a capability ID.
 *
a270 1
/* #define	HASNCAPID	1	*/
@


1.30
log
@Revision 4.64
@
text
@d63 1
a63 1
 * $Id: machine.h,v 1.29 2002/02/26 15:22:16 abe Exp abe $
d392 9
@


1.29
log
@Revision 4.62
@
text
@d63 1
a63 1
 * $Id: machine.h,v 1.28 2001/06/06 15:36:37 abe Exp abe $
d509 2
d512 2
@


1.28
log
@Revision 4.57
@
text
@d63 1
a63 1
 * $Id: machine.h,v 1.27 2001/02/13 14:19:21 abe Exp abe $
d502 1
a502 1
/* #define	USE_LIB_PRINTCHDEVNAME		1	   pdvn.c */
@


1.27
log
@Revision 4.55
@
text
@d63 1
a63 1
 * $Id: machine.h,v 1.26 2000/12/05 20:28:07 abe Exp abe $
d392 8
@


1.26
log
@Revision 4.53
@
text
@d63 1
a63 1
 * $Id: machine.h,v 1.25 2000/12/05 20:24:07 abe Exp abe $
d499 1
@


1.25
log
@Revision 4.53
@
text
@d63 1
a63 1
 * $Id: machine.h,v 1.24 2000/12/04 14:35:13 abe Exp abe $
a401 10
 * HASSTREAMS is defined for those dialects that support streams.
 */

#define	HASSTREAMS	1


/*


/*
d417 10
@


1.24
log
@Revision 4.53
@
text
@d63 1
a63 1
 * $Id: machine.h,v 1.23 2000/11/03 18:35:55 abe Exp abe $
d409 18
@


1.23
log
@Revision 4.52
@
text
@d2 1
a2 1
 * machine.h - SunOS (Solaris 1.x and 2.x)  definitions for lsof
d37 1
a37 1
# if	defined(solaris) && solaris>=20600
d59 1
a59 1
# endif	/* defined(solaris) && solaris>=20600 */
d63 1
a63 1
 * $Id: machine.h,v 1.22 2000/08/01 15:21:11 abe Exp abe $
d72 1
a72 1
#if	!defined(solaris) || (defined(solaris) && solaris>=20501)
d74 1
a74 1
#endif	/* !defined(solaris) || (defined(solaris) && solaris>=20501) */
d82 1
a82 1
#if	defined(solaris) && solaris<20500
d84 1
a84 1
#endif	/* defined(solaris) && solaris<20500 */
d189 1
a189 3
#if	!defined(solaris)
#define	HASINODE	1
#endif	/* !defined(solaris) */
a252 1
#if	defined(solaris)
a253 1
#endif	/* defined(solaris) */
a306 1
#if	defined(solaris)
a307 4
#else	/* !defined(solaris) */
#define	HASPRINTINO	print_ino
#endif	/* defined(solaris) */

a371 1
# if	defined(solaris)
a374 1
# endif	/* defined(solaris) */
d413 1
a413 1
#if	!defined(solaris) || solaris==20300 || solaris>=20500
d415 1
a415 1
#endif	/* !defined(solaris) || solaris==20300 || solaris>=20500 */
d423 1
a423 1
#if	defined(solaris) && (solaris==20300 || solaris>=20500)
d425 1
a425 1
#endif	/* defined(solaris) && (solaris==20300 || solaris>=20500) */
d478 1
a478 5

#if	!defined(solaris)
#define	USE_LIB_PRINT_TCPTPI			1	/* ptti.c */
#endif	/* !defined(solaris) */

d485 1
a485 1
# if	!defined(solaris) || (defined(solaris) && solaris<20600)
d487 1
a487 1
# else	/* defined(solaris) && solaris>=20600) */
d489 1
a489 1
# endif	/* !defined(solaris) || (defined(solaris) && solaris<20600) */
a521 1
# if	defined(solaris)
a522 3
# else	/* !defined(solaris) */
#define	zeromem(a, l)		memset((char *)a, 0, l)
# endif	/* defined(solaris) */
@


1.22
log
@Revision 4.51
Convert to snpf().
@
text
@d63 1
a63 1
 * $Id: machine.h,v 1.21 2000/03/16 15:56:27 abe Exp abe $
d246 4
d254 6
@


1.21
log
@sun
@
text
@d63 1
a63 1
 * $Id: machine.h,v 1.20 1999/10/22 08:23:52 abe Exp abe $
d489 6
@


1.20
log
@Revision 4.46
@
text
@d63 1
a63 1
 * $Id: machine.h,v 1.19 99/07/08 14:51:05 abe Exp Locker: abe $
d241 2
a242 1
 * that lsof can search.
d339 9
d351 8
a358 2
 * HASFSTYPE is defined for those systems that have a file system type
 * string, st_fstype, in the stat() buffer.
@


1.19
log
@Revision 4.45
@
text
@d51 8
d63 1
a63 1
 * $Id: machine.h,v 1.18 99/01/25 07:18:39 abe Exp Locker: abe $
@


1.18
log
@Revision 4.40
@
text
@d33 2
a34 2
#if	!defined(MACHINE_H)
#define	MACHINE_H	1
d55 1
a55 1
 * $Id: machine.h,v 1.17 98/12/28 19:34:56 abe Exp Locker: abe $
d125 1
a125 1
/* #define	HASSYSDC	"/var/adm/lsof.dc" */
d259 1
a259 1
/* #define	HASPIPEFN	process_pipe */
d298 3
a300 3
/* #define	HASPRINTNM	print_nm	*/
/* #define	HASPRINTOFF	print_off	*/
/* #define	HASPRINTSZ	print_sz	*/
d313 1
a313 1
/* #define	HASPRIVFILETYPE	process_shmf	*/
d503 1
a503 1
#endif	/* !defined(MACHINE_H) */
@


1.17
log
@Revision 4.39
@
text
@d55 1
a55 1
 * $Id: machine.h,v 1.16 98/12/28 09:35:42 abe Exp Locker: abe $
d57 10
@


1.16
log
@Revision 4.39
@
text
@d55 1
a55 1
 * $Id: machine.h,v 1.15 98/06/29 15:49:44 abe Exp Locker: abe $
d198 13
@


1.15
log
@Revision 4.35
@
text
@d55 1
a55 1
 * $Id: machine.h,v 1.14 98/06/25 07:22:16 abe Exp Locker: abe $
d141 12
a197 24


/*
 * HASLFILEADD is defined for those dialects that need additional elements
 * in struct lfile.  The HASLFILEADD definition is a macro that defines
 * them.  If any of the additional elements need to be preset in the
 * alloc_lfile() function of proc.c, the SETLFILEADD macro may be defined
 * to do that.  The HASXOPT definition may be used to select the conditions
 * under which private lfile elements are used.
 *
 * Field identifiers 1 through 9 are reserved for dialect-specific field
 * output.  Define the string HASFIELDAP<x> as the help (-F?) name of the
 * private field and LISTLFIELAP<x> as a macro to list the field output.
 * (<x> is the field identifier character.)  HASFIELDAP<x> is used in proc.c
 * and store.c; LISTFIELDAP<x>, in proc.c.
 *
 * See ../dialectx/ptx for an example of the use of HASLFILEADD, SETLFILEADD,
 * and HASXOPT.
 */

/* #define HASLFILEADD <macro of new element definitions>; */
/* #define SETLFILEADD <macro of code to preset new elements>; */
/* #define HASFIELDAP1 <string name of field for -F? output> */
/* #define LISTLFILEAP1 <macro to list field output>; */
@


1.14
log
@Revision 4.34
Check kernel identity.
@
text
@d55 1
a55 1
 * $Id: machine.h,v 1.13 98/03/23 07:55:03 abe Exp Locker: abe $
d170 8
@


1.13
log
@Revision 4.29
Another BIND header file work-around
@
text
@d55 1
a55 1
 * $Id: machine.h,v 1.12 98/03/18 16:20:21 abe Exp Locker: abe $
d429 1
@


1.12
log
@Revision 4.29
Remove rvfs.c reference.
@
text
@d46 5
a50 1
#include	<sys/poll.h>
d55 1
a55 1
 * $Id: machine.h,v 1.11 98/02/16 19:55:09 abe Exp Locker: abe $
d477 5
a481 1
#define	zeromem(a, l)		memset(a, 0, l)
@


1.11
log
@Revision 4.26
@
text
@d51 1
a51 1
 * $Id: machine.h,v 1.10 97/12/11 16:01:47 abe Exp Locker: abe $
a437 1
/* #define	USE_LIB_READVFS			1	   rvfs.c */
@


1.10
log
@Revision 4.22
@
text
@d51 1
a51 1
 * $Id: machine.h,v 1.9 97/11/06 09:23:57 abe Exp Locker: abe $
d319 3
a321 3
 * The HASPROCFS definition may be accompanied by the HASPINFO definition.
 * HASPINFO names the subdirectory of HASPROCFS that contains read-only
 * information (typically /pinfo).
d325 3
a327 3
#define		HASPROCFS	"proc"
#define		HASFSTYPE	1
/* #define		HASPINFO	"/pinfo" */
a424 1
#define	USE_LIB_CK_FILE_ARG			1	/* ckfa.c */
@


1.9
log
@Revision 4.20
@
text
@d51 1
a51 1
 * $Id: machine.h,v 1.8 97/10/24 07:58:45 abe Exp Locker: abe $
d244 8
@


1.8
log
@Revision 4.18
@
text
@d51 1
a51 1
 * $Id: machine.h,v 1.7 97/09/23 09:52:02 abe Exp Locker: abe $
d284 12
@


1.7
log
@Revision 4.16
Expanded TCPTPI info support
@
text
@d51 1
a51 1
 * $Id: machine.h,v 1.6 97/07/22 10:43:52 abe Exp Locker: abe $
d255 18
a411 1
/* #define	USE_LIB_PRINT_FILE		1	   prtf.c */
@


1.6
log
@Revision 4.14
Inhibit use of readinode() for Solaris.
@
text
@d51 1
a51 1
 * $Id: machine.h,v 1.5 97/05/28 16:06:58 abe Exp Locker: abe $
d325 20
d395 5
@


1.5
log
@Revision 4.09
@
text
@d51 1
a51 1
 * $Id: machine.h,v 1.4 97/04/23 15:53:07 abe Exp Locker: abe $
d151 2
a152 1
 * HASINODE is defined for those dialects that have inodes.
d155 1
d157 1
@


1.4
log
@Revision 4.05
@
text
@d51 1
a51 1
 * $Id: machine.h,v 1.3 97/04/16 07:43:48 abe Exp Locker: abe $
d377 1
@


1.3
log
@Revision 4.04
@
text
@d51 1
a51 1
 * $Id: machine.h,v 1.2 97/04/07 08:27:05 abe Exp Locker: abe $
d53 10
@


1.2
log
@Revision 4.03
@
text
@d51 1
a51 1
 * $Id: machine.h,v 1.1 97/02/24 07:47:20 abe Exp Locker: abe $
d244 1
a244 1
 * used in common/prfp.frag to select the type's processing.
@


1.1
log
@Initial revision
@
text
@d51 1
a51 1
 * $Id$
d376 8
@
