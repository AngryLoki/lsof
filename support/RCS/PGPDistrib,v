head	1.29;
access;
symbols;
locks; strict;
comment	@# @;


1.29
date	2003.10.31.12.06.28;	author abe;	state Exp;
branches;
next	1.28;

1.28
date	2003.09.03.14.12.27;	author abe;	state Exp;
branches;
next	1.27;

1.27
date	2003.05.18.21.31.05;	author abe;	state Exp;
branches;
next	1.26;

1.26
date	2003.05.09.09.58.15;	author abe;	state Exp;
branches;
next	1.25;

1.25
date	2003.03.27.01.47.53;	author abe;	state Exp;
branches;
next	1.24;

1.24
date	2002.04.22.12.44.21;	author abe;	state Exp;
branches;
next	1.23;

1.23
date	2002.03.07.22.02.36;	author abe;	state Exp;
branches;
next	1.22;

1.22
date	2002.01.22.18.44.22;	author abe;	state Exp;
branches;
next	1.21;

1.21
date	2002.01.14.15.59.07;	author abe;	state Exp;
branches;
next	1.20;

1.20
date	2001.11.07.15.44.34;	author abe;	state Exp;
branches;
next	1.19;

1.19
date	2001.02.15.17.29.54;	author abe;	state Exp;
branches;
next	1.18;

1.18
date	2000.11.05.14.04.35;	author abe;	state Exp;
branches;
next	1.17;

1.17
date	2000.06.09.14.02.29;	author abe;	state Exp;
branches;
next	1.16;

1.16
date	2000.03.23.14.28.02;	author abe;	state Exp;
branches;
next	1.15;

1.15
date	99.11.28.06.57.43;	author abe;	state Exp;
branches;
next	1.14;

1.14
date	99.06.22.10.39.54;	author abe;	state Exp;
branches;
next	1.13;

1.13
date	99.05.11.07.00.23;	author abe;	state Exp;
branches;
next	1.12;

1.12
date	99.05.04.08.23.32;	author abe;	state Exp;
branches;
next	1.11;

1.11
date	98.11.25.23.05.43;	author abe;	state Exp;
branches;
next	1.10;

1.10
date	98.07.05.09.09.34;	author abe;	state Exp;
branches;
next	1.9;

1.9
date	98.02.16.08.11.49;	author abe;	state Exp;
branches;
next	1.8;

1.8
date	97.12.30.08.16.43;	author abe;	state Exp;
branches;
next	1.7;

1.7
date	97.12.07.15.15.24;	author abe;	state Exp;
branches;
next	1.6;

1.6
date	97.10.23.17.31.52;	author abe;	state Exp;
branches;
next	1.5;

1.5
date	97.07.17.13.10.40;	author abe;	state Exp;
branches;
next	1.4;

1.4
date	97.06.23.09.43.27;	author abe;	state Exp;
branches;
next	1.3;

1.3
date	97.06.01.15.14.37;	author abe;	state Exp;
branches;
next	1.2;

1.2
date	97.02.25.08.16.14;	author abe;	state Exp;
branches;
next	1.1;

1.1
date	97.02.24.16.52.36;	author abe;	state Exp;
branches;
next	;


desc
@Lsof version 4
@


1.29
log
@Convert from BSD to SYSV echo.
@
text
@#!/bin/ksh
#
# PGPDistrib -- make lsof 4.x PGP distribution files

# Define DEBUG to 1 in the environment to skip to the README file construction.
#
# Usage: PGPDistrib [edition]
#
#	edition		optional edition suffix to add to version number
#set -x	# DEBUG

if test "X$DEBUG" = "X"
then
  DEBUG=0
fi

HD=$HOME/src/lsof4
echo Changing to $HD
cd $HOME/src/lsof4

# Get version number.

V=`sed '/VN/s/.ds VN \(.*\)/\1/' version`
if test $? -ne 0
then
  echo $V
  exit 1
fi

# Handle optional edition suffix.

if test $# -gt 0
then
  if test $# -gt 1
  then
    echo "Usage: PGPDistrib [edition]"
    exit 1
  fi
  V=${V}$1
fi

# Define directory and archive file names.

DN=lsof_${V}
DT=${DN}.tar
M=00MANIFEST
MC=${DN}/manifest_check.${V}
R=README.lsof_${V}
RM=00.README.FIRST_${V}
SF=support/lsof.README
DSF=RELEASE.SUMMARY_${V}
SN=${DN}_src
SD=${DN}/$SN
ST=${SN}.tar
echo "Creating lsof ${V} PGP distribution ..."

# Define source files to copy.

F="00.README.FIRST 00CREDITS 00DCACHE 00DIALECTS 00DIST 00FAQ 00LSOF-L 00MANIFEST 00PORTING 00QUICKSTART 00README 00TEST 00XCONFIG AFSConfig Configure Customize Inventory dialects arg.c lib lsof.h lsof_fields.h main.c misc.c node.c print.c proc.c proto.h regex.h scripts store.c tests usage.c version"
MS=Lsof.8
MD=${DN}/${SN}/lsof.8
MF=${DN}/${SN}/lsof.man

# Set exit cleanup trap.

trap 'rm -rf $DN; exit' 1 2 3 15

# Create source directory.

if test $DEBUG -eq 0
then
  echo Creating $DN and ${DN}/${SN}
  rm -rf $DN
  mkdir $DN
  (cd $DN; mkdir $SN)
  echo "Copying to ${SD}:\c"
  for i in $F
  do
    echo " $i\c"
    cp -rp $i $SD
  done
  echo " ... done"
  echo "Removing extraneous stuff from lib ...\c"
  find $SD/lib -name OLD -exec rm -rf {} \; > /dev/null 2>&1
  find $SD/lib -name RCS -exec rm -rf {} \; > /dev/null 2>&1
  find $SD/lib -name NEW -exec rm -rf {} \; > /dev/null 2>&1
  rm -rf $SD/lib/Makefile
  rm -rf $SD/lib/*.[oa]
  echo " done"
  echo "Removing extraneous stuff from dialects ...\c"
  find $SD/dialects -name OLD -exec rm -rf {} \; > /dev/null 2>&1
  find $SD/dialects -name RCS -exec rm -rf {} \; > /dev/null 2>&1
  find $SD/dialects -name NEW -exec rm -rf {} \; > /dev/null 2>&1
  find $SD/dialects -name Makefile.local -exec rm -f {} \; > /dev/null 2>&1
  find $SD/dialects -name distfile.kvm -exec rm -f {} \; > /dev/null 2>&1
  find $SD/dialects -name support -exec rm -rf {} \; > /dev/null 2>&1
  echo " done"
  echo "Removing extraneous stuff from scripts ...\c"
  find $SD/scripts -name OLD -exec rm -rf {} \; > /dev/null 2>&1
  find $SD/scripts -name RCS -exec rm -rf {} \; > /dev/null 2>&1
  find $SD/scripts -name NEW -exec rm -rf {} \; > /dev/null 2>&1
  echo " done"
  echo "Removing extraneous stuff from tests ...\c"
  find $SD/tests -name OLD -exec rm -rf {} \; > /dev/null 2>&1
  find $SD/tests -name RCS -exec rm -rf {} \; > /dev/null 2>&1
  find $SD/tests -name NEW -exec rm -rf {} \; > /dev/null 2>&1
  rm -rf $SD/tests/config.* $SD/tests/*.o
  rm -rf $SD/tests/LTbasic $SD/tests/LTbigf $SD/tests/LTdnlc
  rm -rf $SD/tests/LTlock $SD/tests/LTnfs $SD/tests/LTnlink
  rm -rf $SD/tests/LTsock $SD/tests/LTszoff $SD/tests/LTunix
  echo " done"
fi

# Create manual page files.

if test $DEBUG -eq 0
then
  echo Producing $MD
  soelim < $MS > $MD
  echo Producing $MF
  nroff -man $MD | colcrt - | cat -s > $MF
fi

# Check distribution directory for completeness.

if test $DEBUG -eq 0
then
  echo "Checking $SD for completeness"
  rm -f $MC
  (cd $SD; ls -FR) > $MC
  diff $M $MC > /dev/null
  if test $? -ne 0
  then
    (echo Some files may be missing.; echo diff $M $MC; diff $M $MC) | less
    exit 1
  fi
fi

# Create source distribution tar file.

if test $DEBUG -eq 0
then
  echo Creating $ST in $DN
  (cd $DN; tar cf $ST $SN; ls -l $ST)
  echo Removing $SD
  rm -rf $SD
fi

# Create source distribution README.lsof_<version> file.

if test $DEBUG -eq 0
then
  echo Creating $R for $DT
  rm -f ${DN}/$R
  EO=${DN}/$R
else
  echo "==== The $R file ====="
  EO=""
fi
cat > $EO << END_README_1

                Information About This Lsof Distribution


What You Have
=============

If you got this far without being confused, then you are probably
familiar with the construction of the lsof distribution or you have
read RELEASE.SUMMARY_${V}.  If either is the case, please skip to
the Inventory section.  If you haven't read RELEASE.SUMMARY_${V},
I suggest you do it now, because it explains how the lsof distribution
is constructed and other useful things about lsof, including a
summary of changes for the past few lsof revisions.

Even though you may have thought you were getting lsof.tar.gz or
lsof.tar.Z with ftp, you really got ${DT}.gz or ${DT}.Z.
That's because the pair of lsof.tar.* files are symbolic links
to their longer-named counterparts.

The gzip'd or compressed tar files with lsof_, followed by a number,
are wrapper archives, designed to package the lsof source archive,
this file, other documentation files, and a PGP authentication
certificate together.

The number, ${V}, is the lsof revision number.  When you gunzip'd
or uncompressed ${DT}.* and used tar to unpack ${DT},
you got ${RM}, describing the contents of ${DN},
${R}, ${ST}, and ${ST}.asc,
identified with the revision number.  You're reading ${R}.
${ST}.asc is a PGP certificate that authenticates the
lsof source archive, ${ST}.

After you read the Inventory and Security sections, and hopefully
after you check the PGP certificate, unpack the ${ST}
source archive and you will get a sub-directory, named ${SN},
that contains the lsof ${V} source distribution.


Inventory
=========

Once you have unpacked ${ST}.tar, you can check
${SN} for completeness by changing to that sub-directory
and running the Inventory script.  The ${SN}/Configure
script runs the Inventory script, too.  The Configure script also
calls a customization script, called Customize.  You can direct
Configure to avoid calling Inventory and Customize with the -n
option.

See the Distribution Contents section of the 00DIST file and The
Inventory Script section of the 00README file for more information
on the contents of the lsof distribution, and the Configure,
Customize and Inventory scripts.  The 00DIST and 00README files
will be found in the ${SN} sub-directory you just created.


Security
========

The md5 checksum for $ST is:

END_README_1
echo "  \c" >> $EO
if test $DEBUG -eq 1
then
  echo "MD5 checksum of $ST would go here." >> $EO
else
  (cd $DN; md5 $ST) >> $EO
fi
cat >> $EO << END_README_2

The md5 checksum tool may be obtained from:

  ftp://ftp.cerias.purdue.edu/pub/tools/unix/crypto/md5

The old-style sum(1) checksum for $ST (Please read
the next paragraph if you don't get this value.) is:

END_README_2
echo "  \c" >> $EO
if test $DEBUG -eq 1
then
  echo "Sum checksum of $ST would go here." >> $EO
else
  sum ${DN}/$ST >> $EO
fi
cat >> $EO << END_README_3

If your dialect's sum(1) program defaults to the new style algorithm
(e.g., Solaris), you may have to use its -r option (or use the
Solaris /usr/ucb/sum).  If your Unix dialect doesn't have a sum(1)
program (e.g., FreeBSD, or NetBSD), use its cksum(1) program with
the -o1 option to get an old-style checksum.  You may also need to
ignore the block count, depending on the block size used on your
your system (i.e., 512 or 1,024).  The sum(1) that produced the
above checksum considers block size to be 1,024; in contrast the
Solaris sum(1) program reports block size as 512.

$ST.asc is a PGP signature file, using my public key.
My key may be available on some public key servers under the name:

  Victor A. Abell <abe@@cc.purdue.edu>

You may also find it at:

  ftp://lsof.itap.purdue.edu/pub/tools/unix/lsof/Victor_A_Abell.pgp

Get my key and install it in your public key ring.  Then use this
command to check the signature of $ST:

  pgp $ST.asc $ST

Do NOT use gpg.  It is not gracefully backwards compatible with my
ten year old PGP key.  Use a PGP version from 2.6.2 through 6.5.2
with my PGP key.

If the signatures don't match, $ST is suspect.  Report
the problem to me <abe@@purdue.edu>.

If you don't have PGP, you can compare the md5 checksum of
$ST to the value listed in this file.  However, that
is a less reliable authentication method, since it can't detect
changes to both $ST and md5 checksum value listed
in this tile.

Victor A. Abell <abe@@purdue.edu>
END_README_3
date >> $EO

# Create PGP certificate.

if test $DEBUG -eq 0
then
  echo Creating $ST.asc in $DN
  (cd $DN; rm -f $ST.asc; pgp -sab $ST; chmod 644 $ST.asc)
fi

# Construct distribution's 00.README_FIRST_<version> file.

if test $DEBUG -eq 0
then
  echo Creating $RM for $DT
  rm -f ${DN}/$RM
  EO=${DN}/$RM
else
  echo ""
  echo "==== The $RM file ====="
  echo ""
  EO=""
fi
echo "A tour of the lsof_${V} distribution:" > $EO
echo "" >> $EO
echo "  $RM is this file." >> $EO
echo "" >> $EO
echo "  $R contains distribution and security information." >> $EO
echo "" >> $EO
echo "  ${DSF} contains a summary of the lsof ${V}" >> $EO
echo "  distribution." >> $EO
echo "" >> $EO
echo "  $ST is the lsof ${V} source tar archive." >> $EO
echo "" >> $EO
echo "  ${ST}.asc is a detached PGP certificate for" >> $EO
echo "  ${ST}." >> $EO
echo "" >> $EO
echo "I suggest you follow these steps:" >> $EO
echo "" >> $EO
echo "1.  Read ${RM}." >> $EO
echo "" >> $EO
echo "2.  Read ${R} and follow its instructions to verify" >> $EO
echo "    the authenticity of ${ST}." >> $EO
echo "" >> $EO
echo "3.  Unpack ${ST} -- use \`tar xf ${ST}\`." >> $EO
echo "    That will produce an ${SN} sub-directory." >> $EO
echo "" >> $EO
echo "4.  Change to the ${SN} sub-directory and read its" >> $EO
echo "    00.README.FIRST file." >> $EO
echo "" >> $EO
echo "Vic Abell <abe@@purdue.edu>" >> $EO
echo `date` >> $EO

# Create distribution summary file.

if test $DEBUG -eq 0
then
  echo Creating ${DN}/$DSF
  rm -f ${DN}/$DSF
  cp $SF ${DN}/$DSF
else
  echo Distribution summary file would be ${DN}/$DSF, copied from $SF.
fi

# Create distribution tar file, then compress and gzip it.

if test $DEBUG -eq 0
then
  rm -f $MC
  echo Creating $DT
  rm -f $DT
  tar cf $DT $DN
  ls -l $DT
  echo Gzipping $DT
  gzip -c $DT > support/$DT.gz
  ls -l support/$DT.gz
  echo compressing $DT
  compress < $DT > support/$DT.Z
  ls -l support/$DT.Z
  echo Removing $DN and $DT
  rm -rf $DN $DT
fi
echo "all done"
@


1.28
log
@Warn against gpg.
@
text
@d76 1
a76 1
  echo Copying to $SD
d79 1
a79 1
    echo -n " "$i
d83 1
a83 1
  echo -n "Removing extraneous stuff from lib ..."
d90 1
a90 1
  echo -n "Removing extraneous stuff from dialects ..."
d98 1
a98 1
  echo -n "Removing extraneous stuff from scripts ..."
d103 1
a103 1
  echo -n "Removing extraneous stuff from tests ..."
d224 1
a224 1
echo -n "  " >> $EO
d241 1
a241 1
echo -n "  " >> $EO
@


1.27
log
@Correct typo in generated 00.README.FIRST_<version>.
@
text
@d274 4
@


1.26
log
@Revision 4.68
Correct spelling error.
@
text
@d329 1
a329 1
echo "3.  Unpack ${ST} -- use \`tar xf ${ST}.tar\`." >> $EO
@


1.25
log
@Revision 4.67
Change vic.cc to lsof.itap.
@
text
@d188 1
a188 1
you got ${RM}, descibing the contents of ${DN},
@


1.24
log
@Revision 4.63
@
text
@d267 1
a267 1
  ftp://vic.cc.purdue.edu/pub/tools/unix/lsof/Victor_A_Abell.pgp
@


1.23
log
@Use find to locate things that need to be removed from the
distribution.
@
text
@d59 1
a59 1
F="00.README.FIRST 00CREDITS 00DCACHE 00DIALECTS 00DIST 00FAQ 00LSOF-L 00MANIFEST 00PORTING 00QUICKSTART 00README 00XCONFIG AFSConfig Configure Customize Inventory dialects arg.c lib lsof.h lsof_fields.h main.c misc.c node.c print.c proc.c proto.h regex.h scripts store.c usage.c version"
d84 3
a86 3
  find $SD/lib -name OLD -exec rm -rf {} \;
  find $SD/lib -name RCS -exec rm -rf {} \;
  find $SD/lib -name NEW -exec rm -rf {} \;
d91 6
a96 6
  find $SD/dialects -name OLD -exec rm -rf {} \;
  find $SD/dialects -name RCS -exec rm -rf {} \;
  find $SD/dialects -name NEW -exec rm -rf {} \;
  find $SD/dialects -name Makefile.local -exec rm -f {} \;
  find $SD/dialects -name distfile.kvm -exec rm -f {} \;
  find $SD/dialects -name support -exec rm -rf {} \;
d99 12
a110 3
  find $SD/scripts -name OLD -exec rm -rf {} \;
  find $SD/scripts -name RCS -exec rm -rf {} \;
  find $SD/scripts -name NEW -exec rm -rf {} \;
@


1.22
log
@Correct naming of summary file.
@
text
@d84 3
a86 6
  rm -rf $SD/lib/OLD
  rm -rf $SD/lib/OLD
  rm -rf $SD/lib/RCS
  rm -rf $SD/lib/RCS
  rm -rf $SD/lib/NEW
  rm -rf $SD/lib/NEW
a88 1
  rm -rf $SD/lib/*.[oa]
d91 6
a96 20
  rm -rf $SD/dialects/*/*/*/OLD
  rm -rf $SD/dialects/*/*/*/OLD
  rm -rf $SD/dialects/*/*/OLD
  rm -rf $SD/dialects/*/*/OLD
  rm -rf $SD/dialects/*/OLD
  rm -rf $SD/dialects/*/OLD
  rm -rf $SD/dialects/*/*/*/RCS
  rm -rf $SD/dialects/*/*/*/RCS
  rm -rf $SD/dialects/*/*/RCS
  rm -rf $SD/dialects/*/*/RCS
  rm -rf $SD/dialects/*/RCS
  rm -rf $SD/dialects/*/RCS
  rm -rf $SD/dialects/*/*/*/NEW
  rm -rf $SD/dialects/*/*/*/NEW
  rm -rf $SD/dialects/*/*/NEW
  rm -rf $SD/dialects/*/*/NEW
  rm -rf $SD/dialects/*/NEW
  rm -rf $SD/dialects/*/NEW
  rm -rf $SD/dialects/*/Makefile.LOCAL
  rm -rf $SD/dialects/*/distfile.kvm
d99 3
a101 6
  rm -rf $SD/scripts/OLD
  rm -rf $SD/scripts/OLD
  rm -rf $SD/scripts/RCS
  rm -rf $SD/scripts/RCS
  rm -rf $SD/scripts/NEW
  rm -rf $SD/scripts/NEW
@


1.21
log
@Revision 4.61
@
text
@d51 1
a51 1
DSF=${DN}/RELEASE.SUMMARY_${V}
d354 3
a356 3
  echo Creating $DSF
  rm -f $DSF
  cp $SF $DSF
d358 1
a358 1
  echo Distribution summary file would be $DSF, copied from $SF.
@


1.20
log
@Revision 4.60
@
text
@d10 1
d17 2
d44 2
a45 1
DT=lsof_${V}_W.tar
d47 1
a47 1
MC=manifest_check.${V}
a49 1
SD=lsof_${V}
d51 5
a55 3
DSF=RELEASE.SUMMARY_${V}
ST=${SD}.tar
echo "Creating ${SD} PGP distribution ..."
d61 2
a62 2
MD=lsof.8
MF=lsof.man
d66 1
a66 1
trap 'rm -rf $DSF $DT $MC $R $RM $SD $ST; exit' 1 2 3 15
d72 4
a75 2
  rm -rf $SD $ST
  mkdir $SD
d83 1
a83 1
  echo "Removing extraneous stuff from lib"
d93 2
a94 1
  echo "Removing extraneous stuff from dialects"
d115 2
a116 1
  echo "Removing extraneous stuff from scripts"
d123 1
d131 1
a131 1
  soelim < $MS > $SD/$MD
d133 1
a133 1
  nroff -man $SD/$MD | colcrt - | cat -s > $SD/$MF
d147 1
d151 1
a151 1
# Create source tar file.
d155 2
a156 2
  echo Creating $ST
  tar cf $ST $SD
d161 1
a161 1
# Create source distribution tar.
d166 2
a167 2
  rm -f $R
  EO=$R
d185 2
a186 2
is constructed and other useful things about lsof, including a summary
of changes for the past few lsof revisions.
d189 3
a191 3
lsof.tar.Z with ftp, you really got ${DT}.gz or
${DT}.Z.  That's because the pair of lsof.tar.* files
are symbolic links to their longer-named counterparts.
d194 3
a196 3
followed by _W, are wrapper archives, designed to package the lsof
source archive, this file, and a PGP authentication certificate
together.
d198 4
a201 3
The number, ${V}, is the lsof revision number.  When you gunzip'd or
uncompressed ${DT}.* and used tar to unpack ${DT},
you got ${R}, ${ST}.asc, and ${ST},
d203 2
a204 2
${ST}.asc is a PGP certificate that authenticates the lsof
source archive, ${ST}.
d207 3
a209 3
after you check the PGP certificate, unpack the lsof_${V}.tar source
archive and you will get a directory, named lsof_${V}, that contains
the lsof source distribution.
d215 7
a221 6
Once you have unpacked lsof_${V}.tar, you can check lsof_${V} for
completeness by changing to that directory and running the Inventory
script.  The lsof_${V}/Configure script runs the Inventory script,
too.  The Configure script also calls a customization script, called
Customize.  You can direct Configure to avoid calling Inventory
and Customize with the -n option.
d227 1
a227 1
will be found in lsof_${V}.
d236 1
a236 1
echo -n "        " >> $EO
d241 1
a241 1
  md5 $ST >> $EO
d249 2
a250 2
The old-style sum(1) checksum for $ST (Please read the
next paragraph if you don't get this value.) is:
d253 1
a253 1
echo -n "        " >> $EO
d258 1
a258 1
  sum $ST >> $EO
d275 1
a275 1
    Victor A. Abell <abe@@cc.purdue.edu>
d279 1
a279 1
    ftp://vic.cc.purdue.edu/pub/tools/unix/lsof/Victor_A_Abell.pgp
d284 1
a284 1
    pgp $ST.asc $ST
d289 5
a293 5
If you don't have PGP, you can check the md5 checksum of
$ST against the value listed at the beginning of this
file.  However, this is a less reliable authentication method, since
it can't detect changes to both $ST and this file's md5
checksum.  PGP is available from ftp://ftp.csua.berkeley.edu.
d303 2
a304 4
  echo Creating $ST.asc
  rm -f $ST.asc
  pgp -sab $ST
  chmod 644 $ST.asc
d312 2
a313 2
  rm -f $RM
  EO=$RM
d326 2
a327 1
echo "  ${DSF} contains a summary of the lsof ${V} distribution." >> $EO
d329 1
a329 1
echo "  $ST is the lsof ${V} tar archive." >> $EO
d331 2
a332 1
echo "  ${ST}.asc is a detached PGP certificate for lsof_${V}.tar." >> $EO
d336 1
a336 1
echo "1.  Read 00.README.FIRST_${V}." >> $EO
d338 2
a339 2
echo "2.  Read README.lsof_${V} and follow its instructions to verify" >> $EO
echo "    the authenticity of lsof_${V}.tar." >> $EO
d341 2
a342 1
echo "3.  Unpack lsof_${V}.tar -- use \`tar xf lsof_${V}.tar\`." >> $EO
d344 2
a345 2
echo "4.  Change to the lsof_${V} subdirectory and read its 00.README.FIRST" >> $EO
echo "    file." >> $EO
d361 1
a361 1
# Create wrapper tar file, then compress and gzip it.
d365 1
d368 1
a368 1
  tar cf $DT $DSF $R $RM $ST $ST.asc
d376 2
d379 1
a379 8

# Clean up.

if test $DEBUG -eq 0
then
  echo Removing $DSF $DT $R $RM $ST and $ST.asc
  rm -rf $DSF $DT $MC $R $RM $ST $ST.asc
fi
@


1.19
log
@Add regex.h to copy from root directory.
@
text
@d105 1
a105 1
  rm -rf $SD/dialects/*/Makefile.PUCC
@


1.18
log
@revision 4.52
@
text
@d54 1
a54 1
F="00.README.FIRST 00CREDITS 00DCACHE 00DIALECTS 00DIST 00FAQ 00LSOF-L 00MANIFEST 00PORTING 00QUICKSTART 00README 00XCONFIG AFSConfig Configure Customize Inventory dialects arg.c lib lsof.h lsof_fields.h main.c misc.c node.c print.c proc.c proto.h scripts store.c usage.c version"
@


1.17
log
@Revision 4.50
@
text
@a115 6
# !!!DEBUG!!!   !!!DEBUG!!!   !!!DEBUG!!!   !!!DEBUG!!!
#
# DEBUG: temporarily remove the hpux/pstat subdirectory.

rm -rf $SD/dialects/hpux/pstat	# DEBUG

@


1.16
log
@Revision 4.49
@
text
@d240 1
a240 1
  ftp://coast.cs.purdue.edu/pub/mirrors/cert.org/tools/md5
@


1.15
log
@Update email address.
@
text
@d238 3
a240 1
The md5 checksum tool may be obtained from ftp://ftp.cert.org.
@


1.14
log
@Temporarily remove the hpux/pstat subdirectory.
@
text
@d286 1
a286 1
Victor A. Abell <abe@@cc.purdue.edu>
@


1.13
log
@Make sure RCS subdirectories are rm'd.
@
text
@d116 6
@


1.12
log
@Clean out dialects subdirectories
@
text
@d78 1
d80 1
d82 1
d85 1
d88 1
d90 1
d92 1
d94 1
d96 1
d98 1
d100 1
d102 1
d104 1
d109 1
d111 2
@


1.11
log
@Post-revision 4.38 cleanup
@
text
@d83 2
d86 2
a87 1
  rm -rf $SD/dialects/*/*/OLD
d89 2
a90 1
  rm -rf $SD/dialects/*/*/RCS
a91 1
  rm -rf $SD/dialects/*/*/NEW
@


1.10
log
@Revision 4.35
Correct MD5 URL.  Change other ftp references to URLs.
Make minor wording changes.
@
text
@d239 1
a239 1
My key is available on public key servers under the name:
a245 4

and:

    http://www-rcd.cc.purdue.edu/abe/
@


1.9
log
@Add usage.c
@
text
@d213 1
a213 3
The md5 checksum tools may be obtained via anonymous ftp from
cert.org.  Look in the pub/tools/md5 and pub/tools/md5check
subdirectories.
d235 2
a236 2
above checksum considers block size to be 1,024; the Solaris sum(1)
in contrast considers block size to be 512.
d241 1
a241 1
        Victor A. Abell <abe@@cc.purdue.edu>
d243 1
a243 1
You may also find it via anonymous ftp to vic.cc.purdue.edu in:
d245 1
a245 1
        pub/tools/unix/lsof/Victor_A_Abell.pgp
d247 1
a247 1
and at the URL:
d249 1
a249 1
        http://www-rcd.cc.purdue.edu/abe/
d254 1
a254 1
        pgp $ST.asc $ST
d256 2
a257 3
If the signatures don't match, $ST is suspect.  Contact me
at the e-mail address <abe@@cc.purdue.edu> to get a trustworthy
copy.
d259 5
a263 6
If you don't have PGP, you can check the md5 checksum of $ST
against the value listed at the beginning of this file.  However,
this is a less reliable authentication method, since it can't detect
changes to both $ST and this file's md5 checksum.  PGP is
available via anonymous ftp from ftp.csua.berkeley.edu in the
pub/cypherpunks/pgp subdirectory.
@


1.8
log
@Revision 4.23
Adjust dialect subdirectory cleanup to cope with new Linux organization.
@
text
@d54 1
a54 1
F="00.README.FIRST 00CREDITS 00DCACHE 00DIALECTS 00DIST 00FAQ 00LSOF-L 00MANIFEST 00PORTING 00QUICKSTART 00README 00XCONFIG AFSConfig Configure Customize Inventory dialects arg.c lib lsof.h lsof_fields.h main.c misc.c node.c print.c proc.c proto.h scripts store.c version"
@


1.7
log
@Enable edition suffix.
@
text
@d84 1
d86 1
d88 1
@


1.6
log
@Add 00LSOF-L.
@
text
@d6 4
d27 12
d50 1
@


1.5
log
@Revision 4.14
Add 00DIALECTS
@
text
@d37 1
a37 1
F="00.README.FIRST 00CREDITS 00DCACHE 00DIALECTS 00DIST 00FAQ 00MANIFEST 00PORTING 00QUICKSTART 00README 00XCONFIG AFSConfig Configure Customize Inventory dialects arg.c lib lsof.h lsof_fields.h main.c misc.c node.c print.c proc.c proto.h scripts store.c version"
@


1.4
log
@Copy 00XCONFIG
@
text
@d37 1
a37 1
F="00.README.FIRST 00CREDITS 00DCACHE 00DIST 00FAQ 00MANIFEST 00PORTING 00QUICKSTART 00README 00XCONFIG AFSConfig Configure Customize Inventory dialects arg.c lib lsof.h lsof_fields.h main.c misc.c node.c print.c proc.c proto.h scripts store.c version"
@


1.3
log
@Revision 4.09
Make sure lib/{OLD,NEW} are removed.
@
text
@d37 1
a37 1
F="00.README.FIRST 00CREDITS 00DCACHE 00DIST 00FAQ 00MANIFEST 00PORTING 00QUICKSTART 00README AFSConfig Configure Customize Inventory dialects arg.c lib lsof.h lsof_fields.h main.c misc.c node.c print.c proc.c proto.h scripts store.c version"
@


1.2
log
@Correct pre-4.0 errors.
@
text
@d60 1
d62 1
@


1.1
log
@Initial revision
@
text
@d37 1
a37 1
F="00.README.FIRST 00CREDITS 00DCACHE 00DIST 00FAQ 00MANIFEST 00PORTING 00QUICKSTART 00README AFSConfig Configure Customize Inventory dialects arg.c lsof.h lsof_fields.h main.c misc.c node.c print.c proc.c proto.h scripts store.c version"
d59 5
a63 1
  echo "Removing extraneous stuff from dialects."
d69 1
a69 1
  echo "Removing extraneous stuff from scripts."
d89 1
a89 1
  echo "Checking $SD for completeness."
d319 1
@
