head	1.13;
access;
symbols;
locks; strict;
comment	@# @;


1.13
date	2012.04.10.16.45.54;	author abe;	state Exp;
branches;
next	1.12;

1.12
date	2008.10.22.14.39.38;	author abe;	state Exp;
branches;
next	1.11;

1.11
date	2007.04.24.16.19.12;	author abe;	state Exp;
branches;
next	1.10;

1.10
date	2004.03.17.20.32.23;	author abe;	state Exp;
branches;
next	1.9;

1.9
date	2003.03.27.01.54.49;	author abe;	state Exp;
branches;
next	1.8;

1.8
date	2001.11.12.02.22.29;	author abe;	state Exp;
branches;
next	1.7;

1.7
date	2001.02.15.15.29.49;	author abe;	state Exp;
branches;
next	1.6;

1.6
date	99.06.01.10.13.38;	author abe;	state Exp;
branches;
next	1.5;

1.5
date	99.05.10.18.22.25;	author abe;	state Exp;
branches;
next	1.4;

1.4
date	99.05.01.03.06.33;	author abe;	state Exp;
branches;
next	1.3;

1.3
date	99.02.25.20.16.39;	author abe;	state Exp;
branches;
next	1.2;

1.2
date	99.02.22.07.51.24;	author abe;	state Exp;
branches;
next	1.1;

1.1
date	99.02.20.13.22.08;	author abe;	state Exp;
branches;
next	;


desc
@Test lsof arguments for stack overflows.
@


1.13
log
@Add +|-e
@
text
@#!/bin/sh
#
# argtest -- test lsof arguments for stack overflows
#
# usage: argtest [path_to_lsof]
#
#   where:
#	    path_to_lsof	optional *absolute* path to lsof (default
#				${HOME}/src/lsof4/lsof)

ARG_A=`pwd`/argtest_a.$$
ARG_N=`pwd`/argtest_n.$$
ERR=0
SH=`pwd`/lsoftest.$$
SH1=`pwd`/lsoftestc.$$
T=`pwd`/argtest_tmp.$$
T1=`pwd`/argtest_tmp1.$$
trap 'rm -f $ARG_A $ARG_N $SH $SH1 $T $T1; exit 1' 1 2 3 15

# Decide how to use echo.

ECHO=`echo -n ""`
if test "X$ECHO" = "X-n "
then
  EC="\c"
  EO=""
else
  EC=""
  EO="-n"
fi

# Establish the lsof path.

if test $# -gt 0
then
  LSOF=$1
else
  LSOF=${HOME}/src/lsof4/lsof
fi

# Create temporary files that can be used as very large alphabetic
# and numeric arguments.

rm -f $ARG_A $T $T1
echo $EO "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ012345678901$EC" > $T
cp $T $T1
for i in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
do
  cat $T >> $T1
done
cp $T1 $ARG_A
for i in 1 2 3 4 5 6 7
do
  cat $T1 >> $ARG_A
done
rm -f $T $T1
ls -l $ARG_A
rm -f $ARG_N $T $T1
echo $EO "0123456789012345678901234567890123456789012345678901234567890123$EC" > $T
cp $T $T1
for i in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
do
  cat $T >> $T1
done
cp $T1 $ARG_N
for i in 1 2 3 4 5 6 7
do
  cat $T1 >> $ARG_N
done
rm -f $T $T1
ls -l $ARG_N

# Create a temporary shell script to execute lsof with options that require
# arguments, and use the contents of $ARG_A and $ARG_N as the arguments.

rm -f $SH $SH1
echo "#!/bin/sh" > $SH
echo "#!/bin/sh" > $SH1
echo "$LSOF \$1 \`cat $ARG_A\`" >> $SH
echo "$LSOF -c/\`cat $ARG_A\`/" >> $SH1
echo "$LSOF \$1 \`cat $ARG_N\`" >> $SH
echo "$LSOF -c/\`cat $ARG_N\`/" >> $SH1
chmod +x $SH $SH1
ls -l $SH $SH1

for a in -A -c -c/ +c +d +D -e +e -f +f -F -g -i -i4 -i6 -i@@ -i: -k +L -m +m -p -s -stcp: -sudp: -T -u -x -z -Z
do
  echo $EO "Testing: $a ... $EC"
  if test "X$a" = "X-c/"
  then
    $SH1 2>&1 | egrep "Memory fault|Segmentation fault|Bus Error" > /dev/null 2>&1
  else
    $SH $a 2>&1 | egrep "Memory fault|Segmentation fault|Bus Error" > /dev/null 2>&1
  fi
  if test $? -eq 0
  then
    echo "!!!!FAILED!!!!"
    ERR=1
  else
   echo "OK"
  fi
done
rm -f $ARG_A $ARG_N $SH $SH1 core
exit $ERR
@


1.12
log
@Revision 4.81
Add -s tests.
@
text
@d86 1
a86 1
for a in -A -c -c/ +c +d +D -f +f -F -g -i -i4 -i6 -i@@ -i: -k +L -m +m -p -s -stcp: -sudp: -T -u -x -z -Z
@


1.11
log
@Revision 4.78
Add -Z test.
@
text
@d86 1
a86 1
for a in -A -c -c/ +c +d +D -f +f -F -g -i -i4 -i6 -i@@ -i: -k +L -m +m -p -T -u -x -z -Z
@


1.10
log
@Add +m, -x and -z.
@
text
@d86 1
a86 1
for a in -A -c -c/ +c +d +D -f +f -F -g -i -i4 -i6 -i@@ -i: -k +L -m +m -p -T -u -x -z
@


1.9
log
@Revision 4.67
Add +c.
@
text
@d86 1
a86 1
for a in -A -c -c/ +c +d +D -f +f -F -g -i -i4 -i6 -i@@ -i: -k +L -m -p -T -u
@


1.8
log
@Add -i4 and -i6 to test list.
@
text
@d86 1
a86 1
for a in -A -c -c/ +d +D -f +f -F -g -i -i4 -i6 -i@@ -i: -k +L -m -p -T -u
@


1.7
log
@Add -c/.../
@
text
@d86 1
a86 1
for a in -A -c -c/ +d +D -f +f -F -g -i -i@@ -i: -k +L -m -p -T -u
@


1.6
log
@Add alpha and numeric argument checks.
@
text
@d15 1
d18 1
a18 1
trap 'rm -f $ARG_A $ARG_N $SH $T $T1; exit 1' 1 2 3 15
d76 1
a76 1
rm -f $SH
d78 1
d80 1
d82 3
a84 2
chmod +x $SH
ls -l $SH
d86 1
a86 1
for a in -A -c +d +D -f +f -F -g -i -i@@ -i: -k +L -m -p -T -u
d89 6
a94 1
  $SH $a 2>&1 | egrep "Memory fault|Segmentation fault|Bus Error" > /dev/null 2>&1
d103 1
a103 1
rm -f $ARG_A $ARG_N $SH core
@


1.5
log
@Add +f
@
text
@d11 2
a12 1
ARG=`pwd`/argtest.$$
d17 1
a17 1
trap 'rm -f $ARG $SH $T $T1; exit 1' 1 2 3 15
d40 2
a41 1
# Create a temporary file that can be used as a very large argument.
d43 15
a57 1
rm -f $ARG $T $T1
d64 1
a64 1
cp $T1 $ARG
d67 1
a67 1
  cat $T1 >> $ARG
d70 1
a70 1
ls -l $ARG
d73 1
a73 1
# arguments, and use the contents of $ARG as the arguments.
d77 2
a78 1
echo "$LSOF \$1 \`cat $ARG\`" >> $SH
d94 1
a94 1
rm -f $ARG $SH core
@


1.4
log
@Revision 4.43
Add +L and make long argument numeric.
@
text
@d65 1
a65 1
for a in -A -c +d +D -f -F -g -i -i@@ -i: -k +L -m -p -T -u
@


1.3
log
@Learn about echo.  Test for different types of stack overflow fault
messages.
@
text
@d42 1
a42 1
echo $EO "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa$EC" > $T
d65 1
a65 1
for a in -A -c +d +D -f -F -g -i -i@@ -i: -k -m -p -T -u
@


1.2
log
@Check for any fault message from the lsof script, not just "Memory fault."
@
text
@d11 1
a11 1
ARG=/tmp/argtest.$$
d13 3
a15 3
SH=/tmp/lsoftest.$$
T=/tmp/argtest_tmp.$$
T1=/tmp/argtest_tmp1.$$
d18 12
d42 1
a42 1
echo -n aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa > $T
d67 2
a68 2
  echo -n "Testing: $a ... "
  $SH $a 2>&1 | grep "fault" > /dev/null
d77 1
a77 1
rm -f $ARG $SH
@


1.1
log
@Initial revision
@
text
@d14 3
a16 1
trap 'rm -f $ARG $SH; exit 1' 1 2 3 15
d29 13
a41 65
rm -f $ARG
echo -n aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa > $ARG
echo -n aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa >> $ARG
echo -n aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa >> $ARG
echo -n aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa >> $ARG
echo -n aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa >> $ARG
echo -n aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa >> $ARG
echo -n aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa >> $ARG
echo -n aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa >> $ARG
echo -n bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb >> $ARG
echo -n bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb >> $ARG
echo -n bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb >> $ARG
echo -n bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb >> $ARG
echo -n bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb >> $ARG
echo -n bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb >> $ARG
echo -n bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb >> $ARG
echo -n bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb >> $ARG
echo -n cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc >> $ARG
echo -n cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc >> $ARG
echo -n cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc >> $ARG
echo -n cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc >> $ARG
echo -n cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc >> $ARG
echo -n cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc >> $ARG
echo -n cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc >> $ARG
echo -n cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc >> $ARG
echo -n dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd >> $ARG
echo -n dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd >> $ARG
echo -n dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd >> $ARG
echo -n dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd >> $ARG
echo -n dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd >> $ARG
echo -n dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd >> $ARG
echo -n dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd >> $ARG
echo -n dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd >> $ARG
echo -n eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee >> $ARG
echo -n eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee >> $ARG
echo -n eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee >> $ARG
echo -n eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee >> $ARG
echo -n eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee >> $ARG
echo -n eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee >> $ARG
echo -n eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee >> $ARG
echo -n eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee >> $ARG
echo -n ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff >> $ARG
echo -n ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff >> $ARG
echo -n ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff >> $ARG
echo -n ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff >> $ARG
echo -n ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff >> $ARG
echo -n ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff >> $ARG
echo -n ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff >> $ARG
echo -n ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff >> $ARG
echo -n gggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg >> $ARG
echo -n gggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg >> $ARG
echo -n gggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg >> $ARG
echo -n gggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg >> $ARG
echo -n gggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg >> $ARG
echo -n gggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg >> $ARG
echo -n gggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg >> $ARG
echo -n gggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg >> $ARG
echo -n hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh >> $ARG
echo -n hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh >> $ARG
echo -n hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh >> $ARG
echo -n hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh >> $ARG
echo -n hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh >> $ARG
echo -n hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh >> $ARG
echo -n hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh >> $ARG
echo -n hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh >> $ARG
d56 1
a56 1
  $SH $a 2>&1 | grep "Memory fault" > /dev/null
@
